<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Intelligent Artifice</title><link href="http://www.mikelanzetta.com/" rel="alternate"></link><link href="http://www.mikelanzetta.com/feeds/all.atom.xml" rel="self"></link><id>http://www.mikelanzetta.com/</id><updated>2017-06-27T12:34:00-07:00</updated><entry><title>Deep Learning on Windows, Redux</title><link href="http://www.mikelanzetta.com/deep-learning-on-windows-redux.html" rel="alternate"></link><published>2017-06-27T12:34:00-07:00</published><updated>2017-06-27T12:34:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2017-06-27:/deep-learning-on-windows-redux.html</id><summary type="html">&lt;p&gt;An updated primer on how to get deep learning frameworks up and running on Windows, with examples.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Why the Rewrite?&lt;/h2&gt;
&lt;p&gt;When I wrote my initial &lt;a href="./deep-learning-on-windows.html"&gt;Deep Learning on Windows&lt;/a&gt; guide, it was a year ago - TensorFlow was just starting to surface and was far from running on Windows, CNTK didn't run in Python, and Theano was the current king of the heap. Seems like a lifetime ago in the Deep Learning world, and the whole universe of DL has changed since then. For one, it's dramatically easier to get up and running, and my example is woefully out of date. It's time for an update.&lt;/p&gt;
&lt;h2&gt;A Quick Guide to Deep Learning&lt;/h2&gt;
&lt;p&gt;Deep Learning is a newly-popular set of techniques in the field of Machine Learning that have shown the power to generalize well over a whole host of problems, and even solve some problems that were considered unsolvable just a few years before. There are &lt;a href="http://deeplearning.net/tutorial/"&gt;many&lt;/a&gt; &lt;a href="http://deeplearning.stanford.edu/tutorial/"&gt;tutorials&lt;/a&gt; and &lt;a href="https://www.quora.com/What-is-deep-learning"&gt;write-ups&lt;/a&gt; on these techniques &lt;a href="https://www.microsoft.com/en-us/research/publication/deep-learning-methods-and-applications/"&gt;online&lt;/a&gt;, so I won't go too deep, but I'll lay out the basics.&lt;/p&gt;
&lt;p&gt;People have known for some time that a particular Machine Learning technique - Neural Networks - has the capability to learn complex mappings from inputs (e.g. images) to outputs (e.g. "which digit is this?") through the use of a "hidden layer" that mapped between the two.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A Simple MLP" src="http://www.mikelanzetta.com/images/Multilayer_Perceptron.png"&gt;&lt;/p&gt;
&lt;p&gt;With the advent of &lt;em&gt;Big Data&lt;/em&gt;, we suddenly have incredibly large sets of input data we could feed to these models, and with the increasing power of GPUs we have the compute capacity to do so. We had seen Neural Networks with multiple hidden layers in the past, but training them was so expensive and they didn't seem to outperform other techniques, so they'd been discarded. Someone realized that with the amount of data we now have and the compute resources available to us, these constraints no longer applied and these older networks were brought back.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Denser, Deeper Neural Network" src="http://www.mikelanzetta.com/images/Dense_NN.png"&gt;&lt;/p&gt;
&lt;p&gt;Since then, networks have only gotten deeper (more hidden layers) and their shapes have only gotten stranger (convolutional neurons, feedback loops, and layer skipping). At this point we know they are powerful, but we don't really know how powerful they can get and the field is wide open for advancement. For a more detailed and far more eloquent history of the field, see &lt;a href="https://devblogs.nvidia.com/parallelforall/deep-learning-nutshell-history-training/"&gt;NVidia's great post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I'll walk you through how to get one of the most popular toolkits up and running on Windows, and run through and explain some fun examples. Speaking of NVidia, this post assumes you have an NVidia GPU which will make your neural networks train &lt;em&gt;MUCH&lt;/em&gt; faster.&lt;/p&gt;
&lt;h2&gt;Deep Learning Toolkits&lt;/h2&gt;
&lt;p&gt;Machine Learning has been around for a long time and there are dozens of frameworks out there written in everything from low-level C code to AzureML. In the Deep Learning space several frameworks have risen to prominence only to gradually lose ground to the "next big thing". It's hard to say who has the best framework, and a lot of it right now comes down to choices about whether it supports your current and expected needs, whether it runs on your platform and whether you can code to it in a language you enjoy. TensorFlow seems to be the current king of the heap and has a lot of mind-share behind it, but PyTorch is coming up as a strong contender and of course Microsoft's Cognitive Toolkit is now a player with v2's support for Python.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt; is one of the elders of the field, and with their "Model Zoo" of pre-trained models makes a compelling case for continued usefulness. With plenty of tutorials, good documentation, and a binding for Python it's a solid choice. It was supplanted by &lt;a href="http://torch.ch/"&gt;Torch&lt;/a&gt;, Facebook's framework for Lua. This was popular for a while until it started being replaced by more modern Tensor-based variants. These Tensor-based networks allow for &lt;em&gt;networks of computations&lt;/em&gt; instead of &lt;em&gt;networks of layers&lt;/em&gt; and have proven to be more flexible for modern deep learning models. Since this is all just math, both of these have been revised to more gracefully support computation networks at this point, and with &lt;a href="http://pytorch.org/"&gt;PyTorch&lt;/a&gt; and &lt;a href="https://caffe2.ai/"&gt;Caffe2&lt;/a&gt; both of these frameworks have a new lease on life.&lt;/p&gt;
&lt;p&gt;Microsoft's &lt;a href="https://github.com/Microsoft/CNTK"&gt;Cognitive Toolkit&lt;/a&gt; and Google's &lt;a href="https://github.com/tensorflow/tensorflow"&gt;TensorFlow&lt;/a&gt; are both Tensor-based systems - both run on Linux and Windows. &lt;a href="https://github.com/fchollet/keras"&gt;Keras&lt;/a&gt; is a wrapper around existing Tensor toolkits that allows for easier model building, training, and evaluation - it easily runs atop TensorFlow and CNTK, as well as an older alternate I used in the previous version of this article (&lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Keras, TensorFlow, and CNTK&lt;/h2&gt;
&lt;h3&gt;Installing on Windows&lt;/h3&gt;
&lt;p&gt;Keras, TensorFlow and CNTK all (can) run as Python libraries, so the first thing we'll need to do is get a Python installation on Windows. For this, there are a couple of great options out there, but I'll go with &lt;a href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; - this differs from my previous post where I used &lt;a href="https://winpython.github.io/"&gt;WinPython&lt;/a&gt;. Why did I change? Primarily because I'm now on so many different projects that I need to maintain a large number of environments sometimes using different Python versions, and I find that Anaconda makes that easier. My point about WinPython having a side-effect-free installation, however, still holds true.&lt;/p&gt;
&lt;h4&gt;Installing Anaconda, Using Conda&lt;/h4&gt;
&lt;p&gt;Navigate to the Anaconda &lt;a href="https://www.continuum.io/downloads"&gt;download page&lt;/a&gt; and download the latest 64-bit installer. Once you've installed it into your location of choice, start up a new command window and we'll be ready to install the rest of the tools. First, though, you should take a brief detour to learn about &lt;a href="https://conda.io/docs/using/index.html"&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt; - we'll be using &lt;code&gt;conda&lt;/code&gt; to manage our environment, consider it like a &lt;code&gt;virtualenv&lt;/code&gt;++. If you already have Anaconda installed, consider trying &lt;code&gt;conda update conda&lt;/code&gt; and potentially &lt;code&gt;conda update python&lt;/code&gt; to make sure you're up to date.&lt;/p&gt;
&lt;p&gt;You should create an environment to isolate your baseline Python installation from any packages you install - this is both good practice for maintaining your installation, and for allowing you to document it and replicate it elsewhere (e.g. Docker, other VMs). To do so, pick a name (e.g. "deep-windows") and create a new environment using &lt;code&gt;conda create -n deep-windows&lt;/code&gt; (or whatever name you've chosen). You can then activate it using &lt;code&gt;activate deep-windows&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Adding the Baseline&lt;/h4&gt;
&lt;p&gt;Within your new environment we need to install the modern Deep Learning toolkits we'll be using, but first let's install several packages that we'll commonly need. Anaconda's repos tend to be a bit out of date, but they contain &lt;a href="https://software.intel.com/en-us/mkl"&gt;MKL-optimized&lt;/a&gt; versions of several packages that are useful. As such, I typically install those using &lt;code&gt;conda install&lt;/code&gt; and then use &lt;code&gt;pip install&lt;/code&gt; for all others. We'll be installing Numpy, Scipy, Pandas, Scikit-Learn, and Jupyter Notebooks. We'll need h5py because H5 is a common format for serialized models (including the Keras model we will be using below), and PIL (well, Pillow) for processing images. We should also consider installing Bokeh and/or Dash for better charting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; conda install numpy scipy
&amp;gt; pip install pandas scikit-learn jupyter h5py Pillow
&amp;gt; pip install bokeh dash
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;But First, a Word From Our GPU Overlords&lt;/h4&gt;
&lt;p&gt;We could install and run our Deep Learning tools right now, but as soon as you tried to train any model of complexity you'd grow old before it completed. For any reasonable training time, you'll need GPU support. I mentioned in the beginning that you should have an NVidia GPU for training, so let's set it up for Deep Learning Toolkit support. Head to the &lt;a href="https://developer.nvidia.com/cuda-toolkit"&gt;NVidia CUDA Toolkit&lt;/a&gt; home and download and install it. Then hit up the &lt;a href="https://developer.nvidia.com/deep-learning"&gt;NVidia Deep Learning&lt;/a&gt; center and sign up for a developer account. Download the &lt;a href="https://developer.nvidia.com/cudnn"&gt;CUDnn library&lt;/a&gt; and install it - currently &lt;a href="https://www.tensorflow.org/install/install_windows"&gt;TensorFlow wants&lt;/a&gt; CUDnn v5.1 with CUDA Toolkit v8.0, but that changes fast so click through and choose appropriately.&lt;/p&gt;
&lt;p&gt;NOTE: Once you install the CUDA Toolkit and CUDnn, you will likely need to restart your console and reactivate your environment to refresh your paths.&lt;/p&gt;
&lt;h4&gt;Adding the Latest Versions of CNTK, TensorFlow, and Keras&lt;/h4&gt;
&lt;p&gt;Now that your environment has a solid baseline to build upon, we'll install the latest releases of some of the modern Deep Learning toolkits I mentioned above. CNTK installs via Wheel files which you can find on their &lt;a href="https://docs.microsoft.com/en-us/cognitive-toolkit/Setup-Windows-Python"&gt;installation page&lt;/a&gt; (Note that if you want to use CNTK with BrainScript and/or the command line, you'll want &lt;a href="https://docs.microsoft.com/en-us/cognitive-toolkit/Setup-Windows-Binary-Script"&gt;the full install&lt;/a&gt; instead). TensorFlow installs via Pip and we'll be using the GPU version. Keras installs via Pip as well - it used to depend on Theano (see my previous post) and as of this writing it still winds up installing it, so expect some compilation here. If anything fails, this is likely where it'll go wrong. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; # Choose the install wheel from https://docs.microsoft.com/en-us/cognitive-toolkit/Setup-Windows-Python 
&amp;gt; pip install https://cntk.ai/PythonWheel/GPU/cntk-2.0-cp36-cp36m-win_amd64.whl
&amp;gt; pip install tensorflow-gpu
&amp;gt; pip install keras
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Testing Your Installation&lt;/h4&gt;
&lt;p&gt;With the latest CNTK, TensorFlow and Keras installed, ensure you can import the libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cntk&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;keras&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deep Dreaming&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://research.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html"&gt;Deep Dream&lt;/a&gt; has evolved some since my previous version of this post, so let's go straight to the (Keras) source, grab their example, and use that as our baseline. The Keras version now uses Inception V3 as opposed to the previous version using VGG16 - let's grab it and run it on our example image:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjacat_large.png"&gt;&lt;img alt="Ninjacat" src="http://www.mikelanzetta.com/images/ninjacat_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download the &lt;a href="https://raw.githubusercontent.com/fchollet/keras/master/examples/deep_dream.py"&gt;&lt;code&gt;deep_dream.py&lt;/code&gt;&lt;/a&gt; example from the Keras GitHub repo and run it on our example image. Assume you've downloaded the image above (the large version), you should be able to run the below and take a look at the result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; wget https://raw.githubusercontent.com/fchollet/keras/master/examples/deep_dream.py
&amp;gt; python deep_dream.py ninjacat_large.png ninjadream
&amp;gt; explorer ninjadream.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this would turn&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjacat_large.png"&gt;&lt;img alt="Ninjacat" src="http://www.mikelanzetta.com/images/ninjacat_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;into&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjadream_large_redux.png"&gt;&lt;img alt="Ninjacat, dreamy edition" src="http://www.mikelanzetta.com/images/ninjadream_small_redux.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTE: For those of you who don't have &lt;code&gt;wget&lt;/code&gt;, might I recommend installing Gnu tools for Windows from &lt;a href="https://github.com/bmatzelle/gow/wiki"&gt;GOW&lt;/a&gt; (and potentially checking out my earlier &lt;a href="./developing-on-windows.html"&gt;post on Windows tools&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Neural Artistry&lt;/h2&gt;
&lt;p&gt;Neural Artistry first surfaced with a &lt;a href="https://arxiv.org/pdf/1508.06576v2.pdf"&gt;paper from Germany&lt;/a&gt; and has since become another big showcase example for the power of Deep Learning. Essentially, the way it works is to take an existing trained Convolutional Neural Network and use it to convolve two images together, by joining the outputs of different convolutional layers from each image. The Keras example (as of now) still uses VGG16 for its network, so download the script and we'll use it to merge our favorite NinjaCat with a &lt;a href="https://en.wikipedia.org/wiki/The_Scream#/media/File:The_Scream.jpg"&gt;lesser known Norwegian work&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; wget https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/The_Scream.jpg/1280px-The_Scream.jpg -O the_scream.jpg
&amp;gt; wget https://raw.githubusercontent.com/fchollet/keras/master/examples/neural_style_transfer.py
&amp;gt; python neural_style_transfer.py ninjacat_large.png the_scream.jpg ninjascream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that'd turn&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjacat_large.png"&gt;&lt;img alt="Ninjacat" src="http://www.mikelanzetta.com/images/ninjacat_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;into&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjascream_large_redux.png"&gt;&lt;img alt="Ninjacat, screamy edition" src="http://www.mikelanzetta.com/images/ninjascream_small_redux.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion and Future Work&lt;/h2&gt;
&lt;p&gt;Setting up deep learning toolkits on Windows has become substantially easier in just the short time since I wrote my initial version of this article. TensorFlow now runs on Windows (finally), CNTK v2 works with Python and installs much more easily, and Keras runs against both TensorFlow (its new default) and CNTK. I'll write a follow-up to this with information on using Keras to switch between CNTK and TensorFlow, and how to use Docker containers to manage your Deep Learning training.&lt;/p&gt;</content><category term="Windows"></category><category term="Deep Learning"></category><category term="Machine Learning"></category><category term="Cognitive Toolkit"></category><category term="CNTK"></category><category term="TensorFlow"></category><category term="Keras"></category></entry><entry><title>NIPS 2016 Trip Report</title><link href="http://www.mikelanzetta.com/nips-2016-trip-report.html" rel="alternate"></link><published>2016-12-13T11:52:00-08:00</published><updated>2016-12-13T11:52:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2016-12-13:/nips-2016-trip-report.html</id><summary type="html">&lt;p&gt;Thoughts and insights from the 2016 NIPS conference&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="NIPS Logo" src="http://www.mikelanzetta.com/images/NipsLogoSmall.png" title="NIPS Logo"&gt;
&lt;a href="https://nips.cc"&gt;NIPS (Neural Information Processing Symposium)&lt;/a&gt; is one of the two largest academic conferences in the Machine Learning world (the other being ICML). This year the conference was held in Barcelona, which worked out well for me because I was planning to attend a hackfest the following week in Milan, so I decided to go as an attendee. &lt;/p&gt;
&lt;p&gt;The conference has doubled in size in the past year, with ~6000 attendees, so their advice to pick up your badge the day before the conference began proved to be quite wise.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/nips2016-registration-line.jpg" alt="Huge line at registration"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Picking up the day before == brilliant&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;General Insights&lt;/h2&gt;
&lt;p&gt;There were a few general insights I had during the conference. First - Google, Facebook, and OpenAI are the stars of the show - from the lanyard giving Google and Facebook pride-of-place, to the dueling Google Research and DeepMind booths, Google seems to be the dominant force. Deep Learning is still the star, but Tensor-based learning methods are generally only increasing in prominence - very little on "traditional" methods. Microsoft's booth had solid attendance, but our relatively confusing story (how many offerings do we have? is our Deep Learning system named CNTK or Cognitive Toolkit?) seemed to prevent "virality" compared to Google's TensorFlow or Facebook's Torch. I talked up CNTK v2 to a few people, but when they went to our booth to get stickers only "Microsoft Cognitive Toolkit" stickers could be found.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange'&gt;
&lt;img src="http://www.mikelanzetta.com/images/nips2016-google-research-booth.jpg" alt="Crowd around Google Research booth" style="float:left;margin-right:10px"/&gt;
&lt;img src="http://www.mikelanzetta.com/images/nips2016-microsoft-booth.jpg" alt="Crowd around Microsoft booth"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Google Research vs. Microsoft Booths&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Machine Learning Trends&lt;/h2&gt;
&lt;h3&gt;Keynote Talks&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Yann_LeCun"&gt;Yann LeCun&lt;/a&gt; gave an interesting keynote on the need for unsupervised learning in general domains as the big open challenge for the future of ML. He called the talk &lt;a href="https://drive.google.com/file/d/0BxKBnD5y2M8NREZod0tVdW5FLTQ/view"&gt;Predictive Learning&lt;/a&gt;, and described the need for the model to maintain an accurate "world state" in order to begin reasoning in a more general sense.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/yanns-cake.png" alt="Cake as illustration of learning challenges"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Yann's now-famous cake&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Drew Purves (former Microsoftie, now at DeepMind) gave a keynote where he talked about the launch of &lt;a href="https://github.com/deepmind/lab"&gt;DeepMind's Lab&lt;/a&gt; and more generally talked about the obligation of ML to help solve some of our most pressing environmental problems. He had some great illustrations in those slides, but I haven't seen him post them yet unfortunately.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Psyched so many at &lt;a href="https://twitter.com/hashtag/nips2016?src=hash"&gt;#nips2016&lt;/a&gt; loved illustrations from my &lt;a href="https://twitter.com/DeepMindAI"&gt;@DeepMindAI&lt;/a&gt; artist colleague Max Cant! Here&amp;#39;s a decent version of the medley :) &lt;a href="https://t.co/I7ShngYiMQ"&gt;pic.twitter.com/I7ShngYiMQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Drew Purves (@DrewPurves) &lt;a href="https://twitter.com/DrewPurves/status/806427029306560512"&gt;December 7, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Kyle_Cranmer"&gt;Kyle Cranmer&lt;/a&gt; presented on using ML models in the processing of data at CERN, and some of the unique challenges they face there. They deal with truly big data there, and do a substantial amount of pre-filtering in order to even scope the problem down to something surmountable (&lt;a href="https://figshare.com/articles/NIPS_2016_Keynote_Machine_Learning_Likelihood_Free_Inference_in_Particle_Physics/4291565/1"&gt;slides&lt;/a&gt; and &lt;a href="https://cds.cern.ch/record/1541893"&gt;video&lt;/a&gt;). With ~1PB of data per second, mountains of processors filter the incoming data to attempt to trap only "relevant" events (leading to "only" 100GB/s of data). His talk ranged over many different approaches so I encourage you to take a look at the slide deck. I'll just call out two interesting developments. First, &lt;a href="http://diana-hep.org/carl/"&gt;CARL&lt;/a&gt;, a module for "likelihood-free inference" in Python for using likelihood estimation techniques in model-training. Second, a &lt;a href="https://github.com/lukasheinrich/weinberg-test"&gt;Jupyter Notebook&lt;/a&gt; for generating high-energy physics simulations on the web. &lt;/p&gt;
&lt;h3&gt;Generative Adversarial Networks&lt;/h3&gt;
&lt;p&gt;Earlier this year at ICML the big trends were around understanding Deep Neural Nets and exploring Deep Reinforcement Learning. At NIPS Generative Adversarial Networks were the star of the show, with &lt;a href="https://en.wikipedia.org/wiki/Yann_LeCun"&gt;Yann LeCun&lt;/a&gt; saying in his keynote that they were the most important development in ML in the last ten to twenty years. Ian Goodfellow gave a great tutorial on GANs (see &lt;a href="http://www.iangoodfellow.com/slides/2016-12-04-NIPS.pdf"&gt;slides here&lt;/a&gt;), and the creators of &lt;a href="https://arxiv.org/abs/1606.03657v1"&gt;InfoGAN&lt;/a&gt; also gave a great talk.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/goodfellow-generative-taxonomy.png" alt="Taxonomy of generative models"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Great overview of generative models&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One key takeaway was that there is really no good method at present for judging the "success" of GANs in many domains. Maximum likelihood optimization results in blurry images, or images that bear some resemblance to reality but are still far from real. This extends to other domains as well, and is one of the big open issues in the field. In addition, mode collapse is still an unsolved problem (where a GAN Generator learns to generate a single sample type, instead of a diversity, since that's enough to fool the Descriminator). There has been some progress in this area, but it's another open area of research for a more general solution.&lt;/p&gt;
&lt;p&gt;There was a great talk going into the state of the art on the hacks that people are currently using to train GANs effectively by the folks at Facebook AI Research. If you're planning on working with GANs, I'd consider it required reading (&lt;a href="https://github.com/soumith/ganhacks"&gt;GitHub here&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Deep Learning and Tensors&lt;/h3&gt;
&lt;p&gt;In the Deep Learning space one of the star papers was on &lt;a href="https://arxiv.org/abs/1610.09513v1"&gt;Phased LSTMs&lt;/a&gt;, which added a time-based phase gate to each LSTM memory unit with learned phase offsets, meaning each memory gate only updated when "in phase" and leading to the equivalent of an attention memory network without the complexity. &lt;/p&gt;
&lt;p&gt;In a similar vein to the work using GANs as an input to a loss function for training other networks, my favorite-named paper &lt;a href="https://arxiv.org/abs/1606.04474"&gt;Learning to Learn by Gradient Descent by Gradient Descent&lt;/a&gt; had a strong showing at the poster session, although I missed their talk (was in the GAN workshop instead).&lt;/p&gt;
&lt;p&gt;There was a great talk in the Tensor workshop on how Deep Networks - and in particular CNNs - create exponential expressiveness with only polynomial parameters. This is due to overlapping of the CNN kernels and pooling. He also outlined in this talk how the choice of pooling creates local areas of attention, and alternate choices of pooling can lean to different network topologies able to detect global structure. Additionally, he pointed out that using e.g. CNNs to learn a single binary classifier limits the amount of information that can be learned from any given training sample, resulting in slower convergence and decreased expressiveness.&lt;/p&gt;
&lt;p&gt;The workshops seemed to give some actual in-the-wild implementations a chance to present, with an interesting talk from someone at Sandia on using a DNN to compute better estimates for parameters in dynamical systems - in their case fluid flow dynamics. This led to substantial improvements of the simulation over their current default simplifying assumptions, with only a marginal increase in simulation runtime.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/bcn-beach.jpg" alt="Beach scene as example of dynamical system"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Another fluid-flow example&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Other Methods&lt;/h3&gt;
&lt;p&gt;Variational Inference was big as well, with a great tutorial on it that outlined the method as well as its utility (&lt;a href="http://www.cs.columbia.edu/~blei/talks/2016_NIPS_VI_tutorial.pdf"&gt;slides&lt;/a&gt;). They walked through the origin of Variational Inference, from the requirement to approximate the Posterior distribution of a predictive model, through the mean-field method, using topic modeling as a motivating example. They then went through scaling VI via stochastic VI, and went deeper with approximating the ELBO via pathwise estimation and several other methods for scaling out VI. Finally, they finished with a deep-dive into better posterior estimation techniques.&lt;/p&gt;
&lt;p&gt;Forecasting and Time-Series were not ignored, but still seem like areas where traditional methods (e.g. ARIMA and its descendents) are holding their own. One tutorial went into deep math around why DL methods could forecast well, but was based on (IMHO) the questionable assumption of "smoothness" in the range [T-S, T]. As someone who did Forecasting for Amazon, I can guarantee that the area around Black Friday is anything but differentiable. &lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/smooth-surfaces-were-a-theme.jpg" alt="Rounded hallway in Park Guell"/&gt;
&lt;div style="width:790px;text-align:center;"&gt;Smoothness in action&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I cannot even begin to discuss the full breadth of content presented at NIPS. Machine Learning as a field is expanding far beyond even the specialists' ability to understand all of it, so for a non-theoretician practitioner it's nigh impossible to keep up. &lt;a href="https://tryolabs.com/blog/2016/12/06/major-advancements-deep-learning-2016/"&gt;Another article&lt;/a&gt; (far better than mine) regarding the advances in the past year just went viral on HN. I'd read that as well to get additional insight. This year at ICML it was quite clear that we didn't even know where the edges were with respect to what DNNs could do. That still seems to be the case at NIPS, and with GANs it's even more evident we still don't know what the limits might be. &lt;/p&gt;
&lt;p&gt;Definitely an exciting time to be in the field - I just wish I had more time to keep up. By the end of the conference, my brain felt thoroughly chewed on.&lt;/p&gt;
&lt;p&gt;&lt;a style='text-decoration: none; color: orange;'&gt;
&lt;img src="http://www.mikelanzetta.com/images/brain-eaten.jpg" alt="Snake-head sculpture appearing to chew on woman's head"/&gt;
&lt;div style="width:490px;text-align:center;"&gt;Braiinnnzzz&lt;/div&gt;
&lt;/a&gt;&lt;/p&gt;</content><category term="ML"></category><category term="Machine Learning"></category><category term="Deep Learning"></category><category term="GAN"></category><category term="Deep RL"></category></entry><entry><title>Deep Learning on Windows: A Getting Started Guide</title><link href="http://www.mikelanzetta.com/deep-learning-on-windows.html" rel="alternate"></link><published>2016-08-04T12:34:00-07:00</published><updated>2016-08-04T12:34:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2016-08-04:/deep-learning-on-windows.html</id><summary type="html">&lt;p&gt;A primer on how to get deep learning frameworks up and running on Windows, with examples.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;UPDATE&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href="./deep-learning-on-windows-redux.html"&gt;my new post&lt;/a&gt; on this - everything has changed in less than a year so fairly massive revisions were necessary.&lt;/p&gt;
&lt;h2&gt;A Quick Guide to Deep Learning&lt;/h2&gt;
&lt;p&gt;Deep Learning is a relatively new set of techniques in the field of Machine Learning that have shown the power to generalize well over a whole host of problems, and even solve some problems that were considered unsolveable just a few years before. There are &lt;a href="http://deeplearning.net/tutorial/"&gt;many&lt;/a&gt; &lt;a href="http://deeplearning.stanford.edu/tutorial/"&gt;tutorials&lt;/a&gt; and &lt;a href="https://www.quora.com/What-is-deep-learning"&gt;write-ups&lt;/a&gt; on these techniques &lt;a href="https://www.microsoft.com/en-us/research/publication/deep-learning-methods-and-applications/"&gt;online&lt;/a&gt;, so I won't go too deep, but I'll lay out the basics.&lt;/p&gt;
&lt;p&gt;People have known for some time that a particular Machine Learning technique - Neural Networks - has the capability to learn complex mappings from inputs (e.g. images) to outputs (e.g. "which digit is this?") through the use of a "hidden layer" that mapped between the two.&lt;/p&gt;
&lt;p&gt;&lt;img alt="A Simple MLP" src="http://www.mikelanzetta.com/images/Multilayer_Perceptron.png"&gt;&lt;/p&gt;
&lt;p&gt;With the advent of &lt;em&gt;Big Data&lt;/em&gt;, we suddenly have incredibly large sets of input data we could feed to these models, and with the increasing power of GPUs we have the compute capacity to do so. We had seen Neural Networks with multiple hidden layers in the past, but training them was so expensive and they didn't seem to outperform other techniques that they'd been discarded. Someone realized that with the amount of data we now have and the compute resources available to us, these constraints no longer applied and these older networks were brought back.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Denser, Deeper Neural Network" src="http://www.mikelanzetta.com/images/Dense_NN.png"&gt;&lt;/p&gt;
&lt;p&gt;Since then, networks have only gotten deeper (more hidden layers) and their shapes have only gotten stranger (convolutional neurons, feedback loops, and layer skipping). At this point, we know they are powerful, but we don't really know how powerful they can get, and the field is wide open for advancement. For a more detailed and far more eloquent history of the field, see &lt;a href="https://devblogs.nvidia.com/parallelforall/deep-learning-nutshell-history-training/"&gt;NVidia's great post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I'll walk you through how to get one of the most popular toolkits up and running on Windows, and run through and explain some fun examples.&lt;/p&gt;
&lt;h2&gt;Deep Learning Toolkits&lt;/h2&gt;
&lt;p&gt;Machine Learning has been around for a long time and there are dozens of frameworks out there written in everything from low-level C code to AzureML. In the Deep Learning space, several frameworks have risen to prominence only to gradually lose ground to the "next big thing". It's hard to say who has the best framework, and a lot of it right now comes down to choices about whether it supports your current and expected needs, whether it runs on your platform, and whether you can code to it in a language you enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt; is one of the elders of the field, and with their "Model Zoo" of pre-trained models makes a compelling case for continued usefulness. With plenty of tutorials, good documentation, and a binding for Python, it's a solid choice. It was supplanted by &lt;a href="http://torch.ch/"&gt;Torch&lt;/a&gt;, Facebook's framework for Lua. This was popular for a while, until it started being replaced by more modern Tensor-based variants. These Tensor-based networks allow for &lt;em&gt;networks of computations&lt;/em&gt; instead of &lt;em&gt;networks of layers&lt;/em&gt;, and have proven to be more flexible for modern deep learning models.&lt;/p&gt;
&lt;p&gt;Microsoft's &lt;a href="https://github.com/Microsoft/CNTK"&gt;CNTK&lt;/a&gt; and Google's &lt;a href="https://github.com/tensorflow/tensorflow"&gt;TensorFlow&lt;/a&gt; are both Tensor-based systems - both run on Linux, while CNTK runs on Windows and TensorFlow runs on Mac. Today I'll be focusing on one of TensorFlow's cheif competitors - &lt;a href="https://github.com/Theano/Theano"&gt;Theano&lt;/a&gt;. Theano is a Python-bound library that I find useful because it works in low-level Tensor space, but has libraries built on top of it like &lt;a href="https://github.com/fchollet/keras"&gt;Keras&lt;/a&gt; and &lt;a href="https://github.com/Lasagne/Lasagne"&gt;Lasagne&lt;/a&gt; that allow you to think at a higher level of abstraction, so e.g. defining a Convolutional Neural Network is trivial with Keras. This isn't meant to imply that Theano is the best - in fact if you want to see a more in-depth comparison of the frameworks, I'd recommend &lt;a href="https://github.com/zer0n/deepframeworks#ecosystem"&gt;this living article&lt;/a&gt; by Kenneth Tran.&lt;/p&gt;
&lt;h2&gt;Theano, Keras, and Lasagne&lt;/h2&gt;
&lt;h3&gt;Installing on Windows&lt;/h3&gt;
&lt;p&gt;Theano, Keras and Lasagne are all Python libraries, so the first thing we'll need to do is get a Python installation on Windows. For this, there are a couple of great options out there, but I'll go with &lt;a href="https://winpython.github.io/"&gt;WinPython&lt;/a&gt; for two reasons - first, it installs with no side-effects, so can run side-by-side with any existing Anaconda or other installation you might have; second, it comes with a whole host of packages that you'll need already pre-installed (Numpy, Pandas, Sklearn).&lt;/p&gt;
&lt;h4&gt;Installing WinPython 3.x&lt;/h4&gt;
&lt;p&gt;As of the time of writing (2016-08-02) &lt;a href="https://sourceforge.net/projects/winpython/files/WinPython_3.4/3.4.4.3/"&gt;WinPython 3.4.4.3&lt;/a&gt; is the latest branch of the 3.4 tree, and Theano did not yet support Python 3.5 on Windows (here's a &lt;a href="http://stevedower.id.au/blog/building-for-python-3-5/"&gt;good description of why&lt;/a&gt;). If you're reading this far in the future, you should probably go to &lt;a href="https://winpython.github.io/"&gt;the main WinPython page&lt;/a&gt; and &lt;a href="http://deeplearning.net/software/theano/install.html"&gt;the Theano install docs&lt;/a&gt; to determine which version to use (or if you're &lt;em&gt;very&lt;/em&gt; far in the future, have your robot butler do it for you). Please use the 64-bit version (or if you're &lt;em&gt;insanely&lt;/em&gt; far in the future, the 512-bit version).&lt;/p&gt;
&lt;p&gt;Once you've picked your version, installing is as trivial as downloading, double-clicking, and choosing where you want it. Since (as mentioned above) WinPython doesn't have any side-effects, I like to put it in a developer tools directory (c:\dev\tools\WinPython) so it's easy to find. WinPython comes with its own command window which instantiates with the correct path settings, allowing you to keep it off of your path and side-effect free.&lt;/p&gt;
&lt;h4&gt;Adding the Latest Theano, Keras and Lasagne&lt;/h4&gt;
&lt;p&gt;Now that you have WinPython installed, let's install the latest and greatest of the three toolkits we're using, via &lt;code&gt;pip&lt;/code&gt;. Start up the &lt;code&gt;WinPython Command Prompt&lt;/code&gt; and enter &lt;code&gt;pip --version&lt;/code&gt; to ensure you're using the right version. It should mention the directory and version so you know exactly what you're dealing with, and you can then install the packages via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; pip install --upgrade --no-deps https://github.com/Theano/Theano/archive/master.zip
&amp;gt; pip install --upgrade --no-deps https://github.com/fchollet/keras/archive/master.zip
&amp;gt; pip install --upgrade --no-deps https://github.com/Lasagne/Lasagne/archive/master.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This installs the latest version of each directly from GitHub, without upgrading any of the dependencies (trust me, you don't want to accidentally upgrade Numpy unless you enjoy watching compiler errors).&lt;/p&gt;
&lt;h4&gt;Testing Your Installation&lt;/h4&gt;
&lt;p&gt;With the latest Theano installed, ensure you can import the library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;theano&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should take some time, but complete successfully. Now you can clone the examples I've put together on &lt;a href="https://github.com/noodlefrenzy/deep-learning-on-windows"&gt;GitHub&lt;/a&gt;, and run the &lt;code&gt;mnist.py&lt;/code&gt; example. This will test out both Lasagne and Theano by downloading the &lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;MNIST data-set&lt;/a&gt; and training a classifier to recognize images of digits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git clone https://github.com/noodlefrenzy/deep-learning-on-windows.git
&amp;gt; cd deep-learning-on-windows
&amp;gt; python mnist.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this runs successfully, you know you have a working version of Theano and Lasagne. You might want to Ctrl+C before it finishes, since it'll be running pretty slow. Now to make it work at speeds where you can actually do something useful with it.&lt;/p&gt;
&lt;h3&gt;GPU Support&lt;/h3&gt;
&lt;p&gt;If you have an NVidia GPU, you can make your deep learning frameworks &lt;strong&gt;much&lt;/strong&gt; faster using &lt;a href="https://www.nvidia.com/object/cuda_home_new.html"&gt;CUDA&lt;/a&gt; and &lt;a href="https://developer.nvidia.com/cudnn"&gt;CUdnn&lt;/a&gt;. First, you should download the &lt;a href="https://developer.nvidia.com/cuda-toolkit"&gt;CUDA Toolkit&lt;/a&gt; and install it, then register for CUdnn, download that, and install it. I typically "install" CUdnn by just copying the contents of the &lt;code&gt;cuda&lt;/code&gt; directory into the installed CUDA Toolkit (which for me on v7.5 is at &lt;code&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5&lt;/code&gt;). At the time of this writing (2016-08-02), CUDA 8 isn't supported by Theano, so I've installed CUDA 7.5.&lt;/p&gt;
&lt;p&gt;Once you have the libraries installed, you'll need to set the appropriate environment variable (&lt;code&gt;CUDA_PATH&lt;/code&gt;) to your install (in my case &lt;code&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.5&lt;/code&gt;). I also add &lt;code&gt;%CUDA_PATH%\bin&lt;/code&gt; to my &lt;code&gt;PATH&lt;/code&gt; so I have access to the various CUDA tools.&lt;/p&gt;
&lt;h4&gt;Installing a Compiler&lt;/h4&gt;
&lt;p&gt;Using CUDA 7.5 requires an (old) Microsoft 64-bit C++ compiler be installed - specifically Visual Studio 2012 or 2013. For more details of CUDA on Windows, see &lt;a href="http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/#axzz4GDkECEZk"&gt;their intallation guide&lt;/a&gt;. For those of you without VS2013 or an MSDN subscription, download the &lt;a href="https://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx"&gt;community edition&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Configuring Theano To Use GPU&lt;/h4&gt;
&lt;p&gt;Theano has several configuration options that control how it builds and runs models, so to get it to run using your GPU, you'll need to reconfigure it. Since this is likely something you'll want for all of your Theano code, I create a &lt;code&gt;.theanorc&lt;/code&gt; file for my entire WinPython install under the &lt;code&gt;settings&lt;/code&gt; directory in WinPython (for me, that's &lt;code&gt;C:\dev\tools\WinPython\settings&lt;/code&gt;). I've placed an example Theano configuration file in my GitHub repo, but the core settings are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    [global]
    device=gpu

    [nvcc]
    compiler_bindir=C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\amd64
    flags=--cl-version=2013
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;(Re-)Testing Your Installation&lt;/h4&gt;
&lt;p&gt;Now that you've enabled GPU support, try running the MNIST example again (&lt;code&gt;python mnist.py&lt;/code&gt;) and see what a difference having a GPU makes - the time for training a single epoch should be dramatically improved.  &lt;/p&gt;
&lt;h2&gt;Deep Dreaming&lt;/h2&gt;
&lt;p&gt;I have to hand it to Google; their posts from the DeepMind team have been some of the most interesting in the field, not least &lt;a href="https://research.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html"&gt;their post&lt;/a&gt; introducing "Deep Dream" and "Neural Artwork". We can replicate similar results using Keras, with the &lt;code&gt;deep_dream.py&lt;/code&gt; example from my repo. This program uses the convolutional layers of the VGG16 network (from the &lt;a href="http://www.robots.ox.ac.uk/~vgg/research/very_deep/"&gt;Visual Geometry Group&lt;/a&gt;) with pre-trained weights (&lt;a href="https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3"&gt;converted from Caffe&lt;/a&gt;). VGG16 was a top model in the ImageNet competition (ILSVRC) of 2014, and is considered a great playground because it performs quite well and yet its structure is relatively easy to understand.&lt;/p&gt;
&lt;p&gt;Assuming you've installed the pre-trained weights in &lt;code&gt;C:\dev\data&lt;/code&gt; and are running against &lt;code&gt;C:\dev\images\ninjacat.png&lt;/code&gt;, you could use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python deep_dream.py --weights_root c:\dev\data c:\dev\images\ninjacat.png ninjadream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this would turn&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjacat_large.png"&gt;&lt;img alt="Ninjacat" src="http://www.mikelanzetta.com/images/ninjacat_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;into&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjadream_large.png"&gt;&lt;img alt="Ninjacat, dreamy edition" src="http://www.mikelanzetta.com/images/ninjadream_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you run into errors, it could be due to changes in the way Keras or Theano works or how they integrate with CUDA or CUdnn - they are all in &lt;em&gt;very&lt;/em&gt; active development. If so, please take a look at &lt;a href="https://github.com/fchollet/keras/blob/master/examples/deep_dream.py"&gt;the &lt;em&gt;official&lt;/em&gt; &lt;code&gt;deep_dream.py&lt;/code&gt; example&lt;/a&gt; from Keras - my copy just has enhanced argument handling and has factored a few things to make it easier to play around with.&lt;/p&gt;
&lt;h2&gt;Neural Artistry&lt;/h2&gt;
&lt;p&gt;Neural Artistry first surfaced with a &lt;a href="https://arxiv.org/pdf/1508.06576v2.pdf"&gt;paper from Germany&lt;/a&gt; and has since become another big showcase example for the power of Deep Learning. Essentially, the way it works is to take an existing trained Convolutional Neural Network and use it to convolve two images together, by joining the outputs of different convolutional layers from each image. Assuming (again) that you've installed the VGG16 pre-trained weights in &lt;code&gt;C:\dev\data&lt;/code&gt; and are running against &lt;code&gt;C:\dev\images\ninjacat.png&lt;/code&gt; in the style of, say, "The Scream" (which you have at &lt;code&gt;C:\dev\images\thescream.png&lt;/code&gt;), your command would look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python neural_style_transfer.py --weights_root c:\dev\data c:\dev\images\ninjacat.png c:\dev\images\thescream.png ninjascream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that'd turn&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjacat_large.png"&gt;&lt;img alt="Ninjacat" src="http://www.mikelanzetta.com/images/ninjacat_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;into&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/ninjascream_large.png"&gt;&lt;img alt="Ninjacat, screamy edition" src="http://www.mikelanzetta.com/images/ninjascream_small.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once again, if you hit errors, please try &lt;a href="https://github.com/fchollet/keras/blob/master/examples/neural_style_transfer.py"&gt;the &lt;em&gt;official&lt;/em&gt; &lt;code&gt;neural_style_transfer.py&lt;/code&gt; example&lt;/a&gt; - my copy just factors out argument handling and lets you play around with which layers you use for transfer.&lt;/p&gt;
&lt;h2&gt;Conclusion and Future Work&lt;/h2&gt;
&lt;p&gt;Setting up deep learning toolkits on Windows is fairly easy, and they've made it quite simple to experiment with them even if you have no background in the field. TensorFlow for Windows &lt;a href="https://github.com/tensorflow/tensorflow/issues/17"&gt;is coming&lt;/a&gt; but is gated on Bazel support - once it happens, I'll create a follow-up post on &lt;a href="http://www.intelligent-artifice.net/"&gt;my blog&lt;/a&gt; and go through a similar set of examples, but until then there is nothing stopping you from joining the Deep Learning revolution on your Windows machine.&lt;/p&gt;</content><category term="Windows"></category><category term="Deep Learning"></category><category term="Machine Learning"></category><category term="Theano"></category><category term="Keras"></category><category term="Lasagne"></category></entry><entry><title>Python List Comprehensions Gone Crazy</title><link href="http://www.mikelanzetta.com/python-list-comprehensions-gone-crazy.html" rel="alternate"></link><published>2016-01-27T15:48:00-08:00</published><updated>2016-01-27T15:48:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2016-01-27:/python-list-comprehensions-gone-crazy.html</id><summary type="html">&lt;p&gt;Recently, I was messing around with some image recognition tasks in
Python, and wanted to take a look at some of the images in my training
set. At first, I was tempted to go open file explorer and walk around
the directory tree spot-checking a few, but then I remembered …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I was messing around with some image recognition tasks in
Python, and wanted to take a look at some of the images in my training
set. At first, I was tempted to go open file explorer and walk around
the directory tree spot-checking a few, but then I remembered that it
was easy to display images in an &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; notebook
using `IPython.display`.&lt;/p&gt;
&lt;p&gt;Perhaps I could write some code to walk the tree and show a few random
images from each directory. Surely it couldn't be that hard. I wrote a
simple method to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Found &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; files in &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Found no files for &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select_rand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Probably not the most efficient in the world, but it did exactly what I
wanted. Of course, at this point I was basically procrastinating from
what I was actually supposed to be doing, so decided to take it further.&lt;/p&gt;
&lt;p&gt;Could I reduce this whole shebang to a single list comprehension? Is
this good programming? Nope, definitely not, but it's a fun way to test
your understanding of a language, so let's do it.&lt;/p&gt;
&lt;p&gt;First, let's find a method that returns all of the files in a directory
tree, walking the tree like `os.path.walk` but returning the results
instead of visiting them - `os.walk` should do the trick. Why is
`os.path.walk` a visitor pattern and `os.walk` a generator? No clue,
let's move on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, we'll filter the files to images only:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's turn these into actual Image objects by replacing `img` with
`Image(os.path.join(t[0], img))`. Okay, we now have Image objects for
&lt;em&gt;all&lt;/em&gt; images, but that's too many to display in our notebook. We should
limit to three random ones from each directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We replace our `t[2]` with a random sample based on an inner
comprehension, and move our "is it an image" test into that
comprehension. This, however, explodes in my example with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ValueError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="n"&gt;larger&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;population&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Boom! I apparently have some subdirectory in there with only one or two
images. Rather than try for some even crazier nested inner lambda, I'll
just define a simple specialization of `sample` that's protected
against too few results, and replace `random.sample` with that. We
then `map` each result to the `display` method to show it in the
notebook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category></entry><entry><title>TensorFlow on Azure Using Docker</title><link href="http://www.mikelanzetta.com/tensorflow-on-azure-using-docker.html" rel="alternate"></link><published>2015-12-08T14:33:00-08:00</published><updated>2015-12-08T14:33:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-12-08:/tensorflow-on-azure-using-docker.html</id><summary type="html">&lt;p&gt;We live in a time of proliferating machine learning toolkits. From the
not-so-humble start of &lt;a href="http://opencv.org/"&gt;OpenCV&lt;/a&gt; (for computer
vision), &lt;a href="http://www.cs.waikato.ac.nz/ml/weka/"&gt;Weka&lt;/a&gt;, and
&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt;, in just a short period of
time we've added &lt;a href="http://torch.ch/"&gt;Torch&lt;/a&gt;,
&lt;a href="http://www.deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;,
&lt;a href="http://research.microsoft.com/apps/pubs/?id=226641"&gt;CNTK&lt;/a&gt;and now
&lt;a href="https://googleblog.blogspot.com/2015/11/tensorflow-smarter-machine-learning-for.html"&gt;TensorFlow&lt;/a&gt;and
&lt;a href="http://siliconangle.com/blog/2015/11/24/ibm-open-sources-its-systemml-machine-learning-tech/"&gt;SystemML&lt;/a&gt;
(and I'm not even mentioning things like
&lt;a href="http://spark.apache.org/docs/latest/mllib-guide.html"&gt;SparkML&lt;/a&gt;and
&lt;a href="https://azure.microsoft.com/en-us/services/machine-learning/"&gt;AzureML&lt;/a&gt;).
As …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We live in a time of proliferating machine learning toolkits. From the
not-so-humble start of &lt;a href="http://opencv.org/"&gt;OpenCV&lt;/a&gt; (for computer
vision), &lt;a href="http://www.cs.waikato.ac.nz/ml/weka/"&gt;Weka&lt;/a&gt;, and
&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt;, in just a short period of
time we've added &lt;a href="http://torch.ch/"&gt;Torch&lt;/a&gt;,
&lt;a href="http://www.deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt;,
&lt;a href="http://research.microsoft.com/apps/pubs/?id=226641"&gt;CNTK&lt;/a&gt;and now
&lt;a href="https://googleblog.blogspot.com/2015/11/tensorflow-smarter-machine-learning-for.html"&gt;TensorFlow&lt;/a&gt;and
&lt;a href="http://siliconangle.com/blog/2015/11/24/ibm-open-sources-its-systemml-machine-learning-tech/"&gt;SystemML&lt;/a&gt;
(and I'm not even mentioning things like
&lt;a href="http://spark.apache.org/docs/latest/mllib-guide.html"&gt;SparkML&lt;/a&gt;and
&lt;a href="https://azure.microsoft.com/en-us/services/machine-learning/"&gt;AzureML&lt;/a&gt;).
As a non-researcher who actually needs to make use of these things,
honestly, it's kind of freaking me out - way too much to learn in way
too short a time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt;is a shiny new tensor-based
neural network toolkit (so computational flow graphs instead of the more
traditional layer-based neural networks) which currently runs on Linux
and MacOS (but not Windows, due primarily to their dependence on Bazel
for building, see &lt;a href="https://github.com/tensorflow/tensorflow/issues/17"&gt;issue
17&lt;/a&gt; on their GitHub
repo). However, in the new Microsoft we don't let things like that stop
us! In this guide I'll show you how to deploy a TensorFlow-enabled
Python (Jupyter, really) Notebook onto a Linux VM in Azure using Docker.&lt;/p&gt;
&lt;h2&gt;Docker On Azure&lt;/h2&gt;
&lt;p&gt;If you're unfamiliar with Docker, it's a containerization service -
meaning that you build out a machine once, and let Docker take care of
stamping that image on as many "machines" (really, containers) as you
want. Container definitions can inherit, meaning if someone has built
almost exactly what you need, you're free to inherit from that and
add/remove as you see fit. The good news for me is that I can "stand on
the shoulders of giants" and use the hard work of others for my own
purposes.&lt;/p&gt;
&lt;p&gt;Docker came to Azure last year in a big way, and now it's easier than
ever to fire up a new VM running a Docker engine. Using the now-GA "new"
portal, just search for "Docker on Ubuntu":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search for docker on ubuntu
server" src="http://www.mikelanzetta.com/images/New_Docker.png"&gt;&lt;/p&gt;
&lt;p&gt;Once you select "Docker on Ubuntu Server" you'll be guided through the
creation process:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker VM Creation
Process" src="http://www.mikelanzetta.com/images/Docker_VM_Create.png"&gt;&lt;/p&gt;
&lt;p&gt;Upon completion, your VM will start up, and you can then SSH into it and
execute whatever Docker commands you wish.&lt;/p&gt;
&lt;h2&gt;Installing TensorFlow&lt;/h2&gt;
&lt;p&gt;Once you have Docker installed on a VM, it's simple to install
TensorFlow into a container on that VM. You could use the image that
&lt;a href="https://www.tensorflow.org/versions/master/get_started/os_setup.html#docker_install"&gt;Google has
provided&lt;/a&gt;
with their release, but I prefer to have it running inside of a&lt;a href="http://jupyter.org/"&gt;Jupyter
notebook&lt;/a&gt; to allow me to play around with it.&lt;/p&gt;
&lt;p&gt;Fortunately, I'm not alone, and someone has already created a Docker
image on DockerHub containing a &lt;a href="https://hub.docker.com/r/xblaster/tensorflow-jupyter/"&gt;Jupyter installation with
TensorFlow&lt;/a&gt; -
thanks xblaster! Since Jupyter notebooks run a local server, we need to
allow port-forwarding for the port we intend to run on. Let's assume we
use the default that xblaster mentions in his readme - 8888. We need to
not only port-forward from the container to the Docker-engine-running
VM, but we need to port-forward from the VM externally. To do so, we
simple expose that port via the Azure portal by adding a new endpoint
mapping 8888 to whichever external port you choose:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Exposing the Jupyter notebook
endpoint" src="http://www.mikelanzetta.com/images/Expose_VM_Endpoint.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that you've exposed the endpoint from Azure, you can fire up the
Docker container by using the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 -v /notebook:/notebook xblaster/tensorflow-jupyter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take some time, but once it's complete you should have a fully
functional Docker container running TensorFlow inside a Jupyter
notebook, which will persist the notebook for you.&lt;/p&gt;
&lt;h2&gt;Testing the Installation&lt;/h2&gt;
&lt;p&gt;Now that you have a running Jupyter notebook instance, you can hit your
endpoint from your own home machine at
http://\&amp;lt;your-vm&gt;.cloudapp.net:8888/ and see it in action. Create a new
Python2 notebook, and then paste the code below and run it to verify
that TensorFlow is installed and working (from &lt;a href="https://www.tensorflow.org/versions/master/get_started/index.html"&gt;their
documentation&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# Create 100 phony x, y data points in NumPy, y = x * 0.1 + 0.3&lt;/span&gt;
&lt;span class="n"&gt;x_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;float32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x_data&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;

&lt;span class="c1"&gt;# Try to find values for W and b that compute y_data = W * x_data + b&lt;/span&gt;
&lt;span class="c1"&gt;# (We know that W should be 0.1 and b 0.3, but Tensorflow will&lt;/span&gt;
&lt;span class="c1"&gt;# figure that out for us.)&lt;/span&gt;
&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_uniform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;# Minimize the mean squared errors.&lt;/span&gt;
&lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Before starting, initialize the variables.  We will &amp;#39;run&amp;#39; this first.&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_all_variables&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Launch the graph.&lt;/span&gt;
&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Fit the line.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Learns best fit is W: [0.1], b: [0.3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you know it works, but notice that you didn't need to hit an https
endpoint or type in any credentials - this is "security through
obscurity", otherwise known as &lt;em&gt;not secure at all!&lt;/em&gt; Do me a favor and
don't use this for anything you don't mind losing, and shut it down when
you're done. If you want to secure your notebook, that's beyond the
scope of this post, but the &lt;a href="http://jupyter-notebook.readthedocs.org/en/latest/public_server.html"&gt;documentation is easy to
follow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;</content><category term="Azure"></category><category term="Containerization"></category><category term="Docker"></category><category term="Machine Learning"></category><category term="ML"></category><category term="Neural Networks"></category><category term="TensorFlow"></category></entry><entry><title>Leader Election in Node.js Using Azure Blob Storage</title><link href="http://www.mikelanzetta.com/leader-election-in-node-js-using-azure-blob-storage.html" rel="alternate"></link><published>2015-11-18T15:58:00-08:00</published><updated>2015-11-18T15:58:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-11-18:/leader-election-in-node-js-using-azure-blob-storage.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Leader_election"&gt;Leader Election&lt;/a&gt; is a
mechanism for designating one instance of a group as the primary (or
leader) and the others as secondaries (or followers), and is typically
used for coordination amongst groups of machines in a distributed
system. I first learned of leader election back in the olden times of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Leader_election"&gt;Leader Election&lt;/a&gt; is a
mechanism for designating one instance of a group as the primary (or
leader) and the others as secondaries (or followers), and is typically
used for coordination amongst groups of machines in a distributed
system. I first learned of leader election back in the olden times of
managing DBs, with hard-coded primary/secondary failover. Later with
coursework and practice in distributed systems, I learned various
algorithms for leader election - from
&lt;a href="https://en.wikipedia.org/wiki/Paxos_(computer_science)"&gt;Paxos&lt;/a&gt;'
"¯\_(ツ)_/¯" (whoever gets their proposal accepted is the leader for
that round) to
&lt;a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf"&gt;Raft's&lt;/a&gt;stronger
notions. They all have one thing in common - if you don't &lt;em&gt;have&lt;/em&gt; to
implement them yourself, don't do it! Distributed algorithms are
error-prone and hard.&lt;/p&gt;
&lt;p&gt;Implementing distributed algorithms can be made somewhat easier by using
immutable-rich functional languages like Clojure or F#, or languages
built for systems programming like &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;,
but what if you're stuck in something like Node.js, with all of the
type-safety of JavaScript and all of the garbage collection of C? Sure
it'd be a fun exercise, but not when you're up against a deadline.&lt;/p&gt;
&lt;h2&gt;The Goal of Leader Election&lt;/h2&gt;
&lt;p&gt;The goal of having a leader election is to ensure that for any given
resource only one instance is allowed to "control" it. With Paxos for
instance, any given round's result is "controlled" by the leader.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Paxos algorithm
flow" src="http://www.mikelanzetta.com/images/paxos1_sm.png"&gt;&lt;/p&gt;
&lt;p&gt;With database failover the leader controls all writes and forwards them to
all followers. In the event of a leader failure that control should
lapse to another instance after a certain amount of time has elapsed.
Effectively, a leader is "leasing" control for a certain timeout period
and as long as they renew that lease they can remain in control.&lt;/p&gt;
&lt;h2&gt;Azure Blob Concurrency Control&lt;/h2&gt;
&lt;p&gt;Naturally this led me to think of Azure Blob Storage. Blobs have two
modes of concurrency control for writes - optimistic concurrency via
&lt;a href="https://en.wikipedia.org/wiki/HTTP_ETag"&gt;etags&lt;/a&gt;and
&lt;a href="https://msdn.microsoft.com/en-us/library/azure/ee691972.aspx"&gt;lease-based&lt;/a&gt;
concurrency. The &lt;a href="https://github.com/Azure/azure-storage-node"&gt;Node SDK for Azure
Storage&lt;/a&gt; exposes blob lease
primitives via a few simple API calls - &lt;a href="https://github.com/Azure/azure-storage-node/blob/master/lib/services/blob/blobservice.js#L1066"&gt;grabbing a
lease&lt;/a&gt;,
&lt;a href="https://github.com/Azure/azure-storage-node/blob/master/lib/services/blob/blobservice.js#L1107"&gt;renewing
it&lt;/a&gt;,
and &lt;a href="https://github.com/Azure/azure-storage-node/blob/master/lib/services/blob/blobservice.js#L1185"&gt;releasing
it&lt;/a&gt;
(plus a few others less relevant to this discussion). Once you have a
lease you can then mutate the blob to your heart's content by including
the lease ID in the options - at least until that lease lapses. Leases
by default are infinite (which makes &lt;em&gt;no&lt;/em&gt; sense), but you can specify a
&lt;code&gt;leaseDuration&lt;/code&gt; option of between 15 to 60 seconds to scope the
lease-hold time.&lt;/p&gt;
&lt;p&gt;One of the things I didn't like about the Azure Node.js SDK, however,
was how hard it was to use for actually managing leases. You had to trap
return codes and look for already-held errors vs. other errors, it was
all callback-based, and there was a separation between the blob service
and the lease you were holding (i.e. you had to track the service
object &lt;em&gt;as well as&lt;/em&gt; the lease ID in order to do anything useful). For
re-upping the lease you needed to register timeouts or intervals to
renew, and if those lapsed without successful renewal you somehow needed
to know that your lease ID was no longer valid (or trap that error the
next time you used it). It seemed like a collection of operations that
could be pulled up into their own class.&lt;/p&gt;
&lt;h2&gt;Cerulean Is Born&lt;/h2&gt;
&lt;p&gt;I created &lt;a href="https://github.com/noodlefrenzy/node-cerulean"&gt;node-cerulean&lt;/a&gt;
as a module (named because cerulean is quite close to azure) to factor
out helper methods, classes, and utilities that would make using Azure
easier from within Node.js. Making Blob Leases easier to use would be
the first goal of this new module but more are guaranteed to follow -
and if you have any ideas do not hesitate to open
&lt;a href="https://github.com/noodlefrenzy/node-cerulean/issues"&gt;issues&lt;/a&gt;or PRs.&lt;/p&gt;
&lt;h4&gt;Easier Leases&lt;/h4&gt;
&lt;p&gt;First off I needed to create a new &lt;code&gt;Lease&lt;/code&gt; class for managing blob
leases that would have the following functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acquire a lease and make it easy to know when that succeeds or fails&lt;/li&gt;
&lt;li&gt;Easily renew the lease&lt;/li&gt;
&lt;li&gt;Release the lease when desired&lt;/li&gt;
&lt;li&gt;Get the contents of the blob involved&lt;/li&gt;
&lt;li&gt;Store new contents using the lease ID to manage access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose to use &lt;a href="https://github.com/petkaantonov/bluebird"&gt;Bluebird&lt;/a&gt;to
promisify all of the operations to make it quite easy to trap
success/failure conditions for each without resorting to callback soup.&lt;/p&gt;
&lt;p&gt;Looking at &lt;code&gt;Lease.acquire&lt;/code&gt; you can see how I've just wrapped the
existing API so that I trap return values, store off the lease ID, and
invoke resolve/reject appropriately on the returned promise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureContainerExists&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureBlobExists&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blobService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acquireLease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leaseId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                   &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;});&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also note that before I attempt to acquire the lease I ensure that the
blob exists. Right now I do this each time, but I could easily tune this
to early-out that method if I've already checked or bypass it entirely
(e.g. based on a constructor flag that tells me it exists). It's also
possible to invert this and trap "does not exist" errors and only ensure
the blob exists if that happens.&lt;/p&gt;
&lt;p&gt;The renew and release methods are implemented similarly, while the blob
get/update methods use the stored lease ID during access:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateContents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leaseId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NotHeldError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;leaseId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leaseId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
           &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blobService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createBlockBlobFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;});&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Managing Lease Acquisition and Loss&lt;/h4&gt;
&lt;p&gt;This makes leases much easier to manage, but it's still non-trivial to
implement leader election on this primitive and I wanted to make it as
easy as possible. To that end I've implemented a &lt;code&gt;LeaseManager&lt;/code&gt; class
that given a lease will attempt to acquire it and renew it
automatically, and will warn you when it loses it.&lt;/p&gt;
&lt;p&gt;This uses an eventing model rather than promises since it's a living
manager, where a lease can be acquired and lost multiple times and the
manager can manage multiple leases. It uses a stored interval per lease
to control whether it's in the "attempt to acquire" or the "attempt to
renew" phase, and it both aggressively renews and aggressively fails. It
renews every 15 seconds on a 60-second lease and reports lease loss when
the lease expiry period would fall outside the next renewal (rather than
waiting for a renewal to fail due to lease-loss error).&lt;/p&gt;
&lt;p&gt;Let's take a look at the &lt;code&gt;manageLease&lt;/code&gt; method which starts the process
and the &lt;code&gt;_acquire&lt;/code&gt; method to which it delegates the majority of its
work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manageLease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lease&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_acquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;acquireLease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;leaseDuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLeaseDuration&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_unmanage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullUri&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLeaseDuration&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_maintain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Acquired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Failed to acquire lease for &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullUri&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;. Will retry.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullUri&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acquireLease&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultLeaseDuration&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;acquireLease&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Best-case scenario, it acquires immediately and clears the interval.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how I trap the lease in the &lt;code&gt;acquireLease&lt;/code&gt; closure and call
&lt;code&gt;acquireLease&lt;/code&gt; at the end - this is just because &lt;code&gt;setInterval&lt;/code&gt; doesn't
have any sort of "invoke immediately" flag (or initial/repeat interval
params). The idea is that we immediately try and acquire the lease - if
that succeeds we move on to maintenance but otherwise we keep trying to
acquire. When we &lt;code&gt;unmanageLease&lt;/code&gt; we can just clear the interval and
release the lease if we have it held.&lt;/p&gt;
&lt;p&gt;Once we acquire the lease we emit a &lt;code&gt;LeaseManager.Acquired&lt;/code&gt; event with
the lease we've grabbed and we keep track of the expiry timestamp. Every
time we renew the lease we update this expiry timestamp. If we fail to
renew we don't worry about it until the next renewal request would fall
outside the expiry period - at that point we immediately emit a
&lt;code&gt;LeaseManager.Lost&lt;/code&gt; event and go back into acquire mode.&lt;/p&gt;
&lt;p&gt;By "losing" the lease early we make a conscious choice that a longer
leaderless period is a better option than a possible
multi-head/multi-leader situation. However we're relying on two
assumptions of the Node.js framework that could be violated and my code
doesn't yet trap/error on these, so &lt;em&gt;caveat emptor&lt;/em&gt; for now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Intervals execute roughly when we expect them to (e.g. no delays
    longer than hundreds of milliseconds)&lt;/li&gt;
&lt;li&gt;Callbacks are invoked roughly when the call succeeds, and latency
    between grabbing the lease and reporting success is relatively small&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If either of these assumptions is violated our expiry time could be off
or our renewal could be delayed. Given the long lease time (60 seconds,
15-second renewal) this should not be an issue in practice but it is
something to be aware of, especially in a quasi-single-threaded
environment like Node.js.&lt;/p&gt;
&lt;h2&gt;Using the Lease Manager for Leader Election&lt;/h2&gt;
&lt;p&gt;Now that we have a &lt;code&gt;LeaseManager&lt;/code&gt; we can use it to do leader election
automagically quite easily. All we need to do is have multiple clients
attempt to manage the same &lt;code&gt;Lease&lt;/code&gt; - whoever acquires it is the leader
(and is notified via the &lt;code&gt;LeaseManager.Acquired&lt;/code&gt; event), and remains the
leader until they either &lt;code&gt;unmanageLease&lt;/code&gt; or they receive the
&lt;code&gt;LeaseManager.Lost&lt;/code&gt; event. Once they lose the lease all clients will
still be attempting to acquire the lease still, so one of them should
take over as leader as soon as the lease lapses.&lt;/p&gt;
&lt;p&gt;You can see this in action in a simple integration test in the
&lt;code&gt;node-cerulean&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should allow lease takeover&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;blobName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accountName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accountKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;containerName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blobName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;leaseDuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;managedByM1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Acquired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;managedByM1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="nx"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unmanageLease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;leaseDuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Acquired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unmanageLease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LeaseManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Released&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;managedByM1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manageLease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manageLease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This test creates two clients (&lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt;) and attempts to manage the
same lease with both (with a 2 second delay on &lt;code&gt;m2&lt;/code&gt;'s attempt, so it
"loses the race"). Once &lt;code&gt;m1&lt;/code&gt; acquires the lease it is now the leader
(and records that fact). It then un-manages it (releasing it and
stopping itself from trying to re-acquire). As soon as &lt;code&gt;m2&lt;/code&gt; re-tries to
acquire it will succeed, and at that point it has become the leader and
the test can succeed.&lt;/p&gt;
&lt;p&gt;A more concrete and specific &lt;a href="https://github.com/noodlefrenzy/node-cerulean/blob/master/examples/leader_followers.js"&gt;example for leader
election&lt;/a&gt;
can be seen in the &lt;a href="https://github.com/noodlefrenzy/node-cerulean/tree/master/examples"&gt;examples
directory&lt;/a&gt;.
You can take this example and run with it, creating your own
leader-based concurrent algorithms with confidence. I'll be using it as
the basis for V2 of my &lt;code&gt;node-sbus-amqp10&lt;/code&gt; module allowing me to write
code that can seamlessly interoperate with the
&lt;a href="https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost"&gt;&lt;code&gt;EventProcessorHost&lt;/code&gt;&lt;/a&gt;used
to manage Event Hub subscriptions in .NET (which I'll document in a
future post).&lt;/p&gt;
&lt;p&gt;Once again, all of the code above lives on GitHub in my &lt;a href="https://github.com/noodlefrenzy/node-cerulean"&gt;node-cerulean
module&lt;/a&gt; with the
permissive MIT license, and is published as npm module &lt;code&gt;cerulean&lt;/code&gt;.&lt;/p&gt;</content><category term="Azure"></category><category term="Azure Blob"></category><category term="Distributed Systems"></category><category term="Node"></category></entry><entry><title>Managing a Corpus of Images in Azure Blob Storage</title><link href="http://www.mikelanzetta.com/managing-a-corpus-of-images-in-azure-blob-storage.html" rel="alternate"></link><published>2015-11-12T09:10:00-08:00</published><updated>2015-11-12T09:10:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-11-12:/managing-a-corpus-of-images-in-azure-blob-storage.html</id><summary type="html">&lt;p&gt;As mentioned in &lt;a href="http://www.mikelanzetta.com/2015/09/image-stream-processing-to-blob-storage/"&gt;my previous
post&lt;/a&gt; I
was recently working on a project training &lt;a href="http://www.readcube.com/articles/10.1038%2Fnature14539?shared_access_token=DaxW8O-3gQoqte9kXFFUANRgN0jAjWel9jnR3ZoTv0PU8PImtLRceRBJ32CtadUBIC1dchyTLE3_1-FCJeTkHXnB0vI4SmupYf4v2t_dG6HjI9FdSJMFDQ6iWCA7T6tcte2-dAp-SzhLtuCkfPvhI6x--H5W98_7bqOVwSnqt1Vqo6bzZ5ZM7lCIPdavoThMMSXBgYmSjKSk0CrGtb5KUw%3D%3D"&gt;Deep
ConvNets&lt;/a&gt;
for image recognition. As with any Machine Learning project one of the
primary things you need to make it successful is large amounts of data -
quality labeled data. With image-based convnets, though, the data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As mentioned in &lt;a href="http://www.mikelanzetta.com/2015/09/image-stream-processing-to-blob-storage/"&gt;my previous
post&lt;/a&gt; I
was recently working on a project training &lt;a href="http://www.readcube.com/articles/10.1038%2Fnature14539?shared_access_token=DaxW8O-3gQoqte9kXFFUANRgN0jAjWel9jnR3ZoTv0PU8PImtLRceRBJ32CtadUBIC1dchyTLE3_1-FCJeTkHXnB0vI4SmupYf4v2t_dG6HjI9FdSJMFDQ6iWCA7T6tcte2-dAp-SzhLtuCkfPvhI6x--H5W98_7bqOVwSnqt1Vqo6bzZ5ZM7lCIPdavoThMMSXBgYmSjKSk0CrGtb5KUw%3D%3D"&gt;Deep
ConvNets&lt;/a&gt;
for image recognition. As with any Machine Learning project one of the
primary things you need to make it successful is large amounts of data -
quality labeled data. With image-based convnets, though, the data are
images and metadata about those images, and in this post I'll go through
some of the design challenges I faced managing a large corpus of images
and how I solved them. As always the &lt;a href="https://github.com/noodlefrenzy/blob-collection-manager"&gt;code is up on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What Storage Do We Need?&lt;/h2&gt;
&lt;p&gt;When training a domain-specific classifier (as I was) we need on the
order of hundreds of thousands to millions of images. In order to track
where they came from, whether we've transformed them in some way
(cropping, filtering, etc.), what models they've trained, and other
details we need some sort of metadata store.&lt;/p&gt;
&lt;p&gt;For storing the images themselves Azure Blob Storage seemed like a
no-brainer. After all it's built for storing binary data like that,
gives us built-in fault tolerance and geo-replication, can easily be
fronted with a CDN - and when I screw things up I can easily delete the
container and start again.&lt;/p&gt;
&lt;p&gt;Each "domain" would have its own container. The number of images and the
rate of change were sufficiently small that we didn't run into any
container-level throttling. In choosing the paths within the container,
I felt it was important to track three things: the suffix of the
original path, the "version" of the image, and whether this was the
original image or a transformed version. These choices have no impact on
the Blob Storage itself, but have a significant impact on how you think
about the images, so choose wisely. I wanted to keep all original images
"cloistered" so put &lt;code&gt;/original/&lt;/code&gt; at the root of the path - you might
make a different call.&lt;/p&gt;
&lt;p&gt;Choosing the metadata store is a bit more difficult as I have several
constraints to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fault-tolerance: We can't tolerate data loss, we can tolerate small
    outages but not significant downtime (so, roughly, CP on the &lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP
    triangle&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Scale: We need to be able to scale to millions/tens-of-millions of
    records without significant performance degradation.&lt;/li&gt;
&lt;li&gt;Queryability (yes, I know that's not a word): We're going to want to
    ask questions like "which images trained this model?" and "how many
    images with this label have been cropped"?&lt;/li&gt;
&lt;li&gt;Flexibility: This is somewhat less important, but since when I
    started I wasn't quite sure what the metadata would look like it was
    important to be able to easily evolve and migrate the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Queryability rules out Azure Table Storage and other KV stores but that
still leaves a host of possible solutions. In the end I chose &lt;a href="https://azure.microsoft.com/en-us/services/sql-database/"&gt;SQL
Azure&lt;/a&gt; with
&lt;a href="http://weblogs.asp.net/scottgu/code-first-development-with-entity-framework-4"&gt;code-first Entity
Framework&lt;/a&gt;.
This gave me the ability to quickly get up and running in both local
testing and production, the flexibility to change my model and have the
data come with me (via migrations), easy fault-tolerance, and a
reasonable approximation of scale. Scale was my biggest worry, but we
performed well even without query tuning or index-building - although if
I was taking this beyond the proof-of-concept level I'd have more
concrete numbers here and probably a few custom-built indexes to speed
things along.&lt;/p&gt;
&lt;h2&gt;Constructing the Metadata Model&lt;/h2&gt;
&lt;p&gt;Coming up with what we wanted to track in the metadata was an iterative
process which made the &lt;a href="https://msdn.microsoft.com/en-us/data/jj591621.aspx"&gt;EF's
migration&lt;/a&gt; ability
quite useful. The way I typically design (and then evolve) a data model
is to start with the goals. What does it need to know? What questions
does it need to answer? In our case, we needed to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store the locations of the images in blob storage&lt;/li&gt;
&lt;li&gt;Version those images (so, e.g., we could get a new revision of the
    same library and still retain the existing revision if we'd already
    trained models on it)&lt;/li&gt;
&lt;li&gt;Store information about a given image transform (pipeline) - the
    name, version, and in our case the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Equally important though was what we &lt;em&gt;did not need&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We didn't care about individual images, only "sets" of them. This
    saved us tons of real-estate as tens of thousands of individual
    "&lt;code&gt;Image&lt;/code&gt;" records could be condensed to a single "&lt;code&gt;ImageSet&lt;/code&gt;".&lt;/li&gt;
&lt;li&gt;We didn't care about parentage/inheritance. We originally had a
    model where an &lt;code&gt;Image&lt;/code&gt; could be transformed via an
    &lt;code&gt;ImageTransform&lt;/code&gt; and the resulting &lt;code&gt;Image&lt;/code&gt; would store a link back
    to its parent. When switching to &lt;code&gt;ImageSets&lt;/code&gt; we determined that we
    never actually used that information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've elided several elements of our actual data-model related to
tracking how images get combined into training sets then coupled with
neural nets to form trained neural nets. They are immaterial to the task
of managing corpora of images but might show up in a subsequent post.&lt;/p&gt;
&lt;p&gt;The resulting model is actually simple enough to store in &lt;strong&gt;Azure Table
Storage&lt;/strong&gt; since we don't really need the queryability, so the code up on
GitHub uses &lt;code&gt;TableEntities&lt;/code&gt; to track the data rather than code-first. I
felt this would make it easier for people to adopt since they now just
need a single Azure Storage stamp instead of having to stand up a SQL
Azure instance. If and when I do a subsequent post with NN-specific
details the EF code will come with it.&lt;/p&gt;
&lt;p&gt;The resulting data model is simply (note the string math for creating
the blob path as described above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageSet&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TableEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Set of (possibly transformed) images.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Blob path is original/_dir_/_image version_, or if transformed it&amp;#39;s transform/_transform name_/_transform version_/_dir_/_image version_&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pathSuffix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageTransform&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathSuffix&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pathSuffix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;original/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;transform/{0}/{1}/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlobPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pathSuffix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathSuffix&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;root&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pathSuffix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CleanPartitionKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RowKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CleanRowKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TransformPartitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TransformRowKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RowKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;BlobPath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// If the images have been transformed, store the PK/RK of the transform pipeline.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;TransformPartitionKey&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;TransformRowKey&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageTransform&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TableEntity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ImageTransform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ImageTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CleanPartitionKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RowKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CleanRowKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CommandLineArguments&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uploading Local Image Libraries&lt;/h2&gt;
&lt;p&gt;One of the hurdles we faced was in uploading large sets of images to
blob storage. We would get "drops" of tens of thousands of images and
would need to upload them to blob storage, where we could then fire up
servers to transform, slice and dice them to the millions we needed.
This upload process, however infrequent, was a bottleneck, so we spent a
bit of time trying to improve it.&lt;/p&gt;
&lt;p&gt;My goal was to make sure that we could upload multiple images
concurrently, but that we were able to throttle this upload process to
prevent over-saturating network bandwidth or triggering any quota issues
on the Azure (unlikely) or Comcast (much more likely) side.&lt;/p&gt;
&lt;p&gt;Often, the libraries we were given were a collection of directories like
"&lt;code&gt;red/angry/robin&lt;/code&gt;" where each component of the directory could be
considered a "tag". For ML purposes, we would later combine those tags
into individual labels for training. First, I needed to find all of the
images in each subdirectory of the root to the library I'd been given.
Assuming &lt;code&gt;this.Extensions&lt;/code&gt; contains a list of image extensions I'm
looking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Give me all of the images...&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumerateFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootDirectory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SearchOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AllDirectories&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Grouped by directory&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;byDirectory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;
                  &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DirectoryName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will give us all images by directory as lazily instantiated lists.
Turning the &lt;code&gt;EnumerateFiles&lt;/code&gt; results into &lt;code&gt;FileInfo&lt;/code&gt; classes not only
allows us to easily filter on extension and group by directory, but
makes building blob paths easier later on.&lt;/p&gt;
&lt;p&gt;We can then walk the directories, turning their paths into lists of
tags, uploading the images inside and storing the &lt;code&gt;ImageSet&lt;/code&gt; metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uploadTasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FileInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;imgSets&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;byDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rootDirectory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootDirectory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;imgSet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImageSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imagesVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TagExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;uploadTasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uploadTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlobUploader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imgSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlobPath&lt;/span&gt;&lt;span class="p"&gt;))));&lt;/span&gt;
    &lt;span class="n"&gt;imgSets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgSet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the mix of LINQ and regular imperative loops (e.g. foreach) here.
My goal is clarity, not "Haskell-ness", and a foreach loop made the
"what are we doing for each directory" code much cleaner. I store each
upload task with the associated file as a Tuple, allowing me to easily
track failures back to the file that failed.&lt;/p&gt;
&lt;p&gt;The most important piece of the code above, however, is that the
uploadTasks is an enumerable based on &lt;code&gt;Concat'd&lt;/code&gt; &lt;code&gt;Selects&lt;/code&gt; so is lazily
evaluated. This allows the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;failedUpserts&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Utilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThrottleWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxParallelUpserts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imgSets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgSet&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageSetUpserter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgSet&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;failedUploads&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Utilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThrottleWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MaxParallelUploads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uploadTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to effectively throttle the number of concurrent operations.
&lt;code&gt;ThrottleWork&lt;/code&gt; takes a number of tasks to run concurrently and an
enumerable of those tasks and ensures that the next task is not
"comprehended" until a previous one has finished. Failing tasks are
tracked and returned once all tasks complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ThrottleWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxWork&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;maxWork&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;maxWork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WhenAny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;TaskStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RanToCompletion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WhenAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsFaulted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual &lt;a href="https://github.com/noodlefrenzy/blob-collection-manager/blob/master/ImageBlobData/Utilities.cs#L63"&gt;uploading of
blobs&lt;/a&gt;
and
&lt;a href="https://github.com/noodlefrenzy/blob-collection-manager/blob/master/BlobCollectionManager/Program.cs#L51"&gt;upserting&lt;/a&gt;of
&lt;code&gt;ImageSets&lt;/code&gt; are fairly simple and are in the code on GitHub.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this outlined some of the challenges with working with large
binary datasets. I've tried to cover how I made decisions on where to
store information and how to build data models for it. I've also tried
to outline how one would throttle existing workloads to avoid
over-saturating restricted resources using simple C# LINQ-based
solutions. I didn't cover the &lt;a href="https://github.com/noodlefrenzy/blob-collection-manager/blob/master/BlobCollectionManager/ImageDirectoryCrawler.cs#L95"&gt;transformation
pipeline&lt;/a&gt;
as that was simply using ImageMagick and forking processes - there are
much better ways of doing that work and nothing there was innovative
enough for calling out, but once again the code is on GitHub.&lt;/p&gt;
&lt;p&gt;I'd love any comments, suggestions, or improvements - either on this
post or via
&lt;a href="https://github.com/noodlefrenzy/blob-collection-manager"&gt;GitHub&lt;/a&gt;.
Committers are always welcome as are questions and issues. I'll try and
follow this up with additional work in this area so you can see the
Entity Framework version but let me know if there are other aspects
you'd like to see.&lt;/p&gt;</content><category term="Azure"></category><category term="Azure Blob"></category></entry><entry><title>Image Stream Processing to Blob Storage</title><link href="http://www.mikelanzetta.com/image-stream-processing-to-blob-storage.html" rel="alternate"></link><published>2015-09-11T16:08:00-07:00</published><updated>2015-09-11T16:08:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-09-11:/image-stream-processing-to-blob-storage.html</id><summary type="html">&lt;p&gt;I was recently working on a project to train &lt;a href="http://www.readcube.com/articles/10.1038%2Fnature14539?shared_access_token=DaxW8O-3gQoqte9kXFFUANRgN0jAjWel9jnR3ZoTv0PU8PImtLRceRBJ32CtadUBIC1dchyTLE3_1-FCJeTkHXnB0vI4SmupYf4v2t_dG6HjI9FdSJMFDQ6iWCA7T6tcte2-dAp-SzhLtuCkfPvhI6x--H5W98_7bqOVwSnqt1Vqo6bzZ5ZM7lCIPdavoThMMSXBgYmSjKSk0CrGtb5KUw%3D%3D"&gt;Deep
ConvNets&lt;/a&gt;
for image recognition tasks, and ran into several interesting problems
along the way. This post is the first in a series outlining some of
those problems and how I went about solving them, and it focuses on the
problem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently working on a project to train &lt;a href="http://www.readcube.com/articles/10.1038%2Fnature14539?shared_access_token=DaxW8O-3gQoqte9kXFFUANRgN0jAjWel9jnR3ZoTv0PU8PImtLRceRBJ32CtadUBIC1dchyTLE3_1-FCJeTkHXnB0vI4SmupYf4v2t_dG6HjI9FdSJMFDQ6iWCA7T6tcte2-dAp-SzhLtuCkfPvhI6x--H5W98_7bqOVwSnqt1Vqo6bzZ5ZM7lCIPdavoThMMSXBgYmSjKSk0CrGtb5KUw%3D%3D"&gt;Deep
ConvNets&lt;/a&gt;
for image recognition tasks, and ran into several interesting problems
along the way. This post is the first in a series outlining some of
those problems and how I went about solving them, and it focuses on the
problem of image uploads to Azure Blob storage. As always, the
MIT-licensed code is &lt;a href="https://github.com/noodlefrenzy/asp-blob-uploader"&gt;on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The crux of the issue: we had a deployed neural net out there just
waiting for images to come in and be scored, and I'd deployed an ASP.Net
service for handling image uploads. Two problems: I needed to transform
those images prior to scoring, and I wanted to make sure I didn't write
them to the local file system if possible (as a crash would leave
hanging files and fill up the disk).&lt;/p&gt;
&lt;h2&gt;Uploading Files&lt;/h2&gt;
&lt;p&gt;On the web, the typical way you upload files hasn't changed all that
much in over a decade - most people use a multi-part form submission
with MIME-encoded content. Using this format for a simple captioned
picture, the resulting payload looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;---------------------------8675309&lt;/span&gt;

&lt;span class="nt"&gt;-----------------------------8675309&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;Look&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;epic&lt;/span&gt; &lt;span class="nt"&gt;sandwich&lt;/span&gt;
&lt;span class="nt"&gt;-----------------------------8675309&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;EpicSandwich.jpg&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;jpeg&lt;/span&gt;

&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;bits&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;-----------------------------8675309--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the form data is all in one section, and the files are each in
their own MIME-encoded section with included filenames.&lt;/p&gt;
&lt;h2&gt;Processing Files In ASP.Net&lt;/h2&gt;
&lt;p&gt;Mike Wasson has &lt;a href="http://www.asp.net/web-api/overview/advanced/sending-html-form-data,-part-2"&gt;a great blog
post&lt;/a&gt;with
explicit instructions on how to process multi-part form data from within
ASP.Net. To summarize, you need to instantiate
a &lt;code&gt;MultipartFormDataStreamProvider&lt;/code&gt; pointed to where you want to store
the files on disk, and then use &lt;code&gt;ReadAsMultipartAsync&lt;/code&gt; to put them
there. It does the decoding and stores things correctly, but the problem
is that if you crash at any point during this process, you've just left
files littering the disk.&lt;/p&gt;
&lt;p&gt;There are a few different ways around this (detecting the files on
startup, clearing temp on restart, etc.), but since I wanted to
pre-process the image before storing it anyway, I decided to seek
another solution. Ultimately, I wanted to take the incoming data stream,
process it, and then store it directly into Azure Blob storage. For
that, I would need a custom form data processor.&lt;/p&gt;
&lt;h2&gt;Building a Blob Stream Provider&lt;/h2&gt;
&lt;p&gt;There seem to be two main steps in switching away from local file
storage to Azure Blob store - first create a Stream capable of storing
to an Azure Blob, and then create a provider to return those streams.
Then, when &lt;code&gt;ReadAsMultipartAsync&lt;/code&gt; gets called, it'll store those files
into blobs for you. In reality, it's slightly more complicated since it
doesn't seem to guarantee a call to Close on the stream, so it's tough
to know when to write it to blob storage, so I would up implementing my
custom Stream as a wrapper around a MemoryStream and then giving my
custom Provider a SaveAll method to push everything to the cloud.&lt;/p&gt;
&lt;h4&gt;Customizing a Stream&lt;/h4&gt;
&lt;p&gt;My custom Stream is a simple wrapper around a &lt;code&gt;MemoryStream&lt;/code&gt; with some
sugar to massage the filename into blob-friendly format, and a helper
method to do the actual upload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultipartBlobStream&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MultipartBlobStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CloudBlobContainer&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLowerInvariant&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;TrimStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blobContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;CloudBlobContainer&lt;/span&gt; &lt;span class="n"&gt;blobContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MemoryStream&lt;/span&gt; &lt;span class="n"&gt;underlyingStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;CanRead&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlyingStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CanRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ... other Stream overrides delegating to underlyingStream&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;BlobPath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EscapeUriString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}.{1}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;UploadStreamToBlobAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blobPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlobPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlyingStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blobContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBlockBlobReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blobPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UploadFromStreamAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;underlyingStream&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;My Custom Provider&lt;/h4&gt;
&lt;p&gt;Using this custom Stream from within my own provider is simple.
When &lt;code&gt;ReadAsMultipartAsync&lt;/code&gt; is called, it basically walks the form
elements and for each file calls &lt;code&gt;GetStream&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="nf"&gt;GetStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpContent&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpContentHeaders&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ContentDispositionHeaderValue&lt;/span&gt; &lt;span class="n"&gt;contentDisposition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentDisposition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentDisposition&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Found a file! Track it, and ultimately upload to blob store.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentDisposition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileInfo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentDisposition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blobStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MultipartBlobStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageBlobContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FormFiles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blobStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;blobStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;InvalidOperationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No &amp;#39;Content-Disposition&amp;#39; header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once processing is complete, &lt;code&gt;ExecutePostProcessingAsync&lt;/code&gt; is called, and
I do my form field processing there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;ExecutePostProcessingAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;formContent&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ContentDispositionHeaderValue&lt;/span&gt; &lt;span class="n"&gt;contentDisposition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentDisposition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Not a file, treat as a form field.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentDisposition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fieldName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentDisposition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fieldValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;formContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAsStringAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FormFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I've added a method &lt;code&gt;SaveAllAsync&lt;/code&gt; to do the actual blob
uploads - this allows me to do any post-processing I want to do without
blocking the response to the client, and decouples the form processing
from the blob upload steps. It also allows me to store metadata about
the upload into Azure Table Storage. For the purposes of this blog
however, I've called that from within the controller.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UploadedImage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SaveAllAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;imageDescription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UploadedImage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FormFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;blobUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UploadStreamToBlobAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UploadedImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;PartitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;RowKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Extension&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;BlobPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blobUri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;UploadedOn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UtcNow&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TableOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InsertOrReplace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageDataTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WhenAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;Once you've created these pieces, you need to use them from your code. I
wrote a simple HTML Form for uploading, and a simple ASP.Net controller
to do so. The form code is trivial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Upload File&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

@using (Html.BeginForm(&amp;quot;upload&amp;quot;, &amp;quot;api&amp;quot;, FormMethod.Post, new { enctype = &amp;quot;multipart/form-data&amp;quot; }))
{
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Image Description:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ImageDescription&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Testing&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Image: &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FileUpload1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Upload&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The controller is not much more complicated, and is a simple WebAPI
Controller at api/upload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UploadController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ApiController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [Route(&amp;quot;api/upload&amp;quot;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;UploadedImage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsMimeMultipartContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpResponseException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnsupportedMediaType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;multipartStreamProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AzureBlobMultipartProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;AzureUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetImageBlobContainerAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ImageDataConnectionString&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;AzureUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetImageDataTableAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ImageDataConnectionString&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAsMultipartAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AzureBlobMultipartProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;multipartStreamProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;imageDescription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FormFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ImageDescription&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAllAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageDescription&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I now have a form and controller capable of uploading images directly
into Azure Blob storage. There's nothing stopping me from adapting my
&lt;code&gt;MultipartBlobStream&lt;/code&gt; to do processing of the image data before storing
it. In fact, in my application, I built several additional processors
into this step - one for downscaling the image to more useful
resolutions, another for storing subsamples of the image into multiple
blobs. Anything is possible here, as long as you're willing to take a
dependency on GDI+ or other low-level image stream processing libraries.&lt;/p&gt;
&lt;p&gt;As always, I've made my code available &lt;a href="https://github.com/noodlefrenzy/asp-blob-uploader"&gt;on GitHub as
asp-blob-uploader&lt;/a&gt;
under the MIT permissive license - feel free to fork, submit PRs, and
open issues as you see fit.&lt;/p&gt;</content><category term=".NET"></category><category term="ASP.Net"></category><category term="Azure"></category><category term="Azure Blob"></category><category term="C#"></category><category term="SQL Azure"></category></entry><entry><title>Real-time Mapping with SignalR and Event Hubs</title><link href="http://www.mikelanzetta.com/real-time-mapping-with-signalr-and-event-hubs.html" rel="alternate"></link><published>2015-08-18T10:20:00-07:00</published><updated>2015-08-18T10:20:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-08-18:/real-time-mapping-with-signalr-and-event-hubs.html</id><summary type="html">&lt;p&gt;One of my recent projects had to do with watching people moving around
the city - not in a creepy stalker way, but trying to get some sense of
where people congregated and general walking traffic flow. As anyone who
has dealt with large data, especially large geo data can tell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my recent projects had to do with watching people moving around
the city - not in a creepy stalker way, but trying to get some sense of
where people congregated and general walking traffic flow. As anyone who
has dealt with large data, especially large geo data can tell you -
visualization is everything. Somehow looking at a screen full of
lat/long coordinates and timestamps just doesn't tell you a story like
seeing things play out on the
map.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/route_animation.gif"&gt;&lt;img alt="route_animation" src="http://www.mikelanzetta.com/images/route_animation.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So what if you have large amounts of geo data coming in from different
users, say via a high-scale queuing mechanism like Event Hubs? What if
you want to display that to anyone who wants to see it, in
near-real-time? I decided to use &lt;a href="http://leafletjs.com/"&gt;Leaflet&lt;/a&gt;(a
great open-source JS mapping package (&lt;a href="http://amzn.to/1J4LHxd"&gt;book&lt;/a&gt;))
and &lt;a href="http://signalr.net/"&gt;SignalR&lt;/a&gt;(a great open-source
&lt;a href="http://amzn.to/1J4LKZW"&gt;WebSockets&lt;/a&gt;package for ASP.Net
(&lt;a href="http://amzn.to/1HLx29i"&gt;book&lt;/a&gt;)) to make that happen. As always, I've
released all of my code &lt;a href="https://github.com/noodlefrenzy/asp-mappy"&gt;on
GitHub&lt;/a&gt;, and I'll walk you
through the steps needed to make this scenario happen.&lt;/p&gt;
&lt;h2&gt;Mapping with Leaflet.js&lt;/h2&gt;
&lt;p&gt;Let's start at the front - how can I show a map on the screen? There are
a ton of libraries out there - for apps, full desktop applications, and
websites. Let's assume we're going to be building a website, and want a
Javascript solution. Even there, we have many options - from our own
Bing Maps to Google Maps or even MapQuest. However, I like
&lt;a href="http://leafletjs.com/"&gt;Leaflet.js&lt;/a&gt; for a few reasons - first, they have
an easy to use and &lt;a href="http://leafletjs.com/reference.html"&gt;well&lt;/a&gt;
&lt;a href="http://leafletjs.com/examples.html"&gt;documented&lt;/a&gt;API; second, they can
work with a variety of different tile-sets, so you can develop on
OpenMaps and then later swap your look-and-feel for a more Bing Maps
style with a one line code change.&lt;/p&gt;
&lt;p&gt;Integrating Leaflet into your code is as simple as including their CSS
and Javascript, which I've done via their CDN links:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I chose to put it into &lt;code&gt;_Layout.cshtml&lt;/code&gt; since this was the crux of my
site. To use Leaflet, I picked a center-point and zoom level for my map,
added a well-named &lt;code&gt;div&lt;/code&gt;, picked a size for it, and created a map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// from site.css:
#map { height: 500px; }

// from _Home.cshtml:
&lt;span class="c"&gt;&amp;lt;!-- ko with: home --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Mappy&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-md-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- /ko --&amp;gt;&lt;/span&gt;

// from Index.cshtml:
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    var centerLat = @ViewBag.CenterLatitude;
    var centerLon = @ViewBag.CenterLongitude;
    var zoom = 13;
    var map = L.map(&amp;#39;map&amp;#39;).setView([centerLat, centerLon], zoom);
    L.tileLayer(&amp;#39;https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}&amp;#39;, {
        attribution: &amp;#39;Map data &lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://openstreetmap.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;OpenStreetMap&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; contributors, &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://creativecommons.org/licenses/by-sa/2.0/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CC-BY-SA&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, Imagery © &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://mapbox.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Mapbox&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[…]&amp;#39;,
        maxZoom: 18,
        id: &amp;#39;@ViewBag.MapsId&amp;#39;,
        accessToken: &amp;#39;@ViewBag.MapsAccessToken&amp;#39;
    }).addTo(map);
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the highlighted lines where I pull constants from the ViewBag -
this allows me to factor out my maps app ID and access token, as well as
the center-point for my map.&lt;/p&gt;
&lt;h2&gt;Real-time Geo Data with SignalR&lt;/h2&gt;
&lt;h4&gt;SignalR Server-Side&lt;/h4&gt;
&lt;p&gt;Integrating SignalR isn't much more difficult than Leaflet.js, but it
has to integrate at two different layers of the stack since it's the
bridge between them. Including it in your ASP.Net application is done as
you would expect - Install the &lt;code&gt;Microsoft.AspNet.SignalR&lt;/code&gt; NuGet package.
Once that's installed you'll need to decide how you want to use it
to send data from server to clients - I've used &lt;a href="http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client"&gt;SignalR
Hubs&lt;/a&gt;in
this example, as it allowed me to create different hubs for different
purposes (although I'm only using one in this example code).&lt;/p&gt;
&lt;p&gt;Creating a Hub is as simple as creating a class inheriting from the
appropriate &lt;code&gt;Hub&lt;/code&gt; class and implementing a few methods. Behind the
scenes it creates the appropriate proxies and lets you do your client
wiring from there. The server-side needs to get the hub context instance
and then use that to send data to clients, while the hub uses its
internal Clients.All dynamic collection to deliver that data. I use a
simple static method on my Hub to allow server-side code to find the hub
context from the global connection, making calling code trivial to
implement. As a result, the Hub code looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RouteHub&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hub&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IHubContext&lt;/span&gt; &lt;span class="nf"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GlobalHost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHubContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHubContext&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;code&gt;Clients.All.newPoint()&lt;/code&gt; call - newPoint is a &lt;code&gt;dynamic&lt;/code&gt; method
which gets wired into the created proxy and passed through to the
client, as you'll see below. Calling the hub from the server is as easy
as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One thing to notice is that I'm casting the &lt;code&gt;doubles&lt;/code&gt; I have internally
for lat/lon into &lt;code&gt;floats&lt;/code&gt; when passing them down the wire. SignalR seems
to have trouble passing &lt;code&gt;doubles&lt;/code&gt; through to Javascript - possibly
because the language doesn't support them - limiting it to &lt;code&gt;floats&lt;/code&gt;
fixes the problem. Now that we have the hub created, we just need to
start SignalR itself when we start up our website - we do this in the
Startup.cs code with the addition of a single line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAppBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MapSignalR&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Wiring the SignalR Client&lt;/h4&gt;
&lt;p&gt;Now that we have a server which can send us data, we need to wire up the
client to receive it. Wiring SignalR in the client requires
three modifications. First - include the hubs, allowing the client code
to talk to the proxies. Second - create a handler to process
incoming messages from the hub you're listening to. Finally - start
listening. This is actually a pretty small chunk of code, as you can see
here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/Scripts/jquery.signalR-2.2.0.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/signalr/hubs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;routeHub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeHub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;routeHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Do something exciting!&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the reappearance of the &lt;code&gt;newPoint&lt;/code&gt; method - this must correspond
with the dynamic method you're calling from within the Hub above (via
&lt;code&gt;Clients.All&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Geo Data and Event Hub&lt;/h2&gt;
&lt;p&gt;So now I have a client-server connection, and a map. Let's see if I
can't send some data to that map! Since I'm planning on having hundreds
or thousands of users sending me geo data, and I'm going to want to use
this geo data for more than just mapping, &lt;a href="http://azure.microsoft.com/en-us/services/event-hubs/"&gt;Event
Hubs&lt;/a&gt; seems like
a natural mechanism to decouple the senders from the receivers. The one
caveat with writing a receiver for Event Hubs is that they have to
manage their own state (context) so they can pick up where they left
off. I'll be using the Azure-provided &lt;code&gt;EventProcessorHost&lt;/code&gt; library to do
that work for me - it stores offset data for each partition in Azure
Blob storage and uses blob leases for ad-hoc load balancing, so is quite
a useful little piece of code, and is simple to set up. You just NuGet
install Microsoft.Azure.ServiceBus.EventProcessorHost, and then
implement and instantiate your event processor. I've chosen to
use/assume JSON serialization via Newtonsoft's Json.NET, and my data
payload class looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoutePointEH&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRoutePoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;Latitude&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;Longitude&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;UserID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;MeasurementTime&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;Timestamp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(I'll come back to the reason for the &lt;code&gt;IRoutePoint&lt;/code&gt; interface), while
the resulting EventProcessor looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoutePointProcessorFactory&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEventProcessorFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RoutePointProcessorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onItemCB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEventProcessor&lt;/span&gt; &lt;span class="nf"&gt;CreateEventProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RoutePointProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onItemCB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onItemCB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RoutePointProcessor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEventProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RoutePointProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onItemCB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onItemCB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;CloseAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CloseReason&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;OpenAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;ProcessEventsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventData&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;routeItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AzureUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeserializeMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RoutePointEH&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onItemCB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routeItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldCheckpoint&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckpointAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and is created and registered using a simple utility method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AttachProcessorForHub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;processorName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;offsetStorageConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;IEventProcessorFactory&lt;/span&gt; &lt;span class="n"&gt;processorFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;eventProcessorHost&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processorName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offsetStorageConnectionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterEventProcessorFactoryAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processorFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that it creates the generic EventProcessorHost class with the Event
Hub details, and then hands it a factory to create processors for each
partition. Each partition processor then is responsible for saving its
own checkpoint at an interval of its choosing (factored into the
unshown &lt;code&gt;ShouldCheckpoint&lt;/code&gt; method).&lt;/p&gt;
&lt;p&gt;I then create an additional wrapper class as a "point source" which
takes in a callback for what to do when new points come in and wires
everything up, allowing me to factor out all of the code for pulling
configuration values and creating the factory/processor, and even
letting me swap out Event Hubs for other "point sources" like
canned/random data or even Azure Table Storage (see &lt;a href="https://github.com/noodlefrenzy/asp-mappy/blob/master/MappyData/RoutePointSource.cs"&gt;the
repo&lt;/a&gt;
for details).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventHubRoutePointSource&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;EventHubRoutePointSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onNewPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_onPoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onNewPoint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;StartAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ehConnStr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;storageConnStr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;eventHubName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;consumerGroup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RoutePointProcessorFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_onPoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;AzureUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AttachProcessorForHub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mappy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ehConnStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;storageConnStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IRoutePoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_onPoint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Wiring It All Together&lt;/h2&gt;
&lt;p&gt;Now that I have all of the pieces, how do I wire it all together? First,
in &lt;code&gt;Global.asax.cs&lt;/code&gt; we add a single line to start our chosen "point
source" and drive its incoming data into our SignalR hub:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RoutePointSourceFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AzureUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RoutePointSource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RouteHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Longitude&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in our client's "do something exciting!" section, we wire it up to
write this incoming geo data onto our map, with each user getting its
own path layer (a polyline) and "walking man" marker at the front.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pathMarkers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;iconUri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/Content/Sports-Walking-icon-white.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;endIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;iconSize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;iconAnchor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;iconUrl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;iconUri&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;routeHub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routeHub&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;routeHub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addLatLng&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathMarkers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathMarkers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="nx"&gt;pathMarkers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;endIcon&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;polyline&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;pathMarkers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lon&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;endIcon&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;If you've been following along in the repo, you'll notice that the code
above is different than what is up there - that's simply due to space
constraints, this post is already in TL;DR territory and any more
features would only make that worse. The main differences between what's
here and what's in &lt;a href="https://github.com/noodlefrenzy/asp-mappy"&gt;the repo&lt;/a&gt;
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I've factored out the "point source" into three distinct sources -
    an Event Hub source as outlined here, an Azure Table Storage source,
    and a "Random" source with initial points pulled from a neighborhood
    around the center and then a random walk from there.&lt;/li&gt;
&lt;li&gt;I've integrated the
    fantastic &lt;a href="https://github.com/gka/chroma.js/"&gt;Chroma.js&lt;/a&gt; to ensure
    each path gets a unique random yet pleasing color, and made an LRU
    to limit the total number of paths I show on-screen.&lt;/li&gt;
&lt;li&gt;I've integrated the remarkably easy-to-use
    &lt;a href="https://github.com/Leaflet/Leaflet.heat"&gt;Leaflet.heat&lt;/a&gt; to add a
    heatmap layer for each user, showing how individuals walk and where
    there "hot spots" might be.&lt;/li&gt;
&lt;li&gt;I've created a simple CLI program to drive random data into the
    Event Hub, allowing easy testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope I've showed you that getting a mapping web application up and
running is actually pretty easy, and integrating near-real-time data can
be done with little code using Event Hubs and SignalR. As always, my
code is &lt;a href="https://github.com/noodlefrenzy/asp-mappy"&gt;up on GitHub&lt;/a&gt;and is
MIT license, so do with it what you will. Let me know via comments,
twitter, or GitHub issues if you have any feedback - I'd love to hear
it.&lt;/p&gt;</content><category term=".NET"></category><category term="C#"></category><category term="EventHub"></category><category term="Geo"></category><category term="WebSockets"></category></entry><entry><title>My Trip to CascadiaFest</title><link href="http://www.mikelanzetta.com/my-trip-to-cascadiafest.html" rel="alternate"></link><published>2015-08-11T11:37:00-07:00</published><updated>2015-08-11T11:37:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-08-11:/my-trip-to-cascadiafest.html</id><summary type="html">&lt;p&gt;... or "who knew there was anything in Blaine, Washington?"&lt;/p&gt;
&lt;p&gt;I got back recently from giving my first talk at &lt;a href="http://2015.cascadiajs.com/"&gt;CascadiaFest
2015&lt;/a&gt;, held in the beautiful Semiahmoo
Resort outside of Blaine, WA. As a long-term Seattle resident, my only
knowledge of Blaine was as "that place where we spend too much …&lt;/p&gt;</summary><content type="html">&lt;p&gt;... or "who knew there was anything in Blaine, Washington?"&lt;/p&gt;
&lt;p&gt;I got back recently from giving my first talk at &lt;a href="http://2015.cascadiajs.com/"&gt;CascadiaFest
2015&lt;/a&gt;, held in the beautiful Semiahmoo
Resort outside of Blaine, WA. As a long-term Seattle resident, my only
knowledge of Blaine was as "that place where we spend too much time
waiting to cross the border", but it turns out there's a beautiful golf
resort right nearby. Since I don't golf I still wasn't that excited, but
CascadiaFest had more than enough activity to keep me busy.&lt;/p&gt;
&lt;h2&gt;What is CascadiaFest?&lt;/h2&gt;
&lt;p&gt;CascadiaFest is the renamed CascadiaJS, and is a regional web technology
conference. It's expanded beyond client-side Javascript to server-side,
and now to CSS (hence the rename), but really any talks related to
developing for the web are likely welcome, as well as those using JS in
more interesting ways. In fact, one of the talks this year was on
developing Minecraft mods using JS. Even though it's a regional
conference, several of the speakers and some of the attendees came from
elsewhere - I met a few from New York and one from Argentina, and saw
others from even farther afield.&lt;/p&gt;
&lt;h3&gt;Logistics&lt;/h3&gt;
&lt;p&gt;The conference was held at the &lt;a href="http://www.semiahmoo.com/"&gt;Semiahmoo
Resort&lt;/a&gt;, which was actually quite
beautiful. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Sunset at Semiahmoo Resort" src="http://www.mikelanzetta.com/images/semiahmoo_sunset_sm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The grounds were large, it was surrounded by water, had a spa and a
pool - honestly I had no idea there was any place this nice between
Seattle and Canada. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Semiahmoo Resort coastal pic during the day" src="http://www.mikelanzetta.com/images/semiahmoo_coast_sm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The lines to get in on the first day were long - it seemed like if they'd
let people check in the night before, they could have prevented some
initial headaches.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CascadiaFest Line" src="http://www.mikelanzetta.com/images/cascadia_line_sm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;But once that initial hurdle was passed, the rest of the conference was
incredibly well run. The conference badges were far beyond any I've ever
received&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cascadia Speaker Badge" src="http://www.mikelanzetta.com/images/cascadia_badge_sm.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;solid laser-etched wood, definitely one to be kept. There was some
other swag, including a great CascadiaFest hoodie, but the badge was a
real standout. Plenty of sponsors were on-board providing lunch and
dinner, and the speakers-only dinner gave me a chance to get to know my
fellow speakers better. Overall the sense of camaraderie amongst
attendees was strong, making it by far the friendliest conference I've
attended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Talks&lt;/h2&gt;
&lt;p&gt;The conference was broken thematically into three days, with a single
track of talks each day in a large room holding \~400 people. All talks
were uploaded to Youtube and auto-captioned.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PLLiioAbFTbKNpjG_yNpNfhAmQ9KsxFzX7" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Day One - CSS Day&lt;/h3&gt;
&lt;p&gt;The first day was CSS day, and the talks were mostly on CSS, but with a
few on more general topics. Take a look at the playlist above for the
full set, but I'll call out a few.&lt;/p&gt;
&lt;p&gt;Alan Mooiman had a solid start to the conference with a talk on the
history and future of CSS, and why the cycle of birth and death in
preprocessors is a good thing.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/jWDZP8twWDg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Amy Lynn Taylor's talk started out slow, but had some great insights on
how to make a distributed team cohere and have a common culture. As
someone who works from home / remotely much of the time, it was relevant
to my interests.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/\_NPLqrVMHFw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Day Two - Client-side Javascript Day&lt;/h3&gt;
&lt;p&gt;There was a great talk on JSON Web Tokens (vs. Cookies) by Martin
Gontovnikas with some easy examples to follow and motivating reasons to
use them.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mvS4oxHFXxM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My colleague David Catuhe had a great talk on his Babylon.js library for
developing 3D games in Javascript. I can't wait to try it out, and with
easy importing from Unity it's much more likely I might actually do so.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZE-HRoaN4YE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Myles Borins had a great talk with a deceptive title - "On the
fallibility of large systems" made me think it was going to be about
distributed systems and fault-tolerance, but instead it was on how our
easy use of large dependency-chains can cause exciting failures you'd
never expect. A useful reminder for anyone using npm and Bower.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/47XMs6pcf7w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Andrei Kashcha's talk on visualization of huge graphs was fantastic. His
delivery was charming and his enthusiasm was infectious, and the
insights he was able to pull from these large graphs of package manager
dependencies like npm were illuminating.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vZ6Yhlxv7Os" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Ashley Williams had a talk on ES6 that was both great and somewhat
depressing. Depressing mostly because I'm not a huge fan of the JS
language, and her point that JS is a teaching language due to its
ubiquity and popularity rang true. I agree with her insight into the
oddness of adding classes to ES6 given JS's prototypal inheritance - I
hadn't considered it before, but it does seem out of place.&lt;/p&gt;
&lt;h3&gt;Day Three - Server-side Javascript Day&lt;/h3&gt;
&lt;p&gt;Another of my colleagues - Parashuram - gave a talk on automating web
performance measurement that had some great details on how to integrate
that into your development process, and how to avoid pitfalls in the
process.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/86LwhTD\_rkM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And finally my talk on the &lt;a href="http://nitrogen.io/"&gt;Nitrogen&lt;/a&gt; framework and
the development of my &lt;a href="https://github.com/noodlefrenzy/node-amqp10"&gt;AMQP messaging
client&lt;/a&gt;. I used
&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;Reveal.js&lt;/a&gt; for my slides and
&lt;a href="https://github.com/noodlefrenzy/Cascadia2015-NitrogenPres/tree/gh-pages"&gt;open-sourced them on
GitHub&lt;/a&gt;,
using gh-pages for &lt;a href="http://aka.ms/cascadia"&gt;hosting them&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/99zXI6CZNGM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;The whole CascadiaFest crowd were incredibly supportive - from the
attendees to the organizers. I would highly recommend this conference to
anyone in the Pacific Northwest who is interested in CSS or Javascript -
regardless of where it's held next year, you'll have a great time and
learn quite a bit.&lt;/p&gt;
&lt;p&gt;I'd also like to give a shout-out to &lt;a href="http://www.tougocoffee.com/"&gt;Tougo
Coffee&lt;/a&gt; for keeping me wired throughout the
entire three-day period, and whatever genius on the CascadiaFest team
who decided to bring them up to Semiahmoo.&lt;/p&gt;</content><category term="AMQP"></category><category term="Cascadia"></category><category term="Conferences"></category><category term="Javascript"></category><category term="Nitrogen"></category><category term="Node"></category></entry><entry><title>Using Project Oxford To Pull Entities From Images</title><link href="http://www.mikelanzetta.com/using-project-oxford-to-pull-entities-from-images.html" rel="alternate"></link><published>2015-05-14T11:06:00-07:00</published><updated>2015-05-14T11:06:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-05-14:/using-project-oxford-to-pull-entities-from-images.html</id><summary type="html">&lt;p&gt;I love my job. Less than a week after watching the amazing announcements
at &lt;a href="http://www.buildwindows.com/"&gt;//Build2015&lt;/a&gt;, I had a chance to try
using some of them on a real project as part of a hackathon.
Unfortunately, I can't share the actual problem they are trying to
solve, but the work itself …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love my job. Less than a week after watching the amazing announcements
at &lt;a href="http://www.buildwindows.com/"&gt;//Build2015&lt;/a&gt;, I had a chance to try
using some of them on a real project as part of a hackathon.
Unfortunately, I can't share the actual problem they are trying to
solve, but the work itself is another matter. Consider images containing
some interesting, structured text and imagine turning them into a rich
model of intent and the entities involved using OCR and Intent/Entity
Extraction. I know I could build such a solution, but it would take me a
long time. Finding the right OCR library and integrating it, and then
finding/building an Entity Extractor and tuning it - it'd be a major
nightmare.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.projectoxford.ai/"&gt;Project Oxford&lt;/a&gt;(&lt;a href="http://channel9.msdn.com/Events/Build/2015/2-613"&gt;video
here&lt;/a&gt;) is a new suite
of Machine Learning libraries from MSR exposed as Azure Marketplace
APIs.  It differs from Azure ML in that these are pre-trained/pre-built
libraries for specific but common ML tasks that are, in many cases,
already part of various backend services in Microsoft (Bing, OneDrive,
Cortana, etc.). Their &lt;a href="https://www.projectoxford.ai/vision"&gt;Vision
API&lt;/a&gt;contains an OCR module exposed
as a simple RESTful endpoint, and they have a system named
&lt;a href="https://www.projectoxford.ai/luis"&gt;LUIS&lt;/a&gt;for training and deploying
intent and entity recognition models that can be just as robust as
Cortana. These two pieces turn this near impossible task (certainly
impossible during a hackathon) into something achievable, so I thought
I'd walk you through the code I wrote to do just that. All of the code
in this post is &lt;a href="https://github.com/noodlefrenzy/image-to-entities"&gt;published on
GitHub&lt;/a&gt;under MIT
license, but probably not quite as terse (I've removed braces from
single statements etc. to mitigate TL;DR syndrome).&lt;/p&gt;
&lt;h2&gt;The Input&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Morpheus: What if I told you it was staring you right in the face?" src="http://www.mikelanzetta.com/images/1wL61Ro1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So what sort of input data should we use? It needs to be images with
structured text, and the text should have both an overall
intent/category as well as individual entities within it. Where could we
find something like that...&lt;/p&gt;
&lt;p&gt;Ohhh, that's right! The internet is covered in the damn things! We could
get a training set in the millions just by squatting on Reddit or 4chan.
Settled - we'll try and pull text from memes and determine "intent"
(which meme are we looking at?) and "entities" (what is Morpheus telling
us?). How do we get started? We'll start out with the Morpheus image and
go from there - first off by getting our marketplace accounts set up. Go
and sign up for the &lt;a href="http://azure.microsoft.com/en-us/marketplace/partners/visionapis/visionapis/"&gt;Vision
API&lt;/a&gt; and
get on the waiting list for &lt;a href="https://www.luis.ai/?ref=1699313"&gt;LUIS&lt;/a&gt; -
you'll need to wait until LUIS lets you in before you can get this code
completely running, but the turnaround time has been pretty good.&lt;/p&gt;
&lt;h2&gt;Extracting Text&lt;/h2&gt;
&lt;p&gt;Let's use the Vision APIs to extract text from our memes. We could use
the SDK that they provide, but since (a) they don't have a Nuget package
and (b) I might want to rewrite in Node.js or Python later, let's stick
with the raw REST API. I'll create an &lt;code&gt;ImageToText&lt;/code&gt; class to keep track
of the API key and the URI format, and build a method to fetch OCR
results by passing in the image URI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ImageToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;OCRURIFormat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.projectoxford.ai/vision/v1/ocr?language={0}&amp;amp;detectOrientation={1}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DefaultLanguage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;DefaultDetectOrientation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;APIKeyHeader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ocp-Apim-Subscription-Key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProcessImageToTextAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt; &lt;span class="n"&gt;imageUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultLanguage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;detectOrientation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultDetectOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;requestBody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageUri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ocrUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OCRURIFormat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detectOrientation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ocrUri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIKeyHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;requestStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequestStreamAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ConfigureAwait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bodyBytes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;requestStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyBytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bodyBytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ConfigureAwait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Since errors from this API typically come back with a JSON payload describing the problem, trap WebExceptions and pull the response anyway.&lt;/span&gt;
  &lt;span class="n"&gt;HttpWebResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ConfigureAwait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebException&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;we&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;JObject&lt;/span&gt; &lt;span class="n"&gt;responseJson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;responseStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StreamReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;responseStr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;responseStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadToEndAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ConfigureAwait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;responseJson&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I&amp;#39;m fine throwing a parse error here.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Could probably relax this to &amp;quot;non-failing&amp;quot; codes.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;responseJson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed call: {0} failed to OCR - code {1} - details\n{2}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="n"&gt;imageUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responseJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Newtonsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Indented&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That seems like a lot of code but much of it is just boilerplate HTTP
request/response cycle - let's walk through it. The constructor takes
and squirrels away the API key, and the class defines a few constants
including the format of the REST URI, leaving the method by default just
taking in a URI for the image and assuming that it should try and
auto-detect language and orientation. The method itself builds a POST
request containing the image Url in a JSON payload and funnels it off to
the server, awaiting a response. When there's an error in the method
invocation on the server side, it often sends back a JSON payload
containing the error details, so we trap &lt;code&gt;WebException&lt;/code&gt; and try to pull
out those details. Finally, we read the response stream into a string
and attempt to parse it as JSON, returning a &lt;code&gt;JObject&lt;/code&gt; as a result. We
could easily create a POCO to deserialize into, but ... I didn't want to
bother. Note how all of the async calls end
in &lt;code&gt;.ConfigureAwait(false)&lt;/code&gt; - this is because we're in library code and
want to allow this to be called from e.g. UI threads without
self-deadlocking (a &lt;a href="http://stackoverflow.com/questions/13489065/best-practice-to-call-configureawait-for-all-server-side-code"&gt;StackOverflow
thread&lt;/a&gt;
and &lt;a href="http://www.tugberkugurlu.com/archive/the-perfect-recipe-to-shoot-yourself-in-the-foot-ending-up-with-a-deadlock-using-the-c-sharp-5-0-asynchronous-language-features"&gt;great
post&lt;/a&gt;on
the issue, for those unfamiliar).&lt;/p&gt;
&lt;h2&gt;Parsing Words Into Lines&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;JObject&lt;/code&gt; we give back from the call contains a hierarchy of
information (outlined in &lt;a href="https://dev.projectoxford.ai/docs/services/54ef139a49c3f70a50e79b7d/operations/5527970549c3f723cc5363e4"&gt;the
docs&lt;/a&gt;)
with &lt;code&gt;regions&lt;/code&gt; containing one or more &lt;code&gt;lines&lt;/code&gt; containing one or
more &lt;code&gt;words&lt;/code&gt;. Our goal for meme text is to pull all of the text into a
single string, which I do using the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ExtractTextFromResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JObject&lt;/span&gt; &lt;span class="n"&gt;responseJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responseJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;regions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                          &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lines&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                          &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;words&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                          &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Joining all of the words' text together for all lines in all
regions. Let's take a look at the results.&lt;/p&gt;
&lt;h2&gt;Results... and a Realization&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Stuff" src="http://www.mikelanzetta.com/images/5ocZvsW1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So running the OCR on our example image above, I notice a problem - it's
missed a chunk of text and returned "what if it was staring you right in
the face?". Crap, well at least the text it did find it got right.
Boromir is right - of course Oxford trolls me and pulls "one &lt;em&gt;does&lt;/em&gt;
simply ocr text from an image"!&lt;/p&gt;
&lt;p&gt;In retrospect, I should have expected a problem - we're using technology
meant to pull words from objects in the image, to pull words that have
been overlaid on an existing image. It's a whole different training
base, and the words in memes appear totally different than the words in
reality. Perhaps we can transform them in some way to pull text
correctly - maybe pull a single color channel or invert.&lt;/p&gt;
&lt;p&gt;I've tried a bunch of different examples of simple filters, and so far
pulling out the blue channel or bumping gamma to \~2.5 seems to work
reasonably well. I'll publish a future post with some of the work I did
here - if you're curious now, see &lt;a href="https://github.com/noodlefrenzy/image-to-entities"&gt;the GitHub
repository&lt;/a&gt;. There's
more work that can be done here - for instance, I believe a pre-filter
doing edge detection would work well - but let's move on to LUIS.&lt;/p&gt;
&lt;h2&gt;Training an Entity Extractor&lt;/h2&gt;
&lt;p&gt;Now we can work with LUIS from Project Oxford to train a model for
recognizing the type of meme and the contents within. We first log into
LUIS (you did request an invite earlier, right?) and create a new
application. We can then create a few intents and entities, and start
adding "utterances" - for each utterance you pick an intent and then
label any entities within it. You can then re-train the model with the
button in the bottom left and see how it did - here's a shot of what my
model looks like after a few training utterances have been added:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/luis_training.png"&gt;&lt;img alt="LUIS_Training" src="http://www.mikelanzetta.com/images/luis_training.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that it's trained, you can go back to your application list and hit
"Publish":&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/LUIS_Publish.png"&gt;&lt;img alt="LUIS_Publish" src="http://www.mikelanzetta.com/images/LUIS_Publish.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once it's published, you can just invoke it with the given URL and the
utterance you want it to try and tag. For the Boromir example above,
I've run it through the single-channel filter (blue) and then passed it
into the model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mordorImage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://i.imgur.com/5ocZvsW.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;imageToText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImageToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visionApiKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;imageToText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessImageToTextAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;ImageUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SingleChannelAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mordorImage&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ImageUtilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageToText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExtractLinesFromResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Remove memegenerator.net line.&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;luis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TextToEntitiesAndIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luisApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;luisApiKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;luisResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;luis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetectEntitiesAndIntentFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luisResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Newtonsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Indented&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I do, it comes out with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;entities&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;entity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ocr some text from an image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Subject1&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;intents&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;intent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mordor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9998174&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it pulled the right meme type &lt;em&gt;and&lt;/em&gt; entity from the meme
text. Not too surprising since I've over-fit the model, but it gives you
some ideas of how you can string Oxford, LUIS, and some simple image
processing together to build a pipeline. Once again, all of this code is
&lt;a href="https://github.com/noodlefrenzy/image-to-entities"&gt;on GitHub&lt;/a&gt; under and
MIT license, so feel free to use it as you see fit.&lt;/p&gt;</content><category term="C#"></category><category term="Entity Extraction"></category><category term="Machine Learning"></category><category term="ML"></category><category term="MSR"></category><category term="OCR"></category><category term="Project Oxford"></category></entry><entry><title>Storm Bolts Using Reactive Extensions</title><link href="http://www.mikelanzetta.com/storm-bolts-using-reactive-extensions.html" rel="alternate"></link><published>2015-04-07T11:03:00-07:00</published><updated>2015-04-07T11:03:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-04-07:/storm-bolts-using-reactive-extensions.html</id><summary type="html">&lt;p&gt;As you might have noticed in some of my other posts, I've spent my share
of time with Azure EventHubs.  It's a great ingestion pipeline able to
cope with some of the highest scale workloads you can throw at it, but
once the data is in there it's another matter …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As you might have noticed in some of my other posts, I've spent my share
of time with Azure EventHubs.  It's a great ingestion pipeline able to
cope with some of the highest scale workloads you can throw at it, but
once the data is in there it's another matter to pull it out and do
something useful with it.  You need a system capable of processing
multiple input streams at extremely high scale and combining them in
various ways, building aggregates, and storing results.  Apache Storm is
one such system, as are Spark and Azure Data Factory which I will
discuss in future posts.  It's quite easy to get Storm up and running on
Azure and it's easy to code the requisite pieces in C#, but the Storm
architecture has some idiosyncrasies which make it difficult to decouple
the business logic of processing your data from the Storm-specific code
for managing the appropriate pieces and ensuring reliability semantics.
This post, in particular, discusses turning the Storm workflow on its
head using the Reactive Extensions allowing me to decouple the
Storm-specific code from my business logic in an elegant fashion.  In
a future post I will discuss using this structure to process input
from EventHubs. Programming note: all of the code in this post is
&lt;a href="https://github.com/noodlefrenzy/ReactiveStorm"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Into the Storm&lt;/h2&gt;
&lt;p&gt;&lt;img alt="topology" src="http://www.mikelanzetta.com/images/topology1.png"&gt;&lt;/p&gt;
&lt;p&gt;Like any other data processing pipeline, Apache Storm consists of a way to
get data into the system followed by a series of processing
steps resulting in one or more data outputs.  In Storm, the
input consists of "Spouts" which produce data in the form of "Tuples".
 One or more Spouts can then drive processing elements called "Bolts"
which ingest that data and may emit additional Tuples of their own.
 Eventually these chains of Bolts might produce one or more outputs
which would get stored to whichever data stores you have configured.
 Storm has a robust and tune-able fault tolerance model, with Tuples
allowing themselves to be "anchored" to downstream Tuples, and only
"done" when the entire dependency chain is successfully "ack'd". For
more details I'd encourage you to &lt;a href="http://storm.apache.org/documentation/Guaranteeing-message-processing.html"&gt;peruse their
documentation&lt;/a&gt; which,
on this subject, is actually solid and well-written.&lt;/p&gt;
&lt;h2&gt;Storm on HDInsight, on Visual Studio&lt;/h2&gt;
&lt;p&gt;To get started with Storm on HDInsight make sure you've installed the
HDInsight Azure tools for your version of Visual Studio - there's a
&lt;a href="http://azure.microsoft.com/en-us/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started/"&gt;great post on the Azure
site&lt;/a&gt;on
installing the tools, connecting to your subscription and getting
started.  You'll notice a host of new project types specifically for
working with HDInsight once you've installed it and restarted VS - we
want "Storm Application".&lt;/p&gt;
&lt;p&gt;&lt;img alt="HDInsight -&amp;gt; Storm Application" src="http://www.mikelanzetta.com/images/create_storm_project.png"&gt;&lt;/p&gt;
&lt;p&gt;When you create the project, you'll wind up with a C# Class Library
project with a few files you can use as templates to build out your
storm Topology - we'll be replacing most of those, as outlined below.
 Notice that although Storm itself seems like a stream-processing
system, in reality what it's doing is producing Tuples from within
Spouts using &lt;code&gt;NextTuple()&lt;/code&gt; and consuming those Tuples (and potentially
producing more) from within the Bolt's &lt;code&gt;Execute()&lt;/code&gt; method.
 Architecturally for Storm this makes sense, but for the user it's a bit
of a disconnect from how they think about the problem.  I know for me I
think of it as processing a stream of input into one or more streams of
output, and so had mentally geared myself for &lt;code&gt;Enumerables&lt;/code&gt;
and &lt;code&gt;yield return&lt;/code&gt; blocks, but instead I've almost got the dual of
that - I'm seeing a single element at a time, and sending a single
element at a time back out.  I immediately thought of Reactive
Extensions and &lt;code&gt;IObservable -&lt;/code&gt; &lt;a href="http://csl.stanford.edu/~christos/pldi2010.fit/meijer.duality.pdf"&gt;the dual
of &lt;code&gt;IEnumerable&lt;/code&gt;!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First we need to add Reactive to the mix - open the "Manage NuGet
Packages" dialogue, and search for Rx-Main.  Add that to the project,
and you will now have access to the whole Reactive toolkit - from
&lt;code&gt;Subjects&lt;/code&gt; to &lt;code&gt;Reactive.Linq&lt;/code&gt;.  I'd definitely recommend spending some
time learning the framework if you don't know it - it'll break your
brain, but it's kind of amazing when you start wielding its power.  I'd
suggest this &lt;a href="http://go.microsoft.com/fwlink/?LinkID=205219"&gt;paper on design
guidelines&lt;/a&gt;, and this
&lt;a href="http://channel9.msdn.com/Search?term=reactive%20extensions%20api%20in%20depth#ch9Search"&gt;series of Channel 9
videos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Building a Reactive Bolt&lt;/h2&gt;
&lt;p&gt;Now to the implementation!  So the first thing we want to do is turn
this Bolt inside-out - we'll have an &lt;code&gt;Observable&lt;/code&gt; of the Bolt's inputs
mapping through some processing to an &lt;code&gt;Observable&lt;/code&gt; of the Bolt's
outputs.  We can factor out the logic that turns these Tuples into input
types and turns the output types into Values, and then the processor can
just focus on the logic itself.  These inputs and outputs should keep
track of the Tuples they've used so we can, if needed, anchor the output
of the Bolt as appropriate.  To do so, we'll wrap these inputs and
outputs in a couple simple parameterized structs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Wrap the (converted) input to keep track of the original tuple for anchoring.&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;SCPTuple&lt;/span&gt; &lt;span class="n"&gt;Original&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TIn&lt;/span&gt; &lt;span class="n"&gt;Converted&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Wrap the result to keep track of all tuples that should anchor to the output.&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;BoltOutput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SCPTuple&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Anchors&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TOut&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we now have several responsibilities and since the topology
builder likes each Bolt to be a distinct class, we'll turn this Reactive
Bolt into a nice abstract base class taking on the grunt work of
Reactifying (&lt;em&gt;is that a word?&lt;/em&gt;) the code and leaving the child class to
just do the basics.  The result looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReactiveBoltBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TOut&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISCPBolt&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ReactiveBoltBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;MapSchemas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ProcessInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;converted&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConvertOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Anchors&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Anchors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_STREAM_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Anchors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;converted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_STREAM_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;converted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bolt shutting down.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// IObservable for the input data - fed to the processor.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Execute now just feeds the tuple to the observable (and, potentially, acks).&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCPTuple&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Original&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Converted&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConvertInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Map schemas into the Context using DeclareComponentSchema.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MapSchemas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Convert SCPTuple into the input type.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;TIn&lt;/span&gt; &lt;span class="nf"&gt;ConvertInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCPTuple&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Convert output type into Values for Emitting.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Values&lt;/span&gt; &lt;span class="nf"&gt;ConvertOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Process the input data from its observable into output data.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltOutput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProcessInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So there are only four methods that child classes need to implement.
 This may seem like more than it needed to in the first place (because
it is), but each of those is focused on a very specific task.
 &lt;code&gt;MapSchemas&lt;/code&gt; is used to tell the &lt;code&gt;Context&lt;/code&gt; what the input and output
schemas look like.  &lt;code&gt;ConvertInput/ConvertOutput&lt;/code&gt; just convert values
from/to the input/output formats expected by Storm, and &lt;code&gt;ProcessInput&lt;/code&gt;
does the meat of the work - subscribing to the input observable and
letting us watch for output.  The Bolt itself just &lt;code&gt;Subscribes&lt;/code&gt; to the
&lt;code&gt;IObservable&lt;/code&gt; handed back from &lt;code&gt;ProcessInput&lt;/code&gt;, and &lt;code&gt;Emits&lt;/code&gt; results as it
sees them (anchored appropriately).  That leaves &lt;code&gt;Execute&lt;/code&gt; to just
publish inputs to the &lt;code&gt;Subject&lt;/code&gt;, driving the &lt;code&gt;ProcessInput&lt;/code&gt; logic.&lt;/p&gt;
&lt;h2&gt;Making Your Spout Reactive&lt;/h2&gt;
&lt;p&gt;Spouts are a bit tougher to make Reactive, primarily because even though
it's just an Emitter it has no control over when it emits. Storm drives
it through calls to &lt;code&gt;NextTuple&lt;/code&gt;, which for good or ill is how Storm does
flow-control. We should honor Storm's wishes and not just flood the
stream by emitting everything the first time &lt;code&gt;NextTuple&lt;/code&gt; is called.
 There are a couple of options for this throttling: for instance, we
could internally queue up our outputs and then dequeue when asked in
&lt;code&gt;NextTuple&lt;/code&gt;.  However, going this route we might as well skip Reactive
since it really provides no value - and that's a perfectly acceptable
solution! It just doesn't make for much of a blog post, so let's dig a
little.&lt;/p&gt;
&lt;p&gt;The other option is to put in some sort of gate. Every time the
&lt;code&gt;Observable&lt;/code&gt; wants to produce a value it hits the gate, and if it has
capacity it goes through; every time &lt;code&gt;NextTuple&lt;/code&gt; is called it adds a
unit of capacity to the gate.  In C#, the way we implement this sort of
logic is with a &lt;code&gt;SemaphoreSlim&lt;/code&gt; - we &lt;code&gt;Wait()&lt;/code&gt; on the capacity of the
gate, and we &lt;code&gt;Release()&lt;/code&gt; more capacity when asked.  Also since we're
going Reactive anyway, let's turn the Ack/Fail calls into an
&lt;code&gt;Observable&lt;/code&gt; people can subscribe to.  Putting this all together results
in the class below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReactiveSpoutBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISCPSpout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ReactiveSpoutBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MapSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Credits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SemaphoreSlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateOutput&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Credits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_STREAM_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConvertOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AckFailMessages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnCompleted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AckFailMessages&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SemaphoreSlim&lt;/span&gt; &lt;span class="n"&gt;Credits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MapSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Values&lt;/span&gt; &lt;span class="nf"&gt;ConvertOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TOut&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GenerateOutput&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;NextTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Credits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;seqId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AckFailMessages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seqId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;seqId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AckFailMessages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seqId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice in particular the call to &lt;code&gt;Task.Run&lt;/code&gt; when starting up the
subscription to &lt;code&gt;GenerateOutput&lt;/code&gt; - this is just hedging our bets, making
sure that &lt;code&gt;NextTuple&lt;/code&gt; isn't trying to Release on the same thread that
the emitter is Waiting on and avoiding potential deadlock situations.
 Also notice that akin to the Bolt, we've left the children to implement
just a few tightly-focused methods: &lt;code&gt;MapSchema&lt;/code&gt; for telling the Context
about the output schema, &lt;code&gt;ConvertOutput&lt;/code&gt; for turning the friendly output
type into the expected &lt;code&gt;Values&lt;/code&gt; type, and &lt;code&gt;GenerateOutput&lt;/code&gt; which does
the real heavy lifting.&lt;/p&gt;
&lt;h2&gt;A Simple Moving Average Example&lt;/h2&gt;
&lt;p&gt;I know this is a lot of code and you may not really understand how it
all fits together until you see it in action, so let's code up a simple
example that turns a stream of integers into a moving average of the
last two entries.  First let's code up the spout. I'll leave out the
MapSchema and ConvertOutput calls because those are trivial (and all of
the source is &lt;a href="https://github.com/noodlefrenzy/ReactiveStorm"&gt;on
GitHub&lt;/a&gt;if you're
interested) and focus on the meat of emitting a sequence of integers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RxIntSpout&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ReactiveSpoutBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RxIntSpout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MaxValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GenerateOutput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxValue&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ... some other stuff, elided ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wow, that's pretty simple.  Okay, now that that bit's complete, what
does it look like from the Bolt side - taking those integers and
emitting doubles of the 2-period moving average?  Once again, I've
removed some of the extraneous code (MapSchemas, ConvertInput/Output)
and focused on the core:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RxMovingAverageBolt&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ReactiveBoltBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RxMovingAverageBolt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltOutput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProcessInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IObservable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BoltInput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Converted&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Converted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0} + {1} / 2 = {2}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Converted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Converted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BoltOutput&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// ... some other stuff, elided ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, that looks pretty simple as well.  The only tricky bit there is
the &lt;code&gt;Zip&lt;/code&gt; call where we basically join the incoming input to itself,
skipping the first value and resulting in pairs of values to be
averaged.  Even that's pretty simple to understand though.  Looks like
the conversion to Reactive is making the actual logic in the spouts and
bolts easier to understand and more separable, which was my goal in the
first place.&lt;/p&gt;
&lt;h2&gt;Testing Locally&lt;/h2&gt;
&lt;p&gt;Rather than set up a full Storm cluster just to test this out, you can
drive the Spouts and Bolts from within your main method fairly easily.
 First, you need to switch your project from a Class Library to a
Console Application - that's a simple drop-down on
Project-&gt;Properties-&gt;Application-&gt;Output type.  Now you can actually
run your code, so create a Main to exercise your Spout and then your
Bolt - it's not quite end-to-end since in reality there will be
interplay between the two, but it's close enough for testing purposes.
 The code to do so is below, and basically just creates instances of
each with their own local context, runs them, and stores off the
results.  The Bolt reads from the results of the Spout via the file
system - not necessary, but allows troubleshooting if intermediate
stages fail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Let&amp;#39;s watch the trace messages.&lt;/span&gt;
&lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listeners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConsoleTraceListener&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;SCPRuntime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;spoutCtx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;seqSpout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RxIntSpout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spoutCtx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ??? seqSpout has more values ??? */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;seqSpout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;spoutCtx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMsgQueueToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;seq.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rxCtx&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LocalContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rxBolt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RxMovingAverageBolt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rxCtx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;rxCtx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFromFileToMsgQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;seq.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;rxCtx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RecvFromMsgQueue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rxBolt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;rxCtx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMsgQueueToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rx.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty straightforward, but note the confusion in the while loop?  Since
we're pumping the Spout ourselves and need to finish when it's done with
its data, we need some way of knowing when that is.  We can add a simple
flag value to the &lt;code&gt;ReactiveSpoutBase&lt;/code&gt; to track that for us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ReactiveSpoutBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateOutput&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* elided */&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* elided */&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraceInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Spout shutting down.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FinishedTransmitting&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AckFailMessages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnCompleted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;FinishedTransmitting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and alter the while loop appropriately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;seqSpout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FinishedTransmitting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;seqSpout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You now have something you can run locally, which should produce output
like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ReactiveStorm.vshost.exe Information: 0 : 0 + 1 / 2 = 0.5
ReactiveStorm.vshost.exe Information: 0 : 1 + 2 / 2 = 1.5
ReactiveStorm.vshost.exe Information: 0 : 2 + 3 / 2 = 2.5
ReactiveStorm.vshost.exe Information: 0 : 3 + 4 / 2 = 3.5
ReactiveStorm.vshost.exe Information: 0 : 4 + 5 / 2 = 4.5
ReactiveStorm.vshost.exe Information: 0 : 5 + 6 / 2 = 5.5
ReactiveStorm.vshost.exe Information: 0 : 6 + 7 / 2 = 6.5
ReactiveStorm.vshost.exe Information: 0 : 7 + 8 / 2 = 7.5
ReactiveStorm.vshost.exe Information: 0 : 8 + 9 / 2 = 8.5
ReactiveStorm.vshost.exe Information: 0 : 9 + 10 / 2 = 9.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Apache Storm is a promising pipeline processing technology, and with
HDInsight bringing it onto the Azure platform, deploying it yourself is
trivial.  However, writing all of the Spouts and Bolts can mean rewiring
your intuition a bit and mixing your business logic with Storm
internals.  Hopefully, by using Reactive and the code above, you can
make that process easier and provide better isolation between the two,
in a mental model that maps a bit better to what you're trying to
accomplish.  All of the code above is &lt;a href="https://github.com/noodlefrenzy/ReactiveStorm"&gt;published on
GitHub&lt;/a&gt;- feel free to
clone it, modify it to your heart's content, and if you find any issues
file them or submit a PR.  I hope I've helped, and comments, as always,
are welcome.&lt;/p&gt;</content><category term=".NET"></category><category term="Apache Storm"></category><category term="C#"></category><category term="Distributed Systems"></category><category term="Reactive"></category></entry><entry><title>Time-Series Processing in Azure ML Using Python</title><link href="http://www.mikelanzetta.com/time-series-processing-in-azure-ml-using-python.html" rel="alternate"></link><published>2015-03-14T22:09:00-07:00</published><updated>2015-03-14T22:09:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-03-14:/time-series-processing-in-azure-ml-using-python.html</id><summary type="html">&lt;p&gt;With the general availability of Azure Machine Learning, the team has
added a ton of new features.  Perhaps the one I'm most excited about is
the addition of a general "Execute Python Script" module.  I've been
meaning to brush up on my Python skills, and with the inclusion of
Pandas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the general availability of Azure Machine Learning, the team has
added a ton of new features.  Perhaps the one I'm most excited about is
the addition of a general "Execute Python Script" module.  I've been
meaning to brush up on my Python skills, and with the inclusion of
Pandas and Numpy it opens up a lot of data processing options -
particularly for time-series data.  There are still a few quirks when
using it though, so similar to my previous post on &lt;a href="http://www.mikelanzetta.com/2015/01/data-cleaning-with-azureml-and-r-dates/"&gt;coping with dates in
AzureML's R
module&lt;/a&gt;, I
thought I'd outline those quirks in a post.  I'll be doing so in a
step-by-step fashion so hopefully I can show how you'd go about
diagnosing these sorts of quirks yourself.&lt;/p&gt;
&lt;p&gt;One of the things I love about Python's Pandas library is its &lt;a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html"&gt;fantastic
support for
time-series&lt;/a&gt;
data manipulation.  The ability to normalize dates, roll up into
aggregates, and easily slice ranges is phenomenal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="execute_python" src="http://www.mikelanzetta.com/images/execute_python.png"&gt;&lt;/p&gt;
&lt;p&gt;To get started, we'll pull in some time-series data, and mess around
with it in the Python module - set up an experiment with a Reader
connected to an "Execute Python Script" module.&lt;/p&gt;
&lt;p&gt;The Reader can pull data directly from plenty of different sources, but
for this time-series example, let's use finance data from Yahoo's ichart
API.  We'll pull data for a single stock's history - let's use an
exasperating one like
TSLA: http://ichart.finance.yahoo.com/table.csv?s=TSLA.  This returns
data as a CSV with a header row, leading to the final Reader
configuration
below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ichart_reader_config" src="http://www.mikelanzetta.com/images/ichart_reader_config.png"&gt;&lt;/p&gt;
&lt;p&gt;Once we have the data coming in, it's time to do something fun with it.
 Let's take a first crack at it - we'll take the input and turn it into
monthly means.  In regular Python with Pandas, that looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;tsla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://ichart.finance.yahoo.com/table.csv?s=TSLA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_dates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tsla_monthly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tsla&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is why I love Pandas - that code is clean, easy to read, and easy
to write (at least with intellisense/completion).  Let's assume that
resample would work the same on the data from the reader, and try it in
the module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;azureml_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dfMonthly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Boom!  Well, that didn't work:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;File "C:\pyhome\lib\site-packages\pandas\tseries\resample.py", line 101, in resample&lt;/code&gt;\
 &lt;code&gt;raise TypeError('Only valid with DatetimeIndex or PeriodIndex')&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we don't have a &lt;code&gt;DatetimeIndex&lt;/code&gt;- must not be importing an index,
we'll need to make our own
using &lt;code&gt;dataframe1.set_index('Date', inplace=True).&lt;/code&gt;  Hmm, same error.
 Is Azure ML just not parsing the dates?  Let's print things out and see
what we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;azureml_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;gives us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
Int64Index: 1185 entries, 0 to 1184
Data columns (total 7 columns):
Date         1185 non-null float64
Open         1185 non-null float64
High         1185 non-null float64
Low          1185 non-null float64
Close        1185 non-null float64
Volume       1185 non-null int32
Adj Close    1185 non-null float64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice &lt;code&gt;Date&lt;/code&gt; is listed as a &lt;code&gt;float64&lt;/code&gt;.  That's exciting news!  Why is
it a float64?  I'd expect it to be either a Date, a Datetime, or maybe a
String - but a Float?  And why did I not get the &lt;code&gt;head()&lt;/code&gt; output?  Let's
solve the second part first - I'm going to guess it's an issue with
buffering, since I've seen similar issues in the past (the distant
past - C++ streams - but still).  Let's just print a bunch of spaces and
hope for the best: &lt;code&gt;print(' ' * 4096)&lt;/code&gt;.  Paydirt!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         Date    Open    High     Low   Close   Volume  Adj Close
0  1426204800  188.95  191.75  187.32  188.68  5378600     188.68
1  1426118400  193.75  194.45  189.75  191.07  4123500     191.07
2  1426032000  191.15  196.18  191.01  193.74  4950300     193.74
3  1425945600  188.46  193.50  187.60  190.32  5530900     190.32
4  1425859200  194.39  194.49  188.25  190.88  6717300     190.88
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I notice two things immediately - we were right about the lack of an
index and that float actually looks like a long, in particular a
timestamp.  Let's guess this is related to Posix timestamps, and add a
conversion before our set_index call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;azureml_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dfMonthly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="orig_output" src="http://www.mikelanzetta.com/images/orig_output.png"&gt; &lt;/p&gt;
&lt;p&gt;This worked!  However, looking at the output there is no Date column - so I'm
guessing that in the same way the input data didn't pull the first
column as an index, the output doesn't write out the index either.
 We'll need to turn our index back into a
column: &lt;code&gt;dfMonthly.reset_index(level=0, inplace=True)&lt;/code&gt;.  Finally, all
don... wha?!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Exception: Type unsupported &amp;lt;class 'pandas.tslib.Timestamp'&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Crap.  Looks like the output from the Python module can't handle
Timestamps.  Well, we really only want the date, and strings should be
fine, so lets just convert these Timestamps to strings and hope that
downstream modules can handle those effectively, and in the meantime
I'll let the AzureML team know.  The final code looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;azureml_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataframe1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dfMonthly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dfMonthly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this helps!  If you find any other quirks let me know - I'll
definitely let the AzureML team know, and add the workarounds to my
list.&lt;/p&gt;</content><category term="Azure"></category><category term="Machine Learning"></category><category term="ML"></category><category term="Python"></category><category term="Time Series"></category></entry><entry><title>Collaboration on Open-Source Node Projects</title><link href="http://www.mikelanzetta.com/collaboration-on-open-source-node-projects.html" rel="alternate"></link><published>2015-02-11T11:38:00-08:00</published><updated>2015-02-11T11:38:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-02-11:/collaboration-on-open-source-node-projects.html</id><summary type="html">&lt;p&gt;I've been working on a &lt;a href="https://github.com/noodlefrenzy/node-amqp-1-0"&gt;Node-based AMQP
1.0&lt;/a&gt; library and
&lt;a href="https://github.com/noodlefrenzy/node-sbus-amqp10"&gt;wrappers&lt;/a&gt; that allow
it to talk ServiceBus and EventHub easily with a colleague of mine at
work, and it's taught me many things about doing Node.js
development, collaborating on GitHub, and publishing on npmjs.  The
documentation is mostly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working on a &lt;a href="https://github.com/noodlefrenzy/node-amqp-1-0"&gt;Node-based AMQP
1.0&lt;/a&gt; library and
&lt;a href="https://github.com/noodlefrenzy/node-sbus-amqp10"&gt;wrappers&lt;/a&gt; that allow
it to talk ServiceBus and EventHub easily with a colleague of mine at
work, and it's taught me many things about doing Node.js
development, collaborating on GitHub, and publishing on npmjs.  The
documentation is mostly out there but it's a bit scattered, so I wanted
to gather it together into a common place to allow myself and others to
find it easily.&lt;/p&gt;
&lt;h2&gt;Starting a Project&lt;/h2&gt;
&lt;p&gt;There are a few different ways to start, but all involve getting GitHub,
Node, and npm installed on your machine.  For me, as a Windows user,
this means using &lt;a href="https://chocolatey.org/" title="Get Chocolatey"&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt; choco install git&lt;/span&gt;
C&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt; choco install nodejs&lt;/span&gt;
C&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;&amp;gt; choco install npm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if you're not a Windows user, install git &lt;a href="http://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;using the directions
on
git-scm&lt;/a&gt;,
and &lt;a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager"&gt;node/npm
using apt-get&lt;/a&gt;or
your package manager of choice.&lt;/p&gt;
&lt;p&gt;Some people choose to create their projects by using &lt;code&gt;npm init&lt;/code&gt;, but I
prefer to &lt;a href="https://help.github.com/articles/create-a-repo/" title="Create a Repository"&gt;create my new project on GitHub
first&lt;/a&gt;,
then go to where I want it on my local box and &lt;code&gt;git clone&lt;/code&gt; it there.
 This makes it easy to automatically include an appropriate .gitignore,
README.md, and LICENSE file.  Now that you have your local copy, you
can &lt;code&gt;npm init&lt;/code&gt; to get a &lt;code&gt;package.json&lt;/code&gt; set up.&lt;/p&gt;
&lt;p&gt;As a side note - you should consider adopting a coding standard for your
project.  It'll make it far easier for others to contribute in a common
style, and it'll keep your code looking clean and consistent.  One way
to codify this is to include an &lt;code&gt;.editorconfig&lt;/code&gt; file - this
quasi-standard is a &lt;a href="http://editorconfig.org/"&gt;simple configuration
format&lt;/a&gt; for codifying much of the standard
coding style choices you make, and with plugins for &lt;a href="https://github.com/editorconfig/editorconfig-visualstudio#readme"&gt;Visual
Studio&lt;/a&gt;
and
&lt;a href="https://github.com/JetBrains/intellij-community/tree/master/plugins/editorconfig"&gt;WebStorm/IntelliJ&lt;/a&gt;,
makes keeping code consistent fairly simple.&lt;/p&gt;
&lt;h2&gt;Developing Your Node Module&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This is left as an exercise to the reader.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Setting Up Continuous Integration&lt;/h2&gt;
&lt;p&gt;Obviously, in the step above, you developed a robust suite of unit
tests, likely using &lt;a href="http://mochajs.org/"&gt;Mocha&lt;/a&gt;and
&lt;a href="https://github.com/shouldjs/should.js"&gt;Should&lt;/a&gt;.  Now you should turn
those tests into a continuous integration step via
&lt;a href="http://travis-ci.org/"&gt;Travis&lt;/a&gt;(free for OSS projects).  Simply &lt;a href="http://travis-ci.org/"&gt;go
there&lt;/a&gt;and sign in via GitHub - your repositories
will show up and you'll be able to turn on the ones you want.  You can
easily set up a &lt;code&gt;.travis.yml&lt;/code&gt; file in your repository to guide the CI
build - here's a simple one for my project that uses the &lt;code&gt;npm test&lt;/code&gt; step
to perform the linting and testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.12&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.10&amp;quot;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cache&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;directories&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_modules&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since this was a simple module, npm was adequate for my build/test needs
and I didn't need to resort to gulp or grunt (Keith Cirkel &lt;a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/"&gt;has some
info&lt;/a&gt;on
the how's and why's for that decision - I'm not totally bought-in, but
for simple projects it makes sense).  My package.json to make that
happen looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;jshint&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^2.5.11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^1.21.4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;should&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^4.0.4&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;pretest&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jshint lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mocha test&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can rest assured that Travis is building your code on every
push, and you can advertise that fact in your readme.  I also use the
&lt;a href="https://david-dm.org/"&gt;David dependency manager&lt;/a&gt; to ensure that my
dependencies don't swing too far out of date, and advertise that as
well.  Adding these to your README.md is as simple as (replacing &lt;em&gt;user&lt;/em&gt;
and &lt;em&gt;module&lt;/em&gt; as appropriate):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//secure.travis-ci.org/user/module.png?branch=master)](https://travis-ci.org/user/module)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dependency&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//david-dm.org/user/module.png)](https://david-dm.org/user/module)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Publishing to NPM&lt;/h2&gt;
&lt;p&gt;Once you've developed your amazing Node.js module, you'll want to
publish it for all the world to see.  To do so, you use &lt;code&gt;npm publish&lt;/code&gt;,
but beware.  Read&lt;a href="https://docs.npmjs.com/misc/developers" title="NPM Developer Guide"&gt;their developer
guide&lt;/a&gt;,
and be careful to note &lt;em&gt;this phrase&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that pretty much &lt;strong&gt;everything in that folder will be exposed&lt;/strong&gt; by
default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I first published my module, I failed to note that phrase, and
published log files, the .idea folder, and a bunch of other garbage.
 Since I'm paranoid, the way I manage this now is to have a shadow
directory side-by-side with my development folder called "publish" - I
&lt;code&gt;git clone/git pull&lt;/code&gt; into that when I'm ready to publish, bump the
versions from there, and &lt;code&gt;npm publish&lt;/code&gt; with confidence.&lt;/p&gt;
&lt;h2&gt;Working With Others&lt;/h2&gt;
&lt;p&gt;You've forked someone's project, worked on it, and now want to ensure
that you're up to date with their branch.  GitHub has some &lt;a href="https://help.github.com/articles/syncing-a-fork/" title="Syncing a Fork on GitHub"&gt;great
documentation&lt;/a&gt;
on how to make sure you've merged their latest changes - basically you
need to ensure you've mapped the upstream remote, and then fetch it and
merge it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add upstream https://github.com/my/clone/uri
git fetch upstream
git merge upstream/master
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run into any merge issues, &lt;a href="http://stackoverflow.com/questions/161813/fix-merge-conflicts-in-git" title="Fixing Merge Conflicts"&gt;this StackOverflow
post&lt;/a&gt;
has some advice, and there are some decent merge tools out there.  I
recommend Beyond Compare if you have the scratch, but otherwise
&lt;a href="http://kdiff3.sourceforge.net/"&gt;kdiff3&lt;/a&gt;runs on just about everything.&lt;/p&gt;
&lt;p&gt;When others submit pull requests to your module, you'll get notified by
GitHub and can then go deal with the PRs.  For example, I've submitted
this change to &lt;code&gt;node-sbus&lt;/code&gt; from my fork to the originator.  Since I'm a
contributor on the upstream repo, the view I see when I go to the Pull
Requests tab on that repo looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="merge_pr" src="http://www.mikelanzetta.com/images/merge_pr.png"&gt;&lt;/p&gt;
&lt;p&gt;Note that I can automatically merge this PR, but since I have Travis set
up it's telling me that it hasn't yet passed the build.  I should wait
until I get a green light on that before considering accepting the PR -
in the meantime I can click on the one change to go to a diff view and
review it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="pr_diff" src="http://www.mikelanzetta.com/images/pr_diff_sm.png"&gt;&lt;/p&gt;
&lt;p&gt;Looks good to me, and the Travis build has now passed (not strictly
necessary since this was just a content change), so I accept the PR.&lt;/p&gt;
&lt;h2&gt;Multiple Owners, Multiple Publishers&lt;/h2&gt;
&lt;p&gt;Now someone has forked your module, proved themselves, and you want to
add them as a collaborator.  You'll need to add them in both GitHub and
NPM in order to make them a full peer for pushing/handling PRs and
publishing.  For GitHub, you'll add them as a collaborator to your
project using Settings-&gt;Collaborators:&lt;/p&gt;
&lt;p&gt;&lt;img alt="github_collaborators" src="http://www.mikelanzetta.com/images/github_collaborators.png"&gt;&lt;/p&gt;
&lt;p&gt;And for NPM you'll need to &lt;a href="https://docs.npmjs.com/cli/owner" title="NPM Owner"&gt;add the user as an
owner&lt;/a&gt;.  This should allow
both of you to push changes, integrate pull requests, and publish new
versions.&lt;/p&gt;
&lt;p&gt;Hopefully this has been helpful - let me know if I've missed any basics,
and if you have any other suggestions or ideas for collaborating on OSS
projects.&lt;/p&gt;</content><category term="GitHub"></category><category term="Node"></category><category term="NPM"></category></entry><entry><title>Node.js and .NET Talking EventHub, Together</title><link href="http://www.mikelanzetta.com/node-js-and-net-talking-eventhub-together.html" rel="alternate"></link><published>2015-01-28T13:48:00-08:00</published><updated>2015-01-28T13:48:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-01-28:/node-js-and-net-talking-eventhub-together.html</id><summary type="html">&lt;p&gt;Over the past few months, I've been working on &lt;a href="https://github.com/noodlefrenzy/node-amqp10"&gt;a Node.js client for
AMQP 1.0&lt;/a&gt; - the &lt;em&gt;lingua
franca&lt;/em&gt; of Azure's EventHub and ServiceBus.  Well, the EventHub support
is just about complete, and ServiceBus Topics and Queues should follow
shortly thereafter (it's just me working on it, so it's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few months, I've been working on &lt;a href="https://github.com/noodlefrenzy/node-amqp10"&gt;a Node.js client for
AMQP 1.0&lt;/a&gt; - the &lt;em&gt;lingua
franca&lt;/em&gt; of Azure's EventHub and ServiceBus.  Well, the EventHub support
is just about complete, and ServiceBus Topics and Queues should follow
shortly thereafter (it's just me working on it, so it's slow
going - *hint* PR's are welcome *hint*), so it seemed like a good
time to try to determine what it would take to interoperate between
Node.js and .NET using EventHub.  Turns out it's actually pretty simple.&lt;/p&gt;
&lt;h2&gt;AMQP Messaging Basics&lt;/h2&gt;
&lt;p&gt;In order to understand the details, it's helpful if you understand how a
message is transmitted using AMQP first.  The message is sent using
a &lt;code&gt;Transfer&lt;/code&gt; frame, with the body containing both the message payload as
well as any annotations.  In AMQP-speak, the body can be one of three
types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;amqp-sequence&lt;/code&gt;- a list of AMQP-encoded values&lt;/li&gt;
&lt;li&gt;&lt;code&gt;amqp-value&lt;/code&gt; - a single AMQP-encoded value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; - a blob of binary data in whatever format your little heart
    desires&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Message annotations, if any, prefix the payload and are an AMQP map with
Symbol (&lt;code&gt;0xA3/0xB3&lt;/code&gt; if you're speaking hex) or ulong keys and arbitrary
AMQP-encoded values.&lt;/p&gt;
&lt;h2&gt;Messages in EventHub&lt;/h2&gt;
&lt;p&gt;When using EventHub in .NET with the &lt;code&gt;EventHubClient&lt;/code&gt;, you encode data
by passing in an instance of an &lt;code&gt;XmlObjectSerializer&lt;/code&gt; into &lt;code&gt;EventData&lt;/code&gt;.
 It uses this to convert your payload object into a binary blob and pass
it using the &lt;code&gt;data&lt;/code&gt; payload type I mentioned above.
 Now &lt;code&gt;XmlObjectSerializer&lt;/code&gt; is a terribly named serializer interface, one
implementation of which is &lt;code&gt;DataContractJsonSerializer&lt;/code&gt; (are you
beginning to see why the name is bad?).  This led me to believe that I
could use this on the .NET side to encode a &lt;code&gt;DataContract&lt;/code&gt; object into
JSON and then decode it on the Node.js side easily - an assumption that
turns out to be true.  Symmetrically, I believed I could encode a JSON
string into a binary UTF8 buffer on the Node side and pass it to .NET
where it would then be easy to decode - that also turned out to be true.&lt;/p&gt;
&lt;p&gt;EventHub also includes a few annotations with every message, letting
receivers know what the message's offset is, its timestamp and a few
other details, as well as accepting a partition-key annotation for
incoming messages.  I've altered my API to ensure I can support those
easily, without sacrificing generality for broader AMQP server cases.&lt;/p&gt;
&lt;h2&gt;Sending a Message from .NET&lt;/h2&gt;
&lt;p&gt;You can send a message from .NET by using the &lt;code&gt;EventData&lt;/code&gt; type and
passing it to an &lt;code&gt;EventHubClient&lt;/code&gt; instance's &lt;code&gt;Send&lt;/code&gt; method.  To send a
JSON-based payload as I described above, you first need to define
a &lt;code&gt;DataContract&lt;/code&gt; object like my &lt;code&gt;BasicData&lt;/code&gt; here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[DataContract]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasicData&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;    [DataMember]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DataString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;    [DataMember]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then send it through your &lt;code&gt;EventHubClient&lt;/code&gt; using
a &lt;code&gt;DataContractJsonSerializer&lt;/code&gt; as my &lt;code&gt;Sender&lt;/code&gt; class below illustrates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sender&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;EventHubClient&lt;/span&gt; &lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Sender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;eventHubPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateFromConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventHubPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasicData&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;partitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataContractJsonSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasicData&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partitionKey&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partitionKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The connection string you use above should be the SAS connection string
from your Event Hub - one with Send permission.&lt;/p&gt;
&lt;h2&gt;Receiving a Message from Node&lt;/h2&gt;
&lt;p&gt;To receive the message you just sent, you'll need to do more than
just say "connect" - EventHub doles messages out to different partitions
to do load balancing, and you need to read from each one in order to
find the message you just sent.  The PartitionKey you set above is a
proxy key that gets hashed into an actual partition, allowing you to
control load-balancing and group deliveries without having to see how
the sausage is made.  On .NET, this process is taken care of for you
(see below), but in Node you'll need to know how many partitions up
front and connect to them all.  My colleague and I are trying to change
that with &lt;a href="https://github.com/jmspring/node-sbus"&gt;our node-sbus module&lt;/a&gt;,
but it's not quite there yet.&lt;/p&gt;
&lt;p&gt;So, using my &lt;code&gt;amqp10&lt;/code&gt; module, how would you connect to a 16-partition
EventHub to read the message you just sent?  Well, the following code
snippet (taken mostly from &lt;code&gt;simple_eventhub_test.js&lt;/code&gt; in that module)
demonstrates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AMQPClient&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amqp10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;amqps://&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sasName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sasKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;serviceBusHost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sendAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;recvAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventHubName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/ConsumerGroups/$default/Partitions/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AMQPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AMQPClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EventHubPolicy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numPartitions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;curIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;curRcvAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recvAddr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curIdx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curRcvAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ERROR: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Recv(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curIdx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;): &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Annotations:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you'll see the resulting message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DataString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;From .NET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DataValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Annotations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Int64&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="nx"&gt;octets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x-opt-sequence-number&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;x-opt-offset&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;120&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;x-opt-enqueued-time&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Int64&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1421795188160&lt;/span&gt; &lt;span class="nx"&gt;octets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="nx"&gt;c0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;x-opt-partition-key&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PK5&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note the annotations - I'm using the
&lt;a href="https://github.com/broofa/node-int64"&gt;node-int64&lt;/a&gt; module to ensure the
full fidelity timestamp is preserved.)&lt;/p&gt;
&lt;p&gt;In the code above, you'll notice that I've automatically parsed the
UTF8-encoded JSON payload in the binary stream, by using a smart decoder
in the &lt;code&gt;AMQPClient.policies.EventHubPolicy&lt;/code&gt; that you provided when you
instantiated the AMQPClient.  I mention this because you could write
your own encoders and decoders to do whatever processing you need to do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;receiverLinkPolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;bodyStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;bodyStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// No clue.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bodyStr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Sending from Node&lt;/h2&gt;
&lt;p&gt;Now to reverse the process!  Sending from Node is easier than sending
from .NET, primarily because of the work I've done on making sure that
the encode/decode logic is set up to make the process easy, as part of
the &lt;code&gt;AMQPClient.policies.EventHubPolicy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;senderLinkPolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;bodyStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So in order to send, you just connect and then send a JSON object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AMQPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AMQPClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;policies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EventHubPolicy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DataString&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;From Node&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DataValue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msgVal&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;sendAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x-opt-partition-key&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pk1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setting the partition key isn't quite as simple as in .NET, but it's
pretty easy - you just set the appropriate value in the annotations
map.  EventHub uses an AMQP message annotation with the symbol
key &lt;code&gt;x-opt-partition-key&lt;/code&gt; to delineate the partition key - my API does
the hard work of turning your object into that AMQP gunk.&lt;/p&gt;
&lt;h2&gt;Receiving Messages from .NET&lt;/h2&gt;
&lt;p&gt;To receive these messages on the .NET side, we're using the
EventProcessorHost - the oddly named processor library that not only
reads from all EventHub partitions, but stores offset data into blob
storage so it can pick up where it left off (or collaborate across
hosts).  The logic here is more complex than in the sending case,
because we have to implement an instance of &lt;code&gt;IEventProcessor&lt;/code&gt; to process
incoming messages.  I've done a rather simple implementation that just
logs to the console and occasionally writes a checkpoint snapshot of the
offsets to blob storage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleEventProcessor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IEventProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt; &lt;span class="n"&gt;TimeBetweenSnapshots&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;partitionContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Stopwatch&lt;/span&gt; &lt;span class="n"&gt;checkpointStopwatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SemaphoreSlim&lt;/span&gt; &lt;span class="n"&gt;checkpointLock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SemaphoreSlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;CloseAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CloseReason&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Processor closing.  Partition &amp;#39;{0}&amp;#39;, {1}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;CloseReason&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shutdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckpointAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;OpenAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Processor opening.  Partition &amp;#39;{0}&amp;#39;, Offset &amp;#39;{1}&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partitionContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkpointStopwatch&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stopwatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartNew&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;ProcessEventsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PartitionContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventData&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DataContractJsonSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasicData&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;eventData&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eventData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eventData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBody&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BasicData&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Partition &amp;#39;{0}&amp;#39;: Received PK: {1}, DataString: &amp;#39;{2}&amp;#39;, DataValue: {3}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartitionKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkpointLock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkpointStopwatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Elapsed&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TimeBetweenSnapshots&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckpointAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkpointStopwatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkpointLock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use the &lt;code&gt;SemaphoreSlim&lt;/code&gt; to allow me to gatekeep access to the
stopwatch without forcing a synchronous lock.  Using this processor, I
then just register it for a given hub and consumer group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Receiver&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;blobConnectionString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;EventHubClient&lt;/span&gt; &lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;EventProcessorHost&lt;/span&gt; &lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;blobConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;eventHubPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blobConnectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blobConnectionString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateFromConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eventHubPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;receiverName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;consumerGroup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consumerGroupName&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetDefaultConsumerGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetConsumerGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerGroupName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnregisterEventProcessorAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;receiverName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GroupName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serviceBusConnectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blobConnectionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterEventProcessorAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SimpleEventProcessor&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region IDisposable Support&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;disposedValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// To detect redundant calls&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;disposing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;disposedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disposing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnregisterEventProcessorAsync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventProcessorHost&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;disposedValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will receive all messages sent since the last time the code was
run, storing information about the offsets for the different partitions
in blob storage.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I realize there is a lot of code in this post, but there's not a lot of
boilerplate, and it's pretty easy to follow.  Getting .NET and Node
to interoperate and exchange data via EventHub, at high scale, is pretty
easy and opens up some great possibilities in the area of IoT, with
small Node-capable devices or hubs writing to EventHub and C# or
F#-based workers processing EventHub data-streams computing aggregates,
doing predictive analytics, or driving future work.  I hope I've fired
up some of you to play around with EventHub - I'd love people to use my
module, and if you have any feedback please let me know, either through
comments here or through pull requests :)  Happy eventing!&lt;/p&gt;</content><category term=".NET"></category><category term="AMQP"></category><category term="Azure"></category><category term="C#"></category><category term="EventHub"></category><category term="Node"></category></entry><entry><title>Data Cleaning with AzureML and R: Dates</title><link href="http://www.mikelanzetta.com/data-cleaning-with-azureml-and-r-dates.html" rel="alternate"></link><published>2015-01-19T17:42:00-08:00</published><updated>2015-01-19T17:42:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-01-19:/data-cleaning-with-azureml-and-r-dates.html</id><summary type="html">&lt;p&gt;I've been working with
&lt;a href="http://azure.microsoft.com/en-us/services/machine-learning/" title="Azure Machine Learning"&gt;AzureML&lt;/a&gt;for
a while now, and it's fantastic.  Having done ML in a few other
platforms over the years, the ease with which I can put together a few
regression models, do parameter-sweeps, and compare results is just
groundbreaking.&lt;/p&gt;
&lt;p&gt;However, one area where it isn't quite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working with
&lt;a href="http://azure.microsoft.com/en-us/services/machine-learning/" title="Azure Machine Learning"&gt;AzureML&lt;/a&gt;for
a while now, and it's fantastic.  Having done ML in a few other
platforms over the years, the ease with which I can put together a few
regression models, do parameter-sweeps, and compare results is just
groundbreaking.&lt;/p&gt;
&lt;p&gt;However, one area where it isn't quite as groundbreaking is data
cleaning.  Right now, there are only a few options, and a lot of the
time you wind up resorting to using the "Execute R Script" module.  This
is the first in a many-part series on data processing, cleaning, and
filtering using Azure ML - this one focused on a problem I just ran into
with date processing.  When you use the "Execute R Script" module it
attempts to map the incoming data sets into R data types, and then
attempts to map the outgoing data-frame (must be a data frame) into data
types for downstream modules.  This mapping is often where the problem
begins - sometimes it fails to convert incoming data to the types you
expect, and on output only a limited set of R types are supported.&lt;/p&gt;
&lt;p&gt;Recently, I had a data-set with a column of date-times in the following
format: "&lt;code&gt;2014:01:21 17:02:00&lt;/code&gt;".  This is obviously a date to our eyes,
but the system might not see it that way since it's not in a standard
format.  Once I send it into R, how can I figure out what the data-type
converter has done?  The easiest way is to send the classes of your
incoming data to the R output, using the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dataset1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; maml.mapInputPort&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

data.set &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dataset1&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;class&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

maml.mapOutputPort&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data.set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I did this, and saw that my date was actually of type &lt;code&gt;character&lt;/code&gt; - if
it had been in a standard format, it would've been auto-converted
to &lt;code&gt;POSIXct&lt;/code&gt;.  So it fell to me to convert it - I wanted to convert it
to a date, and then pull out some potential features (date (minus time),
day of week, hour of day), so I wrote the following (the column is
&lt;code&gt;weirdDateTime&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;weirdDateTime&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y:%m:%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;asDate &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;dayOfWeek &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;weekdays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDate&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;hourOfDay &lt;span class="o"&gt;=&lt;/span&gt; data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime&lt;span class="o"&gt;$&lt;/span&gt;hour&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran this through RStudio to make sure it worked (always a wise move,
don't waste your compute cycles until you need them), and it worked
fine, so I sent it through AzureML... BOOM!  The R module failed, and
gave me a bunch of output, with the important pieces right here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ModuleOutput] Warning messages:
[ModuleOutput] 
[ModuleOutput] 1: In strptime(data.set$weirdDateTime, &amp;quot;%Y:%m:%d %H:%M:%S&amp;quot;) :
[ModuleOutput] 
[ModuleOutput]   unable to identify current timezone &amp;#39;C&amp;#39;:
[ModuleOutput] 
[ModuleOutput] please set environment variable &amp;#39;TZ&amp;#39;
[ModuleOutput] 
[ModuleOutput] 2: In strptime(data.set$weirdDateTime, &amp;quot;%Y:%m:%d %H:%M:%S&amp;quot;) :
[ModuleOutput] 
[ModuleOutput]   unknown timezone &amp;#39;localtime&amp;#39;
[ModuleOutput] 
[ModuleOutput] DllModuleHost Stop: 1 : DllModuleMethod::Execute. Duration: 00:00:04.6139721
[ModuleOutput] DllModuleHost Error: 1 : Program::Main encountered fatal exception: Microsoft.Analytics.Exceptions.ErrorMapping+ModuleException: Error 1000: RPackage library exception: Failed to convert RObject to DataSet ---&amp;gt; Microsoft.Analytics.Modules.R.ErrorHandling.RException: Failed to convert RObject to DataSet ---&amp;gt; Microsoft.Analytics.Modules.R.ErrorHandling.RNotImplementedException: Parser is not implemented for the Microsoft.MetaAnalytics.RDataSupport.RObject`1[Microsoft.MetaAnalytics.RDataSupport.RObject] type or data is invalid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll be honest - I burned some cycles on those warning messages - they
seem so bad, and I assumed the data coming back from &lt;code&gt;strptime&lt;/code&gt; was
garbage.  I tried setting the timezone using a parameter to strptime
(&lt;code&gt;strptime(data.set$weirdDateTime, "%Y:%m:%d %H:%M:%S", tz="GMT")&lt;/code&gt;) - no
change.  I tried setting the TZ environment variable manually
using &lt;code&gt;Sys.setenv(TZ="GMT")&lt;/code&gt; - no dice.  So I ran the same code, but
used my other "what class is this?" code to tell me what garbage it
might be generating:&lt;/p&gt;
&lt;p&gt;&lt;img alt="r_type_conversions" src="http://www.mikelanzetta.com/images/r_type_conversions.png"&gt;&lt;/p&gt;
&lt;p&gt;Hmm, these types look fine.  I spent some time looking around, trying
different things, and finally asked the people on the Azure ML team.
 They told me that they don't yet support the POSIXlt data type on
output, only POSIXct.  It's possible the POSIXlt type will make it into
the GA release, but it's unlikely and it's definitely not there now.  So
what can we do now?  Well, we're almost there - we just need to convert
our POSIXlt to POSIXct before sending it to the output stream and we're
all done - so here's the final script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data.set &lt;span class="o"&gt;=&lt;/span&gt; dataset1&lt;span class="p"&gt;;&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;weirdDateTime&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y:%m:%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;asDate &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;dayOfWeek &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;weekdays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDate&lt;span class="p"&gt;);&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;hourOfDay &lt;span class="o"&gt;=&lt;/span&gt; data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime&lt;span class="o"&gt;$&lt;/span&gt;hour&lt;span class="p"&gt;;&lt;/span&gt;
data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.POSIXct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;data.set&lt;span class="o"&gt;$&lt;/span&gt;asDateTime&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully this simple example gives you some insight into how to
diagnose issues with Azure ML's R module, and some insight into what it
provides and fails to provide.  There's much more to come.&lt;/p&gt;</content><category term="Azure"></category><category term="AzureML"></category><category term="ML"></category><category term="R"></category></entry><entry><title>I Miss Integers</title><link href="http://www.mikelanzetta.com/i-miss-integers.html" rel="alternate"></link><published>2015-01-12T16:53:00-08:00</published><updated>2015-01-12T16:53:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2015-01-12:/i-miss-integers.html</id><summary type="html">&lt;p&gt;One of the worst things about working with Node.js is the .js part - as
much as I like Node, I still think JavaScript is a strange, broken
little language.  Not quite OO, not quite functional, it's a language
made to help browsers validate form fields and is now stuck …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the worst things about working with Node.js is the .js part - as
much as I like Node, I still think JavaScript is a strange, broken
little language.  Not quite OO, not quite functional, it's a language
made to help browsers validate form fields and is now stuck trying to
cope with managing server-side processing at scale.  I may not like it,
but I have to give it props - I'm impressed.&lt;/p&gt;
&lt;p&gt;However, it does have some eerie warts due to its bizarre type system,
and I'll be doing a few different posts calling those out.  Today's post
is on integers - you know, those shiny little numbers that can be
positive or negative and are infinite, but only countably-infinite.
 Most languages, in a nod to the practicality of finite computing, have
scoped the infinite down to 32-bit and 64-bit integers - Javascript has
neither.  It's chosen to embrace the "Number" - an IEEE754-encoded
floating-point meant to represent all numbers you might desire.&lt;/p&gt;
&lt;p&gt;Most JavaScript programmers know this, and know that's why you can only
represent integers up to 2\^53, but there are some odd side-effects from
this choice, as I recently found out when trying to cope with 64-bit
integer values.  I knew I could only support up to 53 bits due to the
2\^53 constraint, so I was trying to do some bit-shifting and
bit-masking to separate things out into higher and lower order 32-bit
components.  In a language with unsigned longs, this might looks
something like  (Obviously, I'm ignoring details about sign, and using
simple operations - I don't want to stray too far from the point):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;ulong&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xFFFFFFFF00000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;ulong&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;xFFFFFFFF&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What do you think this gives you in JavaScript?  I'll give you a hint -
it's not good.  Here's another fun example to call out the problem
specifically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically, operations on the upper 32 of a JavaScript Number mostly
result in zeros, leading to bizarre equality statements like the above.
 Unfortunately, since bit-shifting is a bitwise operation, those upper
32 are pretty much inaccessible without writing into a buffer of some
sort to get access to the bytes involved.&lt;/p&gt;
&lt;p&gt;Bummer, but at least I know the rules of the game - 2\^32 == badness,
2\^31 or less == goodness.&lt;/p&gt;
&lt;p&gt;So, imagine my surprise when I ran this code...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Divide By Zero" src="http://www.mikelanzetta.com/images/divide-by-zero-blog-safe1.jpg"&gt;&lt;/p&gt;</content><category term="Javascript"></category><category term="Random musings"></category><category term="weirdness"></category></entry><entry><title>Talking to EventHub with AMQP 1.0</title><link href="http://www.mikelanzetta.com/talking-to-eventhub-with-amqp-1-0.html" rel="alternate"></link><published>2014-11-06T14:50:00-08:00</published><updated>2014-11-06T14:50:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-11-06:/talking-to-eventhub-with-amqp-1-0.html</id><summary type="html">&lt;p&gt;Lately, I've been working on a Node.js-based library for speaking AMQP
1.0, since all of the existing ones are still on 0.9.1 and don't seem
intent on updating, or are based on Qpid Proton and thus burdened with
more native code than I'd like.  It's still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately, I've been working on a Node.js-based library for speaking AMQP
1.0, since all of the existing ones are still on 0.9.1 and don't seem
intent on updating, or are based on Qpid Proton and thus burdened with
more native code than I'd like.  It's still very much a work in
progress, but if you'd like to follow it (or contribute) the whole thing
is &lt;a href="https://github.com/noodlefrenzy/node-amqp10"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the primary reasons for doing this work is to talk to the new
Azure EventHub - this platform for event processing is built for speed,
with great fan-in/fan-out characteristics that make it a natural for
working in the IoT space.  I love the way they've architected it (for
more details, check their &lt;a href="http://msdn.microsoft.com/en-us/library/azure/dn836025.aspx"&gt;great overview
documentation&lt;/a&gt;),
but the lack of a consumption REST API makes it hard to work with from
Node.js - at least until my AMQP 1.0 library is complete.&lt;/p&gt;
&lt;p&gt;One of the problems with AMQP 1.0, however, is it leaves so much of the
details of actually routing the send/receive of messages as an exercise
to the server implementor, so while the documentation says that with
EventHub "you can use any AMQP 1.0 client" - that doesn't really mean
anything unless you know how.  I went and sat down with the EventHub
team to get that information, and am posting it here so anyone else
using AMQP 1.0 clients can speak to EH easily, and I'll be working with
the team to ensure it makes it into the official documentation as soon
as possible.&lt;/p&gt;
&lt;p&gt;I've phrased the sections below in a FAQ format - if you have additional
questions for how to use AMQP 1.0 against EH, let me know in the
comments section and I'll do my best to answer.&lt;/p&gt;
&lt;h2&gt;What is AMQP 1.0?&lt;/h2&gt;
&lt;p&gt;Ok, if you don't know this then this post is probably not that
interesting to you, but AMQP 1.0 is the approved specification for AMQP
(Advanced Message Queuing Protocol) and is &lt;a href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf"&gt;published by
OASIS&lt;/a&gt;.
 It's basically a scorched-earth rewrite from AMQP 0.9, which is why so
few clients yet support it.  I'm not qualified to speak on the merits of
AMQP vs. other message queuing protocols out there, but they're all
better than vendor lock-in to MQSeries (or for that matter even MSMQ).
 In the below answers, where appropriate, I will refer to sections of
the specification linked above as AMQP\$section.&lt;/p&gt;
&lt;h2&gt;How Do I Authenticate?&lt;/h2&gt;
&lt;p&gt;AMQP 1.0 supports &lt;a href="http://tools.ietf.org/html/rfc4616"&gt;&lt;code&gt;SASL-PLAIN&lt;/code&gt;&lt;/a&gt; for
sending credentials (AMQP\$5.3), and EventHub uses this for
authentication.  For EventHub, you open a connection to the ServiceBus
endpoint on the standard AMQP secure port, negotiate TLS, and then send
a SASL-PLAIN frame with either your ACS credentials, or you SAS key and
token as username and password.&lt;/p&gt;
&lt;h2&gt;How Do I Send Messages?&lt;/h2&gt;
&lt;p&gt;Sending messages is done by &lt;code&gt;ATTACH&lt;/code&gt;ing to a terminus and sending
&lt;code&gt;TRANSFER&lt;/code&gt; frames with message contents.  Within the &lt;code&gt;ATTACH&lt;/code&gt; frame (see
AMQP\$2.7.3), there are &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; references - for sending
messages, you need to specify the name of your event hub (hereafter,
&lt;em&gt;\&amp;lt;my-event-hub&gt;&lt;/em&gt;) as the &lt;code&gt;target&lt;/code&gt;'s &lt;code&gt;address&lt;/code&gt; field.  This will direct
messages to partitions as the EventHub chooses, allowing better fan-in
scaling.&lt;/p&gt;
&lt;p&gt;When sending a message, in the message annotations (AMQP\$3.2.3) you
should specify the &lt;code&gt;x-opt-partition-key&lt;/code&gt; setting to have whichever
string-based partition key you choose (e.g. the device ID) - this will
let EventHub hash that appropriately to its underlying partition scheme.
 If you decide you want to control your own fan-in and want fine-grained
partition management (generally, a bad idea unless you know what you're
doing), you &lt;em&gt;can&lt;/em&gt; connect to a specific partition by
using &lt;em&gt;\&amp;lt;my-event-hub&gt;&lt;/em&gt;/Partitions/&lt;em&gt;\&amp;lt;partition-name&gt;&lt;/em&gt; as
your &lt;code&gt;target address&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;How Do I Consume Messages?&lt;/h2&gt;
&lt;p&gt;Well, that's the interesting part with EventHub - messages persist until
they time out and are destroyed, allowing multiple consumer groups to
consume the same message (or even the same consumer to consume it
multiple times) - this means messages aren't &lt;em&gt;"consumed"&lt;/em&gt; in the
traditional queue-based sense.&lt;/p&gt;
&lt;h2&gt;Ok Then, How Do I Receive Them?&lt;/h2&gt;
&lt;p&gt;Similarly to sending, you &lt;code&gt;ATTACH&lt;/code&gt; to the EventHub terminus and receive
&lt;code&gt;TRANSFER&lt;/code&gt; frames with the contents - but with some differences.
 When &lt;code&gt;ATTACH&lt;/code&gt;ing to the EventHub, you should
specify &lt;em&gt;\&amp;lt;my-event-hub&gt;&lt;/em&gt;/ConsumerGroups/&lt;em&gt;\&amp;lt;consumer-group-name&gt;&lt;/em&gt;/Partitions/&lt;em&gt;\&amp;lt;partition-name&gt;&lt;/em&gt;
as your &lt;code&gt;source address&lt;/code&gt;.  The &lt;code&gt;$default&lt;/code&gt; consumer group is guaranteed
to exist, so most people just use that one.  This means that you'll need
one Link (see AMQP\$2.6) for each Partition you wish to receive from.&lt;/p&gt;
&lt;p&gt;Also, since EventHub doesn't keep track of which messages have been
consumed, it's up to clients to track that information and let the
EventHub know how to pick up from where they left off.  To make this
possible, each incoming message from an EventHub contains a message
annotation named &lt;code&gt;x-opt-offset&lt;/code&gt;, which is an opaque string that allows
clients to keep track of (checkpoint) their place in the partition's
queue.  When they reconnect to a given partition, they can specify that
they want to pick up after their last checkpoint by using
the &lt;code&gt;filter&lt;/code&gt; map on the &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The AMQP spec is silent on what these filters are supposed to look like,
so EventHub has tried to use an existing quasi-standard in the space,
picking up &lt;a href="http://docs.oracle.com/cd/E19798-01/821-1841/bncer/index.html"&gt;JMS' selector
filters&lt;/a&gt;
and their SQL92-ish syntax.  For this use, the &lt;code&gt;filter&lt;/code&gt; key should be
Symbol&lt;code&gt;(apache.org:selector-filter:string),&lt;/code&gt; and the value is
a "described type" (AMQP\$1.1.2) with the format Descriptor =
Symbol(&lt;code&gt;apache.org:selector-filter:string&lt;/code&gt;), Value =
String(&lt;code&gt;amqp.annotation.x-opt-offset &amp;gt;&lt;/code&gt; '&lt;em&gt;\&amp;lt;last-offset&gt;&lt;/em&gt;')  (You think
that's ugly, you should see it in binary).&lt;/p&gt;
&lt;h2&gt;Wait, Then How Do I Know What Partitions Are Out There?&lt;/h2&gt;
&lt;p&gt;Since you need to know the partition name to connect for consumption,
there are a few different mechanisms for getting the number, and
names, of the partitions - you don't need magic knowledge from the Azure
portal (although if you have it, feel free to use that instead).  First
off, there's a REST API to get those details,
e.g.: &lt;code&gt;GET /&amp;lt;my-event-hub&amp;gt;/ConsumerGroups/$default/Partitions&lt;/code&gt; - this
will return an ATOM feed with the contents you need (keep in mind you'll
need the appropriate SAS headers - see my previous post on &lt;a href="http://www.mikelanzetta.com/2014/09/talking-to-eventhub-from-node/"&gt;talking to
EH from
Node&lt;/a&gt;
for information about how to generate them).&lt;/p&gt;
&lt;p&gt;If you want to keep it in the family, there's a way to get partition
information using AMQP itself, through the AMQP management API.
 ServiceBus supports a management endpoint that allows you to query
information directly from within AMQP by creating a Link to the
&lt;code&gt;source/target address&lt;/code&gt; &lt;em&gt;\$management&lt;/em&gt;.  You create a sender Link, send
a message asking for the information by specifying the following
properties (see AMQP\$3.2.4) and application properties (see
AMQP\$3.2.5):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message-id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;operation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;READ&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;my-event-hub&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;com.microsoft:eventhub&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will return a message on the receiver link with a body containing
an AMQP map with (at least) two elements: &lt;code&gt;partition_count&lt;/code&gt; containing
the total number of partitions, and &lt;code&gt;partition_ids&lt;/code&gt; containing the
partition names (an AMQP string array).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully, this will help others when connecting to EventHub using AMQP.
 I'll keep updating this as I get more information, and please ask in
the comments if you have any additional questions.  Obviously, if you
have the option of using the existing .NET client - I'd highly recommend
that!  It's much easier than coordinating AMQP sessions yourself,
and you have someone besides yourself testing it.  Also, if all you're
doing is sending the occasional message to an EventHub from Node.js and
are not consuming them, please consider &lt;a href="https://github.com/noodlefrenzy/event-hub-client"&gt;my previous
work&lt;/a&gt; (documented in
&lt;a href="http://www.mikelanzetta.com/2014/09/talking-to-eventhub-from-node/"&gt;my previous
post&lt;/a&gt;) -
it uses the REST API and is generally easier to get up and running.
 However, if neither of those options work, hopefully this will give you
enough information to get up and running.  If you're looking for a
Node.js solution to working with AMQP1.0, I'm working on one, but it's
not there yet - if you feel like being a contributor, &lt;a href="https://github.com/noodlefrenzy/node-amqp10"&gt;come on
down&lt;/a&gt; and help!&lt;/p&gt;</content><category term="AMQP"></category><category term="Azure"></category><category term="EventHub"></category></entry><entry><title>Developing on Windows</title><link href="http://www.mikelanzetta.com/developing-on-windows.html" rel="alternate"></link><published>2014-10-09T08:31:00-07:00</published><updated>2014-10-09T08:31:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-10-09:/developing-on-windows.html</id><summary type="html">&lt;p&gt;This isn't a long post, I just wanted to shout-out my colleague &lt;a href="http://www.felixrieseberg.com/"&gt;Felix
Rieseberg&lt;/a&gt;, who has &lt;a href="http://www.felixrieseberg.com/the-windows-dev-environment/"&gt;a great
post&lt;/a&gt;outlining
a whole selection of tools to help you get up and running with a Windows
development environment.  The most notable is probably &lt;a href="http://chocolatey.org/"&gt;Chocolatey
NuGet&lt;/a&gt;, which if you're a long-term Windows …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This isn't a long post, I just wanted to shout-out my colleague &lt;a href="http://www.felixrieseberg.com/"&gt;Felix
Rieseberg&lt;/a&gt;, who has &lt;a href="http://www.felixrieseberg.com/the-windows-dev-environment/"&gt;a great
post&lt;/a&gt;outlining
a whole selection of tools to help you get up and running with a Windows
development environment.  The most notable is probably &lt;a href="http://chocolatey.org/"&gt;Chocolatey
NuGet&lt;/a&gt;, which if you're a long-term Windows user
is just revelatory, and if you're also on Linux and familiar
with &lt;code&gt;apt-get,&lt;/code&gt;you'll be familiar with.&lt;/p&gt;
&lt;p&gt;For getting a set of *nix tools running in Windows, I think we can all
agree that Cygwin is dead.  He recommends
&lt;a href="https://github.com/bmatzelle/gow"&gt;GOW&lt;/a&gt; which I've just started playing
around with, but I'm more familiar with
&lt;a href="http://gnuwin32.sourceforge.net/"&gt;GnuWin32&lt;/a&gt; and would recommend those
(for now) - either one frees you from cygpath-hell.&lt;/p&gt;</content></entry><entry><title>Caching Responses in Expressjs</title><link href="http://www.mikelanzetta.com/caching-responses-in-expressjs.html" rel="alternate"></link><published>2014-10-04T15:32:00-07:00</published><updated>2014-10-04T15:32:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-10-04:/caching-responses-in-expressjs.html</id><summary type="html">&lt;p&gt;On a recent project, I found myself writing a web service in Node via
Azure Mobile Services, and realized that the client pattern was to call
a common set of requests on startup and in early interactions, and then
dig down into more detailed requests.  Furthermore, these common
requests were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a recent project, I found myself writing a web service in Node via
Azure Mobile Services, and realized that the client pattern was to call
a common set of requests on startup and in early interactions, and then
dig down into more detailed requests.  Furthermore, these common
requests were common across just about all clients.  Caching these
responses seemed like a natural thing to do, but the problem was that i
couldn't just cache the response object, I had to replay the previous
response so that the same status, headers, and body would be sent.  Also
I wanted the ability to control whether a request was cached based on
the content, and to avoid caching error responses.  I decided to write
it in such a way that others could potentially use it, and I've put it
&lt;a href="https://github.com/noodlefrenzy/memoize-express"&gt;up on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the backbone, I wrote a simple object - Replayer - that allows you
to wrap an object, trapping all function calls and recording all
parameters given, and then allowing you to replay those calls on another
object instance.  It does this by making a proxy function for all
functions on the object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fnName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;replayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="nx"&gt;fnName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fnName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fnName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;replayer&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that last line - this allows method-chaining APIs to work
correctly, so &lt;code&gt;res.status(200).body(data)&lt;/code&gt; works as expected, with both
&lt;code&gt;status&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; being correctly recorded.&lt;/p&gt;
&lt;p&gt;I use this "Replayer" (&lt;a href="https://github.com/noodlefrenzy/replayer"&gt;packaged on
GitHub independently&lt;/a&gt;, in case
it's useful on its own) within the Express Memoizer to record
all express request/response functions, leaving the actual memoizer
function pretty clean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Memoizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memoize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;shouldCacheReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shouldCacheRequest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;shouldCacheRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shouldCacheResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCacheReq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prevRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCacheRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWrapped&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;prevRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fakeRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;replayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;theCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fakeRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fakeRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This checks the predicate for the incoming request to determine whether
it should be cached (if not, the call is just passed through), and then
checks the cache to see if the request is already cached.  If so, it
pulls the cached replayer instance, determines whether it should have
been cached, and if so then replays it on the current response object.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;I was doing this to solve a particular problem, and also to learn how to
do some things in JS that I'm used to doing in other languages, so there
are plenty of caveats to this solution (and there might be other
solutions out there, although none of the existing memoization node
packages seemed to do what I needed).  I've documented them all in the
readme.md in each project, but I'll outline a few here as well.  First
off, the Replayer has three main caveats that would prevent wide
adoption, but didn't impact my use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It only wraps objects, so not on built-ins like String/Number.&lt;/li&gt;
&lt;li&gt;It stores the arguments literally, not in some serialized and then
    re-hydrated form, meaning that mutable objects could potentially
    change between the recording and the playback.&lt;/li&gt;
&lt;li&gt;It doesn't support async methods, so no invocation of callbacks,
    etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, it basically "duck-types" on playback, attempting replay
on whatever you've passed in, so if you've wrapped an object that has an
&lt;code&gt;indexOf&lt;/code&gt; method, and eventually play it back on a string, it should
"work", but might not be the behavior you need (it will, however, be
&lt;a href="http://www.mikelanzetta.com/images/hero-we-deserve.jpg"&gt;the behavior you
deserve&lt;/a&gt;).
 The Memoizer inherits these caveats, and additionally has whatever
caveats are inherited by the cache implementation you use.  In addition,
the response predicate is only checked on retrieval from the cache, so
that there's no ordering dependence on how the caller chooses to invoke
response methods, and the memoizer doesn't need to keep track of
when/whether the response has completed.&lt;/p&gt;</content><category term="caching"></category><category term="Expressjs"></category><category term="memoization"></category><category term="Node"></category></entry><entry><title>Talking to EventHub from Node</title><link href="http://www.mikelanzetta.com/talking-to-eventhub-from-node.html" rel="alternate"></link><published>2014-09-28T13:14:00-07:00</published><updated>2014-09-28T13:14:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-09-28:/talking-to-eventhub-from-node.html</id><summary type="html">&lt;p&gt;This past week, I participated in a hackfest trying to get some
&lt;a href="https://www.alljoyn.org/"&gt;Alljoyn&lt;/a&gt; devices talking to
&lt;a href="http://nitrogen.io/"&gt;Nitrogen&lt;/a&gt;.  It was a great time, getting to learn
some new technologies, get exposed to the ~~pain ~~wonder of working
with IoT hardware, and watch my bosses (&lt;a href="http://blogs.msdn.com/b/johnshews_blog/"&gt;John
Shewchuk&lt;/a&gt; and &lt;a href="http://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-Live/Tracey-Trewin-Architecture-Intellitrace-DevOps-Unit-Testing"&gt;Tracey
Trewin&lt;/a&gt;)
sling some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This past week, I participated in a hackfest trying to get some
&lt;a href="https://www.alljoyn.org/"&gt;Alljoyn&lt;/a&gt; devices talking to
&lt;a href="http://nitrogen.io/"&gt;Nitrogen&lt;/a&gt;.  It was a great time, getting to learn
some new technologies, get exposed to the ~~pain ~~wonder of working
with IoT hardware, and watch my bosses (&lt;a href="http://blogs.msdn.com/b/johnshews_blog/"&gt;John
Shewchuk&lt;/a&gt; and &lt;a href="http://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-Live/Tracey-Trewin-Architecture-Intellitrace-DevOps-Unit-Testing"&gt;Tracey
Trewin&lt;/a&gt;)
sling some code.  My goal was to have Nitrogen write device telemetry
data to &lt;a href="http://azure.microsoft.com/en-us/services/event-hubs/"&gt;Azure
EventHub&lt;/a&gt;, and
potentially have other Node or C# workers process the telemetry across
devices.&lt;/p&gt;
&lt;p&gt;To that end, I downloaded the Azure Node SDK and went to connect to my
hub - at that point I realized I had a problem, the Node SDK hasn't been
extended to talk to EventHub yet!  I looked around, and perhaps my
bingle-fu is weak but I didn't see any existing unofficial Node
packages, so I decided I'd write one myself.&lt;/p&gt;
&lt;p&gt;First, I took a look at the .NET API, figuring I'd just copy that - no
dice, as that client uses magic to send messages, creating the client
based on the connection string in the app's config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;eventHubClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hubName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or using the Shared Access Signature Token created via a different form
of magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceBusEnvironment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateServiceUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}/publishers/{1}/messages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SharedAccessSignatureTokenProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetSharedAccessSignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;sasKeyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sasKeyValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="n"&gt;serviceUri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenTTL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neither of these methods exist in the Azure Node SDK, so I was forced to
seek farther afield.&lt;/p&gt;
&lt;h4&gt;Creating a Token and Sending RESTfully&lt;/h4&gt;
&lt;p&gt;With the help of a &lt;a href="http://developers.de/blogs/damir_dobric/archive/2013/10/17/how-to-create-shared-access-signature-for-service-bus.aspx"&gt;great
post&lt;/a&gt;
by Damir Dobric, I was able to convert his code into a Node-ful way of
doing things, then use the &lt;a href="http://msdn.microsoft.com/en-us/library/azure/dn790664.aspx"&gt;EventHub REST
API&lt;/a&gt; to
send messages to my very own Event Hub.  I created a custom SAS key for
sending using the portal:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mikelanzetta.com/images/eventhub_saskeys.png"&gt;&lt;img alt="Creating
Alternate SAS
Keys" src="http://www.mikelanzetta.com/images/eventhub_saskeys.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;used my new code to build a token from them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSharedAccessToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hubName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;saName&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;saKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Missing required parameter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;.servicebus.windows.net/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;hubName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;epoch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1970&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;365&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;signatureUTF8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHmac&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sha256&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saKey&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signatureUTF8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SharedAccessSignature sr=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;sig=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
        &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;se=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;skn=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;saName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and sent the message.  I've &lt;a href="https://github.com/noodlefrenzy/event-hub-client"&gt;open-sourced this code on
GitHub&lt;/a&gt;, please feel
free to use it (Apache v2 licensed), and pull requests are always
welcome.  Now I just needed to hook up the receive API and I'd be all
set!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is where things really went sideways.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the receive piece, EventHub only supports AMQP - specifically AMQP
1.0.  I've been looking through the various Nodejs packages, and haven't
found anything I can use to talk AMQP 1.0.  For &lt;code&gt;amqp.node&lt;/code&gt; and &lt;code&gt;node-amqp&lt;/code&gt;,
they only support 0.9.1 and I don't see 1.0 support pending or in
anyone's forks.  The node-qpid package seems promising, as it's based on
Apache Qpid Proton which does support 1.0, but the package is a native
code package that requires you to have Proton 0.3 installed, and I can't
get that to build on Windows at this point.  I've started porting
the node-qpid package to Proton 0.7 (the latest), but I'm running into
linker errors.&lt;/p&gt;
&lt;p&gt;At this point, it has gone beyond a slight investigation for a hackfest
and into something more serious.  I'm starting to talk with the EventHub
team about their release schedule, and I'm looking for insight from the
community as to whether they'd like one of the non-native-code packages
(amqp.node or node-amqp) updated to 1.0, or whether they'd want
node-qpid upgraded to 0.7 - I only have time to work on so much.  At
this point, my inclination is to upgrade amqp.node, but suggestions and
advice are always welcome.&lt;/p&gt;
&lt;h4&gt;PostScript&lt;/h4&gt;
&lt;p&gt;Link to event-hub-client, my start on a Nodejs REST-based EventHub
client: &lt;a href="https://github.com/noodlefrenzy/event-hub-client"&gt;https://github.com/noodlefrenzy/event-hub-client&lt;/a&gt;, now
published in the &lt;code&gt;npm&lt;/code&gt; registry
at &lt;a href="https://www.npmjs.org/package/event-hub-client"&gt;https://www.npmjs.org/package/event-hub-client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, shortly after I'd done this work and started the write-up, I found
&lt;a href="http://hypernephelist.com/2014/09/16/sending-data-to-azure-event-hubs-from-nodejs.html"&gt;this
post&lt;/a&gt;
from Hypernephelist that covers much of the same ground.  If only I'd
found it a week sooner!  It doesn't cope with AMQP, and it doesn't
package things up into a &lt;code&gt;package.json&lt;/code&gt;-includable form, so I thought my
post still had value.&lt;/p&gt;</content><category term="Azure"></category><category term="EventHub"></category><category term="Node"></category></entry><entry><title>Azure Storage: Architecture Troubleshooting</title><link href="http://www.mikelanzetta.com/azure-storage-architecture-troubleshooting.html" rel="alternate"></link><published>2014-09-16T10:12:00-07:00</published><updated>2014-09-16T10:12:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-09-16:/azure-storage-architecture-troubleshooting.html</id><summary type="html">&lt;p&gt;I've been dealing with Azure Storage for years now, and while most of
the time it's rock solid, on occasion you can get hit with networking
issues or other "brownout" drops in availability that can make you
question your sanity.  I find it helpful to know what's going on behind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been dealing with Azure Storage for years now, and while most of
the time it's rock solid, on occasion you can get hit with networking
issues or other "brownout" drops in availability that can make you
question your sanity.  I find it helpful to know what's going on behind
the scenes in situations like that - mostly because I'm curious,
especially about how very large scale NoSQL stores are built, but also
because it can help you make sense of what might be happening.  The
Azure folks have written a &lt;a href="http://sigops.org/sosp/sosp11/current/2011-Cascais/printable/11-calder.pdf"&gt;great
paper&lt;/a&gt;
on how their system is built, and why it "violates the CAP theorem"
(spoiler alert: it doesn't).  There's also &lt;a href="https://www.youtube.com/watch?v=QnYdbQO0yj4"&gt;a
video&lt;/a&gt; of their talk that's
worth watching if you're into that sort of thing.&lt;/p&gt;
&lt;p&gt;You might ask why I'm publishing a post on a 3-year-old paper as if it's
news.  Well, it was preamble for an incredibly thorough new guide on
&lt;a href="http://azure.microsoft.com/en-us/documentation/articles/storage-monitoring-diagnosing-troubleshooting/"&gt;monitoring and diagnosing Azure
Storage&lt;/a&gt;
that the team just published.  This guide is quite detailed, giving
guidance on how to correlate client and server data, how to ensure
storage monitoring is enabled at the right level of granularity,
what spikes in different metrics mean in isolation or combination, and
appendices on setting up your favorite network monitoring tool to watch
storage traffic - I didn't even realize I wasn't supposed to be using
Netmon anymore :-\.&lt;/p&gt;
&lt;p&gt;Both the paper and the guide are worth a look - the guide is worth
reading &lt;em&gt;now&lt;/em&gt; if you do any storage-related work, if only to make sure
you're gathering the right metrics for when you need them, and the paper
can wait for when you have some free time and want something a bit more
detailed.  Enjoy!&lt;/p&gt;</content><category term="Azure"></category></entry><entry><title>Running Azure Mobile Services Locally</title><link href="http://www.mikelanzetta.com/running-azure-mobile-services-locally.html" rel="alternate"></link><published>2014-09-08T11:32:00-07:00</published><updated>2014-09-08T11:32:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-09-08:/running-azure-mobile-services-locally.html</id><summary type="html">&lt;p&gt;On a recent project, I made my first foray into using Azure Mobile
Services &lt;a href="http://weblogs.asp.net/scottgu/windows-azure-major-updates-for-mobile-backend-development" title="Azure Custom API Announcement"&gt;Custom
API&lt;/a&gt;
support, with a Node.js-backed API implementation.  I've used (and
loved) Mobile Services in the past for their push notification
infrastructure, but this was new ground for me.  I liked the easy
setup - trivial …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a recent project, I made my first foray into using Azure Mobile
Services &lt;a href="http://weblogs.asp.net/scottgu/windows-azure-major-updates-for-mobile-backend-development" title="Azure Custom API Announcement"&gt;Custom
API&lt;/a&gt;
support, with a Node.js-backed API implementation.  I've used (and
loved) Mobile Services in the past for their push notification
infrastructure, but this was new ground for me.  I liked the easy
setup - trivial to create a new API method and write code, in the
browser, to implement it - but once your API implementation went beyond
"toy" it quickly became unmanageable.&lt;/p&gt;
&lt;p&gt;They have integrated
Git support which allows you to locally clone your API code (see the
Configure tab for the Git URL), modify it, and then push changes which
will cause an auto-deployment. This works great, but the problem is that
you can't run &lt;em&gt;or &lt;/em&gt;test those changes locally before deployment,
and that's not the kind of test-in-production workflow I'm into.&lt;/p&gt;
&lt;p&gt;&lt;img alt="I don't always test my code, but when I do, I do it in production." src="http://www.mikelanzetta.com/images/test_in_production.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I talked with the Azure Mobile Services team about their testing story,
and was told that they'd been focusing on improving the .NET-backed
services first - they would love to get Node.js local development fixed
and realized it was a gap, but just didn't have the resources right now.
 I didn't want to wait, so decided I would fix it myself.&lt;/p&gt;
&lt;h4&gt;My Solution&lt;/h4&gt;
&lt;p&gt;I've implemented a lightweight
local &lt;a href="http://expressjs.com/" title="ExpressJs Home"&gt;Expressjs&lt;/a&gt; server that
runs locally, interrogates all .js files in your API directory to
determine which methods are implemented, and registers those paths.
 This allowed me to run locally, and I was easily able to extend it to
handle the "register" method to support additional custom API paths.  I
then included a simple example unit-test that uses
&lt;a href="http://visionmedia.github.io/mocha/" title="Mocha Home"&gt;Mocha&lt;/a&gt;to run the
tests (heavily indebted to &lt;a href="http://51elliot.blogspot.com/2013/08/testing-expressjs-rest-api-with-mocha.html" title="Expressjs Testing With Mocha"&gt;51 Elliot's
post&lt;/a&gt;&lt;a href="http://51elliot.blogspot.com/2013/08/testing-expressjs-rest-api-with-mocha.html"&gt; &lt;/a&gt;for
helping me out here), starting up the local Expressjs and hitting the
API methods as needed.  I've checked all of this into GitHub so others
can use it and extend it as they see
fit: &lt;a href="https://github.com/noodlefrenzy/azure-mobile-local"&gt;https://github.com/noodlefrenzy/azure-mobile-local&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This code depends on a few pieces of software, so you should make sure
you've installed
&lt;a href="https://help.github.com/articles/set-up-git" title="Setting Up Git"&gt;Git&lt;/a&gt;,
&lt;a href="http://nodejs.org/"&gt;Node.js&lt;/a&gt; (and &lt;strong&gt;npm&lt;/strong&gt; is in your path), and then
install the Grunt CLI and Mocha before starting.  Technically, you
don't &lt;em&gt;need&lt;/em&gt; to install Mocha as you can use it just fine from Grunt and
the dev dependency, but it's too useful not to just have it on your path
(the first time you run &lt;code&gt;mocha debug&lt;/code&gt; you'll agree with me).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g grunt-cli
npm install -g mocha
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The simplest way to use it (and I'm indebted to my colleague &lt;a href="http://jasonpoon.ca"&gt;Jason
Poon&lt;/a&gt; for this) is to mount it as a &lt;a href="http://git-scm.com/docs/git-submodule" title="Git Submodule Documentation"&gt;git
submodule&lt;/a&gt;
of your Azure Mobile Service git repository.  This allows both
code-bases to peacefully co-exist, and ensures pushing changes to tests
or the local server don't trigger deployments of your service.  Setting
this up is simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone _your azure mobile service git URL_
&lt;span class="nb"&gt;cd&lt;/span&gt; _directory from above_
git submodule add https://github.com/noodlefrenzy/azure-mobile-local.git &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt;
npm install
grunt build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you &lt;code&gt;grunt build&lt;/code&gt;, this runs
&lt;a href="http://www.jshint.com/" title="JSHint Home"&gt;Jshint&lt;/a&gt;against your API, and any
unit-tests in the &lt;code&gt;local/test/**/*.js&lt;/code&gt; files.&lt;/p&gt;
&lt;h4&gt;Simple Example&lt;/h4&gt;
&lt;p&gt;For instance, with my simple example mobile service below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/mycustom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myCustomMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myCustomMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello from custom routing!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've written the following unit-tests that simply test whether the paths
that I've registered resolve, and return 200s when called:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../server.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4321&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;defaultGetOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//debugger;&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//app.close();&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should be created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should be listening&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultGetOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should have myendpoint api route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultGetOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/myendpoint&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should have myendpoint/mycustom api route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultGetOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/myendpoint/mycustom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These tests can be extended arbitrarily, and with a simple change to the
Gruntfile.js:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;simplemocha&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;ignoreLeaks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bdd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../test/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can instead add your own &lt;code&gt;test/&lt;/code&gt; directory to your mobile service
and have your tests live in the same place as the service itself (a much
better answer, but harder to demo for me).&lt;/p&gt;
&lt;h4&gt;Further Work and Caveats&lt;/h4&gt;
&lt;p&gt;All I needed for my project was a simple API (I was passing through to
some services on other VMs), so I didn't implement mocks for any of the
Azure services that get included with Mobile Services (e.g. the Table
abstraction).  I also didn't inject the mysterious statusCodes enum that
gets included automagically in your APIs, and instead just replaced them
with 200s.&lt;/p&gt;
&lt;p&gt;As mentioned above, the code is all in GitHub right here:
&lt;a href="https://github.com/noodlefrenzy/azure-mobile-local"&gt;https://github.com/noodlefrenzy/azure-mobile-local&lt;/a&gt; - if you see
obvious improvements, I'd love to hear about them either in comments or
pull requests.&lt;/p&gt;</content><category term="Azure"></category><category term="Mobile"></category><category term="Node"></category></entry><entry><title>Old IE, New Vagrant</title><link href="http://www.mikelanzetta.com/old-ie-new-vagrant.html" rel="alternate"></link><published>2014-09-03T08:05:00-07:00</published><updated>2014-09-03T08:05:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-09-03:/old-ie-new-vagrant.html</id><summary type="html">&lt;p&gt;I've been messing around with
&lt;a href="http://www.vagrantup.com/" title="Vagrant"&gt;Vagrant&lt;/a&gt;for a few weeks now, on
and off, to manage my Linux VMs on my Win8.1 box with Hyper-V.  So far,
it's been working well, barring a few caveats due primarily to MSIT's
restrictive proxy settings (although I could find out it's really …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been messing around with
&lt;a href="http://www.vagrantup.com/" title="Vagrant"&gt;Vagrant&lt;/a&gt;for a few weeks now, on
and off, to manage my Linux VMs on my Win8.1 box with Hyper-V.  So far,
it's been working well, barring a few caveats due primarily to MSIT's
restrictive proxy settings (although I could find out it's really just a
&lt;a href="http://en.wikipedia.org/wiki/User_error#Acronyms_and_other_names"&gt;PEBKAC&lt;/a&gt;issue).
 I love the idea behind the tool, as managing your dev box is a pain and
keeping VMs up to date is not much better.&lt;/p&gt;
&lt;p&gt;Well, the folks at Modern.ie and my MSOpenTech colleague have now
converted a bunch of their VMs over to Vagrant!  If you're not familiar
with &lt;a href="http://modern.ie"&gt;Modern.ie&lt;/a&gt; - it's a site the IE team set up to
ensure that folks didn't need to have a host of ancient Windows XP
machines with crufty IE6 installs in order to do cross-browser testing.
 They already had a host of VMs up there that'll run on everything from
Parallels to Virtual Box - this just extends those to allow you to
"vagrant up" whichever ones you need.  They're looking for people to
help them evaluate, to gauge interest and uncover issues - if you have
the need and the time, I would encourage you to go take a look, and read
the &lt;strong&gt;&lt;a href="http://blog.syntaxc4.net/post/2014/09/03/windows-boxes-for-vagrant-courtesy-of-modern-ie.aspx" title="Modern.ie on Vagrant"&gt;official blog
post&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</content><category term="Web Development"></category></entry><entry><title>Distributed Systems Primer</title><link href="http://www.mikelanzetta.com/distributed-systems-primer.html" rel="alternate"></link><published>2014-08-14T13:29:00-07:00</published><updated>2014-08-14T13:29:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-08-14:/distributed-systems-primer.html</id><summary type="html">&lt;p&gt;&lt;a href="https://twitter.com/HenryR"&gt;Henry Robinson&lt;/a&gt;, the smart Cloudera SDE
behind The &lt;a href="http://the-paper-trail.org/blog/"&gt;Paper Trail&lt;/a&gt; blog, just
posted a great &lt;a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" title="Distributed Systems Theory for the Distributed Systems Engineer"&gt;primer on distributed
systems&lt;/a&gt;.
 I highly recommend anyone interested in this field go and take a
look - if you've been around long enough, you'll have read most of the
papers, but it's a good collection …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://twitter.com/HenryR"&gt;Henry Robinson&lt;/a&gt;, the smart Cloudera SDE
behind The &lt;a href="http://the-paper-trail.org/blog/"&gt;Paper Trail&lt;/a&gt; blog, just
posted a great &lt;a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" title="Distributed Systems Theory for the Distributed Systems Engineer"&gt;primer on distributed
systems&lt;/a&gt;.
 I highly recommend anyone interested in this field go and take a
look - if you've been around long enough, you'll have read most of the
papers, but it's a good collection of resources.  I also agree with the
person in the comments who recommended
&lt;a href="http://raftconsensus.github.io/"&gt;Raft&lt;/a&gt;be included, although I would
include it &lt;em&gt;in addition to&lt;/em&gt; Paxos, and not &lt;em&gt;in lieu of&lt;/em&gt; it.&lt;/p&gt;</content><category term="Distributed Systems"></category></entry><entry><title>SQL vs. NoSQL</title><link href="http://www.mikelanzetta.com/sql-vs-nosql.html" rel="alternate"></link><published>2014-08-01T17:11:00-07:00</published><updated>2014-08-01T17:11:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-08-01:/sql-vs-nosql.html</id><summary type="html">&lt;p&gt;I was recently asked by a colleague of mine why anyone is even using
NoSQL solutions at all, and not just sticking with SQL.  After telling
them that people use them because they're
&lt;a href="https://www.youtube.com/watch?v=b2F-DItXtZs"&gt;web-scale&lt;/a&gt;, I did some
thinking about when you should use NoSQL vs. just sticking with good old …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently asked by a colleague of mine why anyone is even using
NoSQL solutions at all, and not just sticking with SQL.  After telling
them that people use them because they're
&lt;a href="https://www.youtube.com/watch?v=b2F-DItXtZs"&gt;web-scale&lt;/a&gt;, I did some
thinking about when you should use NoSQL vs. just sticking with good old
SQL DBs.  If you look at the &lt;a href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf"&gt;original Dynamo
paper&lt;/a&gt;, it's quite clear that their goal was high scalability for workloads
while maintaining "high nines" availability.  Having worked at Amazon
(and been kept up all night with the sounds of pagers in my ears due to
Oracle alarms), I can understand their concerns.  For a case like their
shopping carts - hundreds of millions of highly-churned objects, no
connections between them, easily GET/PUT compatible - this makes perfect
sense, and it worked fantastically well.  Thus, the NoSQL revolution was
born, and everyone decided they needed to jump on the NoSQL train.&lt;/p&gt;
&lt;p&gt;&lt;img alt="I should use NoSQL" src="http://noodlefrenzy-wp.azurewebsites.net/wp-content/uploads/2014/08/nosql_cat.png"&gt;&lt;/p&gt;
&lt;p&gt;The biggest problem with moving to NoSQL is the amount of functionality
you lose over regular RDBMSs - little things like "transactions",
"joins", "queries", "aggregation", "ACID guarantees" and "secondary
indexes" just to name a few.  These are big, important features, as is
obvious by how much
&lt;a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/spanner-osdi2012.pdf"&gt;Google&lt;/a&gt;and
&lt;a href="http://www.mpi-sws.org/~druschel/courses/ds/papers/cooper-pnuts.pdf"&gt;others&lt;/a&gt;spend
trying to &lt;a href="http://docs.mongodb.org/manual/indexes/"&gt;add&lt;/a&gt;them back to
their existing NoSQL solutions.  If you need the scale and reliability
and can do without these features, then a NoSQL Key/Value store might be
the right answer for you.  NoSQL Document Stores (think MongoDB) give
you some of these features back (secondary indexing, queryability,
aggregates), but you're still transaction- and join-less.  Other more
arcane "NoSQL-ish" stores like Graph DBs can give you incredible
processing powers for particular types of data, and might suit your
needs (have you ever tried to write a graph query in SQL?).&lt;/p&gt;
&lt;p&gt;However, the issue in adopting a NoSQL store goes deeper than deciding
what features you can live without - you need to know what happens to
your data.  When you commit a transaction in SQL, that data is committed
to disk, durable against reboots, and likely quickly spooled to a
secondary server - the fault patterns are well-known, and the behavior
of the various RDBMSs well and accurately documented.  With NoSQL,
you'll need to know about the &lt;a href="http://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP
Theorem&lt;/a&gt;, where your chosen
store says it lies in the CAP triangle, and whether they're telling the
truth.&lt;/p&gt;
&lt;p&gt;Kyle Kingsbury has a fantastic &lt;a href="http://aphyr.com/tags/jepsen"&gt;series of blog
posts&lt;/a&gt; evaluating various stores on their
claims, and mostly finding them wanting - recommended reading if you're
thinking of adopting one for your own project. I'm not telling you to
avoid NoSQL stores - I've used my share, and written one (internal to
MS), and know how useful they can be.  Anyone considering NoSQL, though,
should go into it with eyes open, and consider whether SQL might work
better for their case.  With Azure, it's easy to spool up a SQL Server
instance &lt;em&gt;and&lt;/em&gt; an instance of MongoDB, try both, and see which one you
like.&lt;/p&gt;</content><category term="Distributed Systems"></category><category term="NoSQL"></category></entry><entry><title>Starting Fresh</title><link href="http://www.mikelanzetta.com/starting-fresh.html" rel="alternate"></link><published>2014-07-09T22:08:00-07:00</published><updated>2014-07-09T22:08:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2014-07-09:/starting-fresh.html</id><summary type="html">&lt;p&gt;I've decided to move from &lt;a href="http://blogs.msdn.com/b/milanz/"&gt;my MSDN
blog&lt;/a&gt; to my own WordPress site.  No big
deal, since my cobweb of a blog hadn't been updated in years, but you
might notice that this site is much younger than most of the posts on
it.  I've migrated my old posts and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've decided to move from &lt;a href="http://blogs.msdn.com/b/milanz/"&gt;my MSDN
blog&lt;/a&gt; to my own WordPress site.  No big
deal, since my cobweb of a blog hadn't been updated in years, but you
might notice that this site is much younger than most of the posts on
it.  I've migrated my old posts and back-dated them to their original
publishing date.&lt;/p&gt;
&lt;p&gt;My hope is that I'll be publishing to my blog more frequently, and my
plan is to open up the blog to non-programming-related topics in an
effort to motivate myself to make that happen. Hopefully that strategy
works.&lt;/p&gt;</content><category term="Random musings"></category></entry><entry><title>Duck Typing in C# 4.0</title><link href="http://www.mikelanzetta.com/duck-typing-in-c-4-0.html" rel="alternate"></link><published>2010-05-01T16:04:00-07:00</published><updated>2010-05-01T16:04:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2010-05-01:/duck-typing-in-c-4-0.html</id><summary type="html">&lt;p&gt;One of my favorite new features in C# 4.0 is the &lt;span
style="font-family: Consolas;"&gt;&lt;span
style="font-size: small;"&gt;dynamic&lt;/span&gt; &lt;/span&gt;keyword.  Not only does
it allow you to do freaky things with interactions between C# and
scripting languages like IronRuby, but it opens up one of my favorite
features from that language – &lt;em&gt;Duck Typing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Duck typing&lt;/em&gt; is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite new features in C# 4.0 is the &lt;span
style="font-family: Consolas;"&gt;&lt;span
style="font-size: small;"&gt;dynamic&lt;/span&gt; &lt;/span&gt;keyword.  Not only does
it allow you to do freaky things with interactions between C# and
scripting languages like IronRuby, but it opens up one of my favorite
features from that language – &lt;em&gt;Duck Typing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Duck typing&lt;/em&gt; is like an interface without the rigor – a client just
assumes the class it’s calling has the method/property it expects, with
the semantics it hopes for.  For someone living in the world of
compile-time type safety, it can be a scary proposition, but it has its
benefits.&lt;/p&gt;
&lt;p&gt;A trivial example, but one which suggests the power and uses of &lt;em&gt;duck
typing&lt;/em&gt;, is below.  Three classes – all with different implementations
of IndexOf, adhering to no common interface – can be used without any
special casting, new delegate declarations, or other coercion.  This is
possible only through the ninja magic of &lt;span
style="font-family: Consolas; font-size: small;"&gt;dynamic&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;First, we declare a class with a custom IndexOf method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BarContainer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, in our main class we declare a method that uses our new class, as
well as a list and a string, and invokes the IndexOf method on each by
running them through &lt;span
style="font-family: Consolas; font-size: small;"&gt;dynamic&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DuckTyping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo, bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;BarContainer&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BarContainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Item &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; has &amp;#39;bar&amp;#39; at position &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;span
style="font-family: cons; font-size: small;"&gt;dynamic&lt;/span&gt; has some
limitations – sometimes surprising ones – that can limit its
usefulness.  The one that bites me the most is the lack of support for
extension methods.  Extension methods are a useful addition from C# 3.0
that adds an almost &lt;em&gt;Mixin&lt;/em&gt;-like functionality to the language, but due
to the way they are implemented (as static methods that work in
conjunction with a type, rather than as additions to the type itself),
they won’t work with&lt;span
style="font-family: Consolas; font-size: small;"&gt;dynamic&lt;/span&gt;.  Thus
the following code fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Extensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toFind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DuckTyping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo, bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;See, extension method works here: {0}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Item &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; has &amp;#39;bar&amp;#39; at position &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code is able to invoke IndexOf statically, but through the DLR it
fails with a &lt;span
style="font-family: Consolas; font-size: small;"&gt;RuntimeBindingException&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I think &lt;span
style="font-family: Consolas; font-size: small;"&gt;dynamic&lt;/span&gt; is a
fantastic and powerful addition to the language, but with great power…. 
As long as we’re careful with the types we use with it, and we
understand the limits imposed on us, I’m really looking forward to the
exciting future of static/dynamic hybrid code before us.&lt;/p&gt;</content><category term=".NET"></category><category term="C#"></category></entry><entry><title>Misusing Infer.NET For Fun and Profit</title><link href="http://www.mikelanzetta.com/misusing-infer-net-for-fun-and-profit.html" rel="alternate"></link><published>2009-12-04T22:21:00-08:00</published><updated>2009-12-04T22:21:00-08:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2009-12-04:/misusing-infer-net-for-fun-and-profit.html</id><summary type="html">&lt;p&gt;I’ve recently started looking
into &lt;a href="http://research.microsoft.com/en-us/um/cambridge/projects/infernet/"&gt;Infer.NET&lt;/a&gt; –
I’m trying to learn some Bayesian inference, and it seems like a good
tool for the job (I’m a bear of little brain, and need all the help I
can get).  However, it’s an exciting library, so I’ve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve recently started looking
into &lt;a href="http://research.microsoft.com/en-us/um/cambridge/projects/infernet/"&gt;Infer.NET&lt;/a&gt; –
I’m trying to learn some Bayesian inference, and it seems like a good
tool for the job (I’m a bear of little brain, and need all the help I
can get).  However, it’s an exciting library, so I’ve been playing with
it in other contexts – the subject of this post.&lt;/p&gt;
&lt;p&gt;One thing I find myself doing on occasion is using random variables to
drive some heuristic, whether it’s messing about with genetic
programming or just driving some randomization in tests.  Currently, the
main way to do this is to instantiate a random number generator and use
it to generate either ints or doubles, using those values to drive
decisions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With Infer.NET, you have a host of distributions to choose from, so you
can be a bit more selective.  For instance, if you were to implement the
above code using Infer.NET, you could use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Beta&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Beta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a &lt;a href="http://www.wolframalpha.com/input/?i=beta+distribution+%281%2C1%29"&gt;uniform Beta
distribution&lt;/a&gt; to
provide a pseudo-random that matches the behavior above.  However, you
could go one step further:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Bernoulli&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bernoulli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a &lt;a href="http://www.wolframalpha.com/input/?i=bernoulli+distribution"&gt;Bernoulli
distribution&lt;/a&gt;,
you make your intent plain – a software coin-flip with the behavior as
expected.  I’m a big fan of making my intent plain when coding – it fits
my laziness theory, I’ll have less to remember the next time I look at
the code.&lt;/p&gt;
&lt;p&gt;There are some &lt;a href="http://research.microsoft.com/en-us/um/cambridge/projects/infernet/codedoc/html/N_MicrosoftResearch_Infer_Distributions.htm"&gt;other
distributions&lt;/a&gt; available
to you with Infer.NET, which you might find handy.  For instance,
sometimes I need to implement exponential backoff scenarios with
jitter.  Normally, I’d just use a simple random and fuzz uniformly
around the delay, but in many cases I’d prefer to have a tighter
grouping around the delay – one which a uniform distribution can’t
provide.  Now with Infer.NET, I can use
a &lt;a href="http://www.wolframalpha.com/input/?i=gaussian+distribution+%281%2C2%29"&gt;Gaussian&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Gaussian&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gaussian&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I realize these examples are somewhat contrived, but I’m excited by the
possibilities behind Infer.NET – both great and small – and examples
like these help me work through them.  I’m hoping that this post will
help bring Infer.NET to a wider audience - well, all two people who read
my blog :)&lt;/p&gt;</content><category term=".NET"></category><category term="ML"></category></entry><entry><title>Using Java Concurrency Primitives: ReadWriteLock</title><link href="http://www.mikelanzetta.com/using-java-concurrency-primitives-readwritelock.html" rel="alternate"></link><published>2009-10-21T21:54:00-07:00</published><updated>2009-10-21T21:54:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2009-10-21:/using-java-concurrency-primitives-readwritelock.html</id><summary type="html">&lt;p&gt;So it’s been some time since I updated this blog, and I thought I’d
explain why just on the off-chance folks are actually reading. My wife
and I just bought a new house (well, town-house, we are in Seattle), and
that took (and is still taking) a lot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So it’s been some time since I updated this blog, and I thought I’d
explain why just on the off-chance folks are actually reading. My wife
and I just bought a new house (well, town-house, we are in Seattle), and
that took (and is still taking) a lot of my time. In addition, we’re in
the process of preparing for a new release at work, so I’ve been quite
busy with that. Finally, our office just moved from Seattle to Bellevue
(Microsoft is not just in Redmond), and that’s been distracting (my
commute has gone from 20 to 60 minutes each way).&lt;/p&gt;
&lt;p&gt;As of JDK 5, Java has added a host of new concurrency primitives that
allow you to fine-tune your code for multi-core scenarios (.NET has
added/is adding many more as of 4.0, but we’ll save that for future
posts).  I thought I’d do a few blog posts outlining how these new
primitives have helped me improve my code.  I’m not saying this is the
ideal way to do things, but they’re methods that have helped me and I
thought I’d pass them along.&lt;/p&gt;
&lt;p&gt;First up – the synchronized keyword vs. explicit locking. 
java.util.concurrent.locks contains a few new lock types, with the
ReadWriteLock being my favorite.  Yet I still see a lot of code that
looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Called a bunch */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;getStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* Called on occasion, by some sort of timer */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;computeNewStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do some expensive computation to build new stuff object&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few improvements we could make to this code, but here we’re
focusing on using the new lock construct. 
The &lt;a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html"&gt;ReentrantReadWriteLock&lt;/a&gt; is
ideal for these cases, where the “stuff” object is read more than it is
written.  The above code could be restructured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;getBetterStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;betterStuff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;unlock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;computeBetterStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;newStuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// do some expensive computation to build newStuff&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;betterStuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newStuff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeLock&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;unlock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ReadWriteLock&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReentrantReadWriteLock&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This contains two enhancements – first, we limit the locking period on
recomputation to just the piece of code where we’re storing the
newly-computed value.  This is doable even with existing constructs by
using an internal Object instance as a synchronization point.  Second,
we use the read-write lock to allow multiple readers to access the value
without contending with each other.  Only when we’re in the process of
setting the newly-computed value will readers be locked out.&lt;/p&gt;
&lt;p&gt;This example is largely illustrative, though..  In reality, since we’re
only resetting one value under computation, there’s no need for such a
heavyweight solution and I’d probably just go with an AtomicReference:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;getBestStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bestStuff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;computeBestStuff&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;newStuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// do some expensive computation to build newStuff&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bestStuff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newStuff&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AtomicReference&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bestStuff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this proves useful for some folks.  I’m planning on following
this up with more posts about both Java and .NET constructs for
concurrency, and as always I welcome comments and suggestions on future
directions.&lt;/p&gt;</content><category term="concurrency"></category><category term="Java"></category></entry><entry><title>Writing a Powershell Snapin for Bing</title><link href="http://www.mikelanzetta.com/writing-a-powershell-snapin-for-bing.html" rel="alternate"></link><published>2009-06-05T19:16:00-07:00</published><updated>2009-06-05T19:16:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2009-06-05:/writing-a-powershell-snapin-for-bing.html</id><summary type="html">&lt;p&gt;I’ve been meaning to write a post on how to author custom Powershell
Cmdlets for some time now, as it’s incredibly easy to do and makes an
awesome cmd shell even better.  I’m still more comfortable in tcsh, but
for working in Windows, Powershell makes life a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been meaning to write a post on how to author custom Powershell
Cmdlets for some time now, as it’s incredibly easy to do and makes an
awesome cmd shell even better.  I’m still more comfortable in tcsh, but
for working in Windows, Powershell makes life a lot easier – and the
fact that the pipeline is composed of objects allows for some serious
craziness.&lt;/p&gt;
&lt;p&gt;Anyway, I’ll have a future article on using Powershell itself, but for
now I want to focus on writing cmdlets.  You write cmdlets in .NET as
part of a “snapin” – ‘10 blue links’.  I work on the team and am still
surprised by queries that answer my questions (&lt;a href="http://www.bing.com/search?q=98102+weather&amp;amp;go=&amp;amp;form=QBRE"&gt;98102
weather&lt;/a&gt;, &lt;a href="http://www.bing.com/search?q=seattle+zip+code&amp;amp;go=&amp;amp;form=QBRE"&gt;seattle
zip code&lt;/a&gt;)
or make me laugh (&lt;a href="http://www.bing.com/search?q=calories+in+a+squirrel&amp;amp;go=&amp;amp;form=QBRE"&gt;calories in a
squirrel&lt;/a&gt;). 
Well, they’ve released a new version of the API to coincide with Bing,
and using it is easy.  For my example, I’ll be building a cmdlet to do
Bing Web Search, and output the results as either a string or an
XDocument.&lt;/p&gt;
&lt;p&gt;Bing has a simple developer API (see &lt;a href="http://www.bing.com/developers"&gt;here for
details&lt;/a&gt;), and for my purposes I’m
planning on using the REST-based XML binding, allowing simple HTTP GET
queries
like &lt;a href="http://api.search.live.net/xml.aspx?Appid=%E2%80%A6&amp;amp;query=foo&amp;amp;sources=web"&gt;http://api.search.live.net/xml.aspx?Appid=…&amp;amp;query=foo&amp;amp;sources=web&lt;/a&gt; to
return XML results (obviously, substituting a valid AppID).&lt;/p&gt;
&lt;p&gt;Writing these cmdlets and snapins is not that difficult, but can be
eased even further with the help of &lt;a href="http://psvs2008.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=26356"&gt;Powershell templates for
VS2008&lt;/a&gt; (&lt;a href="http://www.gangleri.net/2009/04/21/BuildingPowerShellCmdletsWithVisualStudio2008.aspx"&gt;and
some usage
details...&lt;/a&gt;).  
Once these are installed, I create my Get-BingWeb cmdlet as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;New-&gt;Project-&gt;PowershellCmdlet named BingCmdlets&lt;/li&gt;
&lt;li&gt;Add-&gt;New Item…-&gt;PowershellCmdlet SnapIn named BingCmdletsSnapin&lt;/li&gt;
&lt;li&gt;Add-&gt;New Item…-&gt;Powershell Cmdlet named BingWebCmdlet (Note: this
    should really be GetBingWebCmdlet, but to make using the template
    easier I'm leaving as-is)&lt;/li&gt;
&lt;li&gt;Add-&gt;New Item…-&gt;Class named BingUtil&lt;/li&gt;
&lt;li&gt;Add Reference…-&gt;System.Net (for HttpWebRequest/Response)&lt;/li&gt;
&lt;li&gt;Add Reference…-&gt;System.Xml.Linq (for XDocument)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then I write some source code (I’ll post the full sln as a tarball
sometime soon – right now all I’ve got is a VS2010 Beta version).  This
code, by the way, is not meant to be production quality (or even
particularly good), so if you find problems with it I’ll refuse to be
surprised :).&lt;/p&gt;
&lt;p&gt;I won’t even cover BingCmdletsSnapin.cs, since its implementation is
trivial based on the helpful templates linked above.&lt;/p&gt;
&lt;p&gt;BingUtil.cs contains utility methods for doing the query (BingAppId has
been redacted - I want folks to get their own and play with it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;BingApiUrlForXml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://api.search.live.net/xml.aspx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;requestUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuildUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;HttpWebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;HttpWebRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;HttpWebResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to read response from [&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;requestUrl&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;].  Received status code &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;BuildUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0}?Appid={1}&amp;amp;query={2}&amp;amp;sources={3}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;BingUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BingApiUrlForXml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;BingUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BingAppId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ReadResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamReader&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StreamReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadToEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;BingWebCmdlet.cs is the cmdlet itself, containing the parameters, and
the all-important ProcessRecord method.  ProcessRecord is called by
Powershell on cmdlet classes to get them to actually do work.  Output
from ProcessRecord to the next phase of the pipeline (or the screen) is
done via the WriteObject method – write whatever you want, and
Powershell will figure it out.  Anyway, here’s what the code looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ProcessRecord&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;BingUtil&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BingUtil&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;resultStr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchTerm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsXml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;XDocument&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;WriteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WriteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[Parameter(Mandatory = true, Position = 1, ValueFromPipelineByPropertyName = true)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SearchTerm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;[Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;SwitchParameter&lt;/span&gt; &lt;span class="n"&gt;AsXml&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The parameters are defined via Attributes (as is the Cmdlet itself). 
Important things to note in the code above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve set “Position = 1” on the parameter SearchTerm, meaning you can
    call “Get-BingWeb foo” and it will intuit that “foo” is SearchTerm,
    saving you from having to supply –SearchTerm every time.&lt;/li&gt;
&lt;li&gt;I’ve set “ValueFromPipelineByPropertyName=true” on both parameters,
    meaning that if incoming pipeline objects contain SearchTerm/AsXml
    parameters, those will be used to fill parameters.  I should also
    most likely set ValueFromPipeline=true on SearchTerm, allowing
    incoming pipeline objects to be converted to strings for search
    terms.&lt;/li&gt;
&lt;li&gt;The return type SwitchParameter on AsXml makes that parameter behave
    as a switch/flag, turned on by its presence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we’ve written the snapin, we can build, install, and run it! 
So first, build the snapin dll.  I’ve built it as a 32-bit debug DLL –
if you’ve built the 64-bit version instead, you’ll need to use the
Framework64 version of installutil.exe below.&lt;/p&gt;
&lt;p&gt;Install your DLL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;\windows\Microsoft.NET\Framework\v2.0.50727\InstallUtil.exe&lt;/span&gt;&lt;span class="c1"&gt; c:\path\to\dll&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you should see output similar to the below:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_2.png"&gt;&lt;img alt="image" src="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_thumb.png" title="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure your snapin was registered…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;get-pssnapin&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;registered&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_4.png"&gt;&lt;img alt="image" src="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_thumb_1.png" title="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then add it and execute!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;add-pssnapin&lt;/span&gt; &lt;span class="n"&gt;BingCmdlets&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;get-bingweb&lt;/span&gt; &lt;span class="n"&gt;sushi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output should look roughly like the below:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_6.png"&gt;&lt;img alt="image" src="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_E4B7/image_thumb_2.png" title="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Obviously this isn’t the format we’d want for the results, so we can run
it again and get the result as XML.  At that point, we can use LINQ to
extract the values we care about, and format them as CSV or whatever we
want.  We need the “web:” namespace to prefix our XML values, so first I
define that for future use….&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$webns&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;//&lt;/span&gt;&lt;span class="n"&gt;schemas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LiveSearch&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;2008&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$doc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;get-bingweb&lt;/span&gt; &lt;span class="n"&gt;sushi&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;asxml&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Descendants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$webns&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;WebResult&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$results&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$webns&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$webns&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_BC02/image_2.png"&gt;&lt;img alt="image" src="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/WritingaPowershellSnapinforBing_BC02/image_thumb.png" title="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this has given you an idea both of what’s possible within
Powershell, and what’s possible via the Bing API.  Both are easy to use,
and provide some incredible power.&lt;/p&gt;
&lt;p&gt;As a parting note, you could do all of these operations within
Powershell itself – there’s no real need to write the cmdlets.  However,
if you write the cmdlets and factor your utility classes well, your code
will be cleaner and you’ll find yourself using the Bing API in your C#
programs, your IronRuby scripts, or elsewhere.  And well-written cmdlets
are easier to incorporate into others’ powershells than scripts, meaning
your code will benefit others.&lt;/p&gt;
&lt;p&gt;[Update: 2009-June-09]&lt;/p&gt;
&lt;p&gt;I've published my example on codeplex (as a zip, not a tgz,
sorry): &lt;a href="http://bingable.codeplex.com/" title="http://bingable.codeplex.com/"&gt;http://bingable.codeplex.com/ &lt;/a&gt;&lt;/p&gt;</content><category term="Powershell"></category></entry><entry><title>Java’s Checked vs. Unchecked Exceptions</title><link href="http://www.mikelanzetta.com/javas-checked-vs-unchecked-exceptions.html" rel="alternate"></link><published>2009-05-05T12:17:00-07:00</published><updated>2009-05-05T12:17:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2009-05-05:/javas-checked-vs-unchecked-exceptions.html</id><summary type="html">&lt;p&gt;I’m probably late to the party here (I’ve been in C#-land lately), but
I think I’ve finally worked out what irks me about the Checked vs.
Unchecked Exception religious war in the Java world.  I’ve always been
on the Checked side of the fence, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m probably late to the party here (I’ve been in C#-land lately), but
I think I’ve finally worked out what irks me about the Checked vs.
Unchecked Exception religious war in the Java world.  I’ve always been
on the Checked side of the fence, but lately there’s a whole host of
folks that I respect coming out in favor of Unchecked.  My problem is
this: declaring an exception “Checked” or “Unchecked” is actually
declaring it two different, largely orthogonal, things.  When you
declare that a method throws a Checked exception, you are making two
statements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This exception is part of the signature of my method.&lt;/li&gt;
&lt;li&gt;This exception must be dealt with by any method that calls me.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s examine the second point in the context of a server application. 
If you have a server application, you expect it to continue running at
all times, unless something catastrophic happens.  For most of the
servers I’ve worked on, even things like failed SQL connections, full
disks, and classloader errors (in the face of misconfigured DI) didn’t
count as catastrophic – the server should continue, hopefully setting
off some alarms and perhaps doing what it can to clean itself up.  This
means that for just about any exception, it must be dealt with.&lt;/p&gt;
&lt;p&gt;Let’s assume for a minute that we make the decision that MySQLException
is “catastrophic” and make it unchecked.  Our methods don’t declare it,
clients of ours don’t declare it, and all of a sudden our server
application crashes when it can’t get a connection – or worse yet it
catches it, but doesn’t know which of the ten DBs it uses is having the
problem and should be retried.&lt;/p&gt;
&lt;p&gt;The obvious objection is that someone should be handling this exception
– but who?  The method that gets the connection probably shouldn’t be
the one trying to reconnect on failure, which means that some method
above that needs to manage the retry-or-fail logic.  This means, though,
that it needs to know when a failure has happened – and this is where I
start to hate unchecked exceptions.  In order for the method above it to
know when a retry-able vs. fatal error has happened, it needs to either
assume that RuntimeException means it can try again, or dig into the
code and figure out that MySQLException is throws for these cases.&lt;/p&gt;
&lt;p&gt;Many folks will say that a good dev will put that sort of info into the
comments of the method (e.g. in a @throws clause), but there’s certainly
nothing requiring them to do so, and I’ve known plenty of devs that
wouldn’t (because it’s catastrophic, and what are clients going to do
about it?).  It seems odd to me that many of the same people arguing for
greater robustness and visibility in method/interface definition –
pre/post-condition definitions as part of the language, etc. – still
argue for unchecked exceptions.  I’m not saying they’re wrong, I’m just
outlining why I don’t like it.&lt;/p&gt;
&lt;p&gt;So what do I like?  Wrapping.  Let’s take my example above again:  the
low-level method fails to get a connection, and throws a (checked)
MySQLException.  The calling method knows to catch it, and then
retries.  Say it keeps failing – then this higher-level method wraps the
MySQLException in a (checked) ResourceUnavailableException.  The
top-level method knows there’s an issue with the resource, and can
either die, fail the operation, or wait and try again later.&lt;/p&gt;
&lt;p&gt;Wrapping doesn’t solve everything – there are some exceptions that
really should be unchecked (e.g. out-of-memory), and RMI changes
everything (don’t pass your inner MySQLException to someone who won’t
have that class loaded).  What it does is allow you to make your
interface explicit – even your error conditions – without forcing you to
throw exceptions at a low level your clients don’t want.  Exceptions are
a part of your interface, and should get the same care and attention as
the rest of it.&lt;/p&gt;</content><category term="Java"></category></entry><entry><title>“You can’t use that, it’s not performant”</title><link href="http://www.mikelanzetta.com/you-cant-use-that-its-not-performant.html" rel="alternate"></link><published>2009-04-08T12:54:00-07:00</published><updated>2009-04-08T12:54:00-07:00</updated><author><name>noodlefrenzy</name></author><id>tag:www.mikelanzetta.com,2009-04-08:/you-cant-use-that-its-not-performant.html</id><summary type="html">&lt;p&gt;I can’t tell you how many times I’ve heard this - from PMs, dev leads,
and colleagues.  Other than the use of the “word” performant, what bugs
me about this is that usually they don’t have any data (or current data)
to back it up.  Coming from the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can’t tell you how many times I’ve heard this - from PMs, dev leads,
and colleagues.  Other than the use of the “word” performant, what bugs
me about this is that usually they don’t have any data (or current data)
to back it up.  Coming from the Java world, I’ve probably heard it more
than most of my .NET colleagues, since Java is still accused of being
slower than X-Windows over a 300baud modem.&lt;/p&gt;
&lt;p&gt;However, in the .NET world, this is increasingly used as an excuse to
hamstring new development and prevent the use of new features.  Luckily,
Vance Morrison has provided folks in the .NET world a way to verify
these claims, with his great MeasureIt tool, described in (and available
from) &lt;a href="http://blogs.msdn.com/vancem/archive/2009/02/06/measureit-update-tool-for-doing-microbenchmarks.aspx"&gt;this blog post of
his.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recently ran into one of these situations when I was told that I
couldn’t use the standard .NET XML Serializer and had to use the
XmlReader/Writer classes, because the serializer wasn’t “performant”
enough.  This could be a valid concern, but I didn’t believe it – mostly
because I didn’t want to write and maintain all of that reader/writer
code.  So I grabbed MeasureIt and went to work – I coded up four
different tests reading different size XML files with the schema I
needed: XmlReader, Xml Serializer, XPath, and LINQ to XML.  These tests
were not measuring how well these technologies worked in the general
case, but in my specific case, on my specific problem, and with my
specific coding irregularities.  I had the tests reviewed by some folks
on my team who knew a bit more about .NET + XML than I did, and then
went to town.&lt;/p&gt;
&lt;p&gt;The graph below measures the time (in normalized time units, on the
left) to read different size XML files (on the bottom – the number of
high-level objects in the files).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/Youcantusethatitsnotperformant_DB47/image_2.png"&gt;&lt;img alt="image" src="http://blogs.msdn.com/blogfiles/milanz/WindowsLiveWriter/Youcantusethatitsnotperformant_DB47/image_thumb.png" title="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking at the results, the XmlReader and Serializer implementation look
like they perform and scale pretty close to identically.  That’s pretty
impressive, and makes me wonder if the Serializer implementation uses
XmlReader/Writer under the hood.  I asked around, and it looks like
currently that is the way things are done (I’m not on the .NET library
team, so I could be wrong), and using sgen.exe with /k I took a look at
the generated serialization code and it looks terse.  These results
allowed me to justify my use of the serializer – making my code much
shorter and easier to test and maintain, at the cost of a very small
performance hit.&lt;/p&gt;
&lt;p&gt;Performance is important, but it should be viewed as an overall part of
the design and development process.  Worrying about performance without
having concrete performance goals is a recipe for pain – MeasureIt is a
tool to allow you to start these sorts of performance conversations,
turning vague performance worries into concrete results that can be
discussed practically.  Once you start having these sorts of
conversations, you can advance to the point where you have concrete,
user-focused and testable performance goals – much easier to satisfy
than a vague sense of dread.&lt;/p&gt;</content><category term="performance"></category></entry></feed>